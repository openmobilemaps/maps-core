// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from core.djinni

#pragma once

#include "Renderer.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeRenderer final : ::djinni::JniInterface<::Renderer, NativeRenderer> {
public:
    using CppType = std::shared_ptr<::Renderer>;
    using CppOptType = std::shared_ptr<::Renderer>;
    using JniType = jobject;

    using Boxed = NativeRenderer;

    ~NativeRenderer();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeRenderer>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeRenderer>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeRenderer();
    friend ::djinni::JniClass<NativeRenderer>;
    friend ::djinni::JniInterface<::Renderer, NativeRenderer>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::Renderer
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void addToRenderQueue(const std::shared_ptr<::RenderPass> & renderPass) override;
        void drawFrame(const std::shared_ptr<::RenderingContext> & renderingContext, const std::shared_ptr<::Camera> & camera) override;

    private:
        friend ::djinni::JniInterface<::Renderer, ::djinni_generated::NativeRenderer>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("ch/ubique/mapscore/shared/graphics/Renderer") };
    const jmethodID method_addToRenderQueue { ::djinni::jniGetMethodID(clazz.get(), "addToRenderQueue", "(Lch/ubique/mapscore/shared/graphics/RenderPass;)V") };
    const jmethodID method_drawFrame { ::djinni::jniGetMethodID(clazz.get(), "drawFrame", "(Lch/ubique/mapscore/shared/graphics/RenderingContext;Lch/ubique/mapscore/shared/graphics/Camera;)V") };
};

}  // namespace djinni_generated
