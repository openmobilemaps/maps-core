@extern "../yaml/graphics_object_interface.yaml"
@extern "../yaml/graphics_object_factory_interface.yaml"
@extern "../yaml/shader_factory_interface.yaml"
@extern "../yaml/vec_3_d.yaml"
@extern "../yaml/vec_2_i.yaml"
@extern "../yaml/color.yaml"

scene_interface = interface +c {
    static create(graphics_factory: graphics_object_factory_interface, shader_factory: shader_factory_interface, rendering_context: rendering_context_interface) : scene_interface;
    static createWithOpenGl() : scene_interface;
    set_callback_handler(callback_interface: scene_callback_interface);
    set_camera(camera: camera_interface);
    get_camera() : camera_interface;
    get_renderer() : renderer_interface;
    get_rendering_context() : rendering_context_interface;
    get_graphics_factory(): graphics_object_factory_interface;
    get_shader_factory(): shader_factory_interface;
    draw_frame();
    clear();
    invalidate();
}

scene_callback_interface = interface +c +j +o  {
    invalidate();
}

rendering_context_interface = interface +c +j +o {
    # Ensure calling on graphics thread
    on_surface_created();
    # Ensure calling on graphics thread
    set_viewport_size(size: vec_2_i);
    get_viewport_size() : vec_2_i;
    set_background_color(color: color);
    setupDrawFrame();
}

render_pass_interface = interface +c +j +o {
    get_graphics_objects() : list<graphics_object_interface>;
    get_render_pass_config() : render_pass_config;
}

render_pass_config = record {
    render_pass_index: i32;
}

renderer_interface = interface +c +j +o {
    add_to_render_queue(render_pass: render_pass_interface);
    # Ensure calling on graphics thread
    draw_frame(rendering_context: rendering_context_interface, camera: camera_interface);
}

camera_interface = interface +c +j +o {
    get_mvp_matrix() : list<f32>;
    viewport_size_changed();
}
