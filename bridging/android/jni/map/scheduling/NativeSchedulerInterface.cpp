// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from task_scheduler.djinni

#include "NativeSchedulerInterface.h"  // my header
#include "Marshal.hpp"
#include "NativeSchedulerGraphicsTaskCallbacks.h"
#include "NativeTaskInterface.h"
#include "NativeThreadPoolCallbacks.h"

namespace djinni_generated {

NativeSchedulerInterface::NativeSchedulerInterface() : ::djinni::JniInterface<::SchedulerInterface, NativeSchedulerInterface>("io/openmobilemaps/mapscore/shared/map/scheduling/SchedulerInterface$CppProxy") {}

NativeSchedulerInterface::~NativeSchedulerInterface() = default;

NativeSchedulerInterface::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeSchedulerInterface::JavaProxy::~JavaProxy() = default;

void NativeSchedulerInterface::JavaProxy::addTask(const /*not-null*/ std::shared_ptr<::TaskInterface> & c_task) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeSchedulerInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_addTask,
                           ::djinni::get(::djinni_generated::NativeTaskInterface::fromCpp(jniEnv, c_task)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeSchedulerInterface::JavaProxy::addTasks(const std::vector</*not-null*/ std::shared_ptr<::TaskInterface>> & c_tasks) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeSchedulerInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_addTasks,
                           ::djinni::get(::djinni::List<::djinni_generated::NativeTaskInterface>::fromCpp(jniEnv, c_tasks)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeSchedulerInterface::JavaProxy::removeTask(const std::string & c_id) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeSchedulerInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_removeTask,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_id)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeSchedulerInterface::JavaProxy::clear() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeSchedulerInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_clear);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeSchedulerInterface::JavaProxy::pause() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeSchedulerInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_pause);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeSchedulerInterface::JavaProxy::resume() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeSchedulerInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_resume);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeSchedulerInterface::JavaProxy::destroy() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeSchedulerInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_destroy);
    ::djinni::jniExceptionCheck(jniEnv);
}
bool NativeSchedulerInterface::JavaProxy::hasSeparateGraphicsInvocation() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeSchedulerInterface>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_hasSeparateGraphicsInvocation);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
bool NativeSchedulerInterface::JavaProxy::runGraphicsTasks() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeSchedulerInterface>::get();
    auto jret = jniEnv->CallBooleanMethod(Handle::get().get(), data.method_runGraphicsTasks);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Bool::toCpp(jniEnv, jret);
}
void NativeSchedulerInterface::JavaProxy::setSchedulerGraphicsTaskCallbacks(const /*not-null*/ std::shared_ptr<::SchedulerGraphicsTaskCallbacks> & c_callbacks) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeSchedulerInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setSchedulerGraphicsTaskCallbacks,
                           ::djinni::get(::djinni_generated::NativeSchedulerGraphicsTaskCallbacks::fromCpp(jniEnv, c_callbacks)));
    ::djinni::jniExceptionCheck(jniEnv);
}
/*not-null*/ std::shared_ptr<::ThreadPoolCallbacks> NativeSchedulerInterface::JavaProxy::getThreadPoolCallbacks() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeSchedulerInterface>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getThreadPoolCallbacks);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeThreadPoolCallbacks::toCpp(jniEnv, jret);
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_scheduling_SchedulerInterface_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        delete reinterpret_cast<::djinni::CppProxyHandle<::SchedulerInterface>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_scheduling_SchedulerInterface_00024CppProxy_native_1addTask(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_task)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::SchedulerInterface>(nativeRef);
        ref->addTask(::djinni_generated::NativeTaskInterface::toCpp(jniEnv, j_task));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_scheduling_SchedulerInterface_00024CppProxy_native_1addTasks(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_tasks)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::SchedulerInterface>(nativeRef);
        ref->addTasks(::djinni::List<::djinni_generated::NativeTaskInterface>::toCpp(jniEnv, j_tasks));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_scheduling_SchedulerInterface_00024CppProxy_native_1removeTask(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_id)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::SchedulerInterface>(nativeRef);
        ref->removeTask(::djinni::String::toCpp(jniEnv, j_id));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_scheduling_SchedulerInterface_00024CppProxy_native_1clear(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::SchedulerInterface>(nativeRef);
        ref->clear();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_scheduling_SchedulerInterface_00024CppProxy_native_1pause(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::SchedulerInterface>(nativeRef);
        ref->pause();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_scheduling_SchedulerInterface_00024CppProxy_native_1resume(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::SchedulerInterface>(nativeRef);
        ref->resume();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_scheduling_SchedulerInterface_00024CppProxy_native_1destroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::SchedulerInterface>(nativeRef);
        ref->destroy();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jboolean JNICALL Java_io_openmobilemaps_mapscore_shared_map_scheduling_SchedulerInterface_00024CppProxy_native_1hasSeparateGraphicsInvocation(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::SchedulerInterface>(nativeRef);
        auto r = ref->hasSeparateGraphicsInvocation();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jboolean JNICALL Java_io_openmobilemaps_mapscore_shared_map_scheduling_SchedulerInterface_00024CppProxy_native_1runGraphicsTasks(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::SchedulerInterface>(nativeRef);
        auto r = ref->runGraphicsTasks();
        return ::djinni::release(::djinni::Bool::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_scheduling_SchedulerInterface_00024CppProxy_native_1setSchedulerGraphicsTaskCallbacks(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_callbacks)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::SchedulerInterface>(nativeRef);
        ref->setSchedulerGraphicsTaskCallbacks(::djinni_generated::NativeSchedulerGraphicsTaskCallbacks::toCpp(jniEnv, j_callbacks));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_io_openmobilemaps_mapscore_shared_map_scheduling_SchedulerInterface_00024CppProxy_native_1getThreadPoolCallbacks(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::SchedulerInterface>(nativeRef);
        auto r = ref->getThreadPoolCallbacks();
        return ::djinni::release(::djinni_generated::NativeThreadPoolCallbacks::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

} // namespace djinni_generated
