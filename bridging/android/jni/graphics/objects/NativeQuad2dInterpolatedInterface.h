// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from graphicsobjects.djinni

#pragma once

#include "Quad2dInterpolatedInterface.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeQuad2dInterpolatedInterface final : ::djinni::JniInterface<::Quad2dInterpolatedInterface, NativeQuad2dInterpolatedInterface> {
public:
    using CppType = std::shared_ptr<::Quad2dInterpolatedInterface>;
    using CppOptType = std::shared_ptr<::Quad2dInterpolatedInterface>;
    using JniType = jobject;

    using Boxed = NativeQuad2dInterpolatedInterface;

    ~NativeQuad2dInterpolatedInterface();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeQuad2dInterpolatedInterface>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeQuad2dInterpolatedInterface>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeQuad2dInterpolatedInterface();
    friend ::djinni::JniClass<NativeQuad2dInterpolatedInterface>;
    friend ::djinni::JniInterface<::Quad2dInterpolatedInterface, NativeQuad2dInterpolatedInterface>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::Quad2dInterpolatedInterface
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void setFrame(const ::Quad2dD & frame, const ::RectD & textureCoordinates) override;
        void loadTextures(const /*not-null*/ std::shared_ptr<::RenderingContextInterface> & context, const /*not-null*/ std::shared_ptr<::TextureHolderInterface> & textureHolder1, const /*not-null*/ std::shared_ptr<::TextureHolderInterface> & textureHolder2) override;
        void loadColorLegendTexture(const /*not-null*/ std::shared_ptr<::RenderingContextInterface> & context, const /*not-null*/ std::shared_ptr<::TextureHolderInterface> & textureHolder) override;
        void removeTextures() override;
        /*not-null*/ std::shared_ptr<::GraphicsObjectInterface> asGraphicsObject() override;
        /*not-null*/ std::shared_ptr<::MaskingObjectInterface> asMaskingObject() override;

    private:
        friend ::djinni::JniInterface<::Quad2dInterpolatedInterface, ::djinni_generated::NativeQuad2dInterpolatedInterface>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/openmobilemaps/mapscore/shared/graphics/objects/Quad2dInterpolatedInterface") };
    const jmethodID method_setFrame { ::djinni::jniGetMethodID(clazz.get(), "setFrame", "(Lio/openmobilemaps/mapscore/shared/graphics/common/Quad2dD;Lio/openmobilemaps/mapscore/shared/graphics/common/RectD;)V") };
    const jmethodID method_loadTextures { ::djinni::jniGetMethodID(clazz.get(), "loadTextures", "(Lio/openmobilemaps/mapscore/shared/graphics/RenderingContextInterface;Lio/openmobilemaps/mapscore/shared/graphics/objects/TextureHolderInterface;Lio/openmobilemaps/mapscore/shared/graphics/objects/TextureHolderInterface;)V") };
    const jmethodID method_loadColorLegendTexture { ::djinni::jniGetMethodID(clazz.get(), "loadColorLegendTexture", "(Lio/openmobilemaps/mapscore/shared/graphics/RenderingContextInterface;Lio/openmobilemaps/mapscore/shared/graphics/objects/TextureHolderInterface;)V") };
    const jmethodID method_removeTextures { ::djinni::jniGetMethodID(clazz.get(), "removeTextures", "()V") };
    const jmethodID method_asGraphicsObject { ::djinni::jniGetMethodID(clazz.get(), "asGraphicsObject", "()Lio/openmobilemaps/mapscore/shared/graphics/objects/GraphicsObjectInterface;") };
    const jmethodID method_asMaskingObject { ::djinni::jniGetMethodID(clazz.get(), "asMaskingObject", "()Lio/openmobilemaps/mapscore/shared/graphics/objects/MaskingObjectInterface;") };
};

} // namespace djinni_generated
