// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from renderer.djinni

#pragma once

#include "Camera.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeCamera final : ::djinni::JniInterface<::Camera, NativeCamera> {
public:
    using CppType = std::shared_ptr<::Camera>;
    using CppOptType = std::shared_ptr<::Camera>;
    using JniType = jobject;

    using Boxed = NativeCamera;

    ~NativeCamera();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeCamera>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeCamera>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeCamera();
    friend ::djinni::JniClass<NativeCamera>;
    friend ::djinni::JniInterface<::Camera, NativeCamera>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::Camera
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        int64_t getMvpMatrix() override;
        void addListener(const std::shared_ptr<::CameraListener> & listener) override;
        void removeListener(const std::shared_ptr<::CameraListener> & listener) override;

    private:
        friend ::djinni::JniInterface<::Camera, ::djinni_generated::NativeCamera>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("ch/ubique/mapscore/shared/graphics/Camera") };
    const jmethodID method_getMvpMatrix { ::djinni::jniGetMethodID(clazz.get(), "getMvpMatrix", "()J") };
    const jmethodID method_addListener { ::djinni::jniGetMethodID(clazz.get(), "addListener", "(Lch/ubique/mapscore/shared/graphics/CameraListener;)V") };
    const jmethodID method_removeListener { ::djinni::jniGetMethodID(clazz.get(), "removeListener", "(Lch/ubique/mapscore/shared/graphics/CameraListener;)V") };
};

}  // namespace djinni_generated
