// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

#pragma once

#include "RenderTargetInterface.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeRenderTargetInterface final : ::djinni::JniInterface<::RenderTargetInterface, NativeRenderTargetInterface> {
public:
    using CppType = std::shared_ptr<::RenderTargetInterface>;
    using CppOptType = std::shared_ptr<::RenderTargetInterface>;
    using JniType = jobject;

    using Boxed = NativeRenderTargetInterface;

    ~NativeRenderTargetInterface();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeRenderTargetInterface>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeRenderTargetInterface>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeRenderTargetInterface();
    friend ::djinni::JniClass<NativeRenderTargetInterface>;
    friend ::djinni::JniInterface<::RenderTargetInterface, NativeRenderTargetInterface>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::RenderTargetInterface
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        /*nullable*/ std::shared_ptr<::OpenGlRenderTargetInterface> asGlRenderTargetInterface() override;

    private:
        friend ::djinni::JniInterface<::RenderTargetInterface, ::djinni_generated::NativeRenderTargetInterface>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/openmobilemaps/mapscore/shared/graphics/RenderTargetInterface") };
    const jmethodID method_asGlRenderTargetInterface { ::djinni::jniGetMethodID(clazz.get(), "asGlRenderTargetInterface", "()Lio/openmobilemaps/mapscore/shared/graphics/OpenGlRenderTargetInterface;") };
};

} // namespace djinni_generated
