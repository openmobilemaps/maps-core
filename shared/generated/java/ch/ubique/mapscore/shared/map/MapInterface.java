// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from core.djinni

package ch.ubique.mapscore.shared.map;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class MapInterface {
    public abstract void setCallbackHandler(MapCallbackInterface callbackInterface);

    public abstract void setLoader(ch.ubique.mapscore.shared.map.loader.LoaderInterface loader);

    public abstract ch.ubique.mapscore.shared.graphics.objects.GraphicsObjectFactoryInterface getGraphicsObjectFactory();

    public abstract ch.ubique.mapscore.shared.graphics.shader.ShaderFactoryInterface getShaderFactory();

    public abstract ch.ubique.mapscore.shared.map.scheduling.SchedulerInterface getScheduler();

    public abstract ch.ubique.mapscore.shared.graphics.RenderingContextInterface getRenderingContext();

    public abstract MapConfig getMapConfig();

    public abstract void setCamera(ch.ubique.mapscore.shared.graphics.CameraInterface camera);

    public abstract ch.ubique.mapscore.shared.graphics.CameraInterface getCamera();

    public abstract void addDefaultTouchHandler(float density);

    public abstract void setTouchHandler(ch.ubique.mapscore.shared.map.controls.TouchHandlerInterface touchHandler);

    public abstract ch.ubique.mapscore.shared.map.controls.TouchHandlerInterface getTouchHandler();

    public abstract void addLayer(ch.ubique.mapscore.shared.map.layers.LayerInterface layer);

    public abstract void removeLayer(ch.ubique.mapscore.shared.map.layers.LayerInterface layer);

    public abstract void invalidate();

    public abstract void drawFrame();

    public abstract void resume();

    public abstract void pause();

    public static MapInterface create(ch.ubique.mapscore.shared.graphics.objects.GraphicsObjectFactoryInterface graphicsFactory, ch.ubique.mapscore.shared.graphics.shader.ShaderFactoryInterface shaderFactory, ch.ubique.mapscore.shared.graphics.RenderingContextInterface renderingContext, MapConfig mapConfig, ch.ubique.mapscore.shared.map.scheduling.SchedulerInterface scheduler)
    {
        return CppProxy.create(graphicsFactory,
                               shaderFactory,
                               renderingContext,
                               mapConfig,
                               scheduler);
    }

    public static MapInterface createWithOpenGl(MapConfig mapConfig, ch.ubique.mapscore.shared.map.scheduling.SchedulerInterface scheduler)
    {
        return CppProxy.createWithOpenGl(mapConfig,
                                         scheduler);
    }

    private static final class CppProxy extends MapInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void setCallbackHandler(MapCallbackInterface callbackInterface)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCallbackHandler(this.nativeRef, callbackInterface);
        }
        private native void native_setCallbackHandler(long _nativeRef, MapCallbackInterface callbackInterface);

        @Override
        public void setLoader(ch.ubique.mapscore.shared.map.loader.LoaderInterface loader)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setLoader(this.nativeRef, loader);
        }
        private native void native_setLoader(long _nativeRef, ch.ubique.mapscore.shared.map.loader.LoaderInterface loader);

        @Override
        public ch.ubique.mapscore.shared.graphics.objects.GraphicsObjectFactoryInterface getGraphicsObjectFactory()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getGraphicsObjectFactory(this.nativeRef);
        }
        private native ch.ubique.mapscore.shared.graphics.objects.GraphicsObjectFactoryInterface native_getGraphicsObjectFactory(long _nativeRef);

        @Override
        public ch.ubique.mapscore.shared.graphics.shader.ShaderFactoryInterface getShaderFactory()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getShaderFactory(this.nativeRef);
        }
        private native ch.ubique.mapscore.shared.graphics.shader.ShaderFactoryInterface native_getShaderFactory(long _nativeRef);

        @Override
        public ch.ubique.mapscore.shared.map.scheduling.SchedulerInterface getScheduler()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getScheduler(this.nativeRef);
        }
        private native ch.ubique.mapscore.shared.map.scheduling.SchedulerInterface native_getScheduler(long _nativeRef);

        @Override
        public ch.ubique.mapscore.shared.graphics.RenderingContextInterface getRenderingContext()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getRenderingContext(this.nativeRef);
        }
        private native ch.ubique.mapscore.shared.graphics.RenderingContextInterface native_getRenderingContext(long _nativeRef);

        @Override
        public MapConfig getMapConfig()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getMapConfig(this.nativeRef);
        }
        private native MapConfig native_getMapConfig(long _nativeRef);

        @Override
        public void setCamera(ch.ubique.mapscore.shared.graphics.CameraInterface camera)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCamera(this.nativeRef, camera);
        }
        private native void native_setCamera(long _nativeRef, ch.ubique.mapscore.shared.graphics.CameraInterface camera);

        @Override
        public ch.ubique.mapscore.shared.graphics.CameraInterface getCamera()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCamera(this.nativeRef);
        }
        private native ch.ubique.mapscore.shared.graphics.CameraInterface native_getCamera(long _nativeRef);

        @Override
        public void addDefaultTouchHandler(float density)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addDefaultTouchHandler(this.nativeRef, density);
        }
        private native void native_addDefaultTouchHandler(long _nativeRef, float density);

        @Override
        public void setTouchHandler(ch.ubique.mapscore.shared.map.controls.TouchHandlerInterface touchHandler)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setTouchHandler(this.nativeRef, touchHandler);
        }
        private native void native_setTouchHandler(long _nativeRef, ch.ubique.mapscore.shared.map.controls.TouchHandlerInterface touchHandler);

        @Override
        public ch.ubique.mapscore.shared.map.controls.TouchHandlerInterface getTouchHandler()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getTouchHandler(this.nativeRef);
        }
        private native ch.ubique.mapscore.shared.map.controls.TouchHandlerInterface native_getTouchHandler(long _nativeRef);

        @Override
        public void addLayer(ch.ubique.mapscore.shared.map.layers.LayerInterface layer)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addLayer(this.nativeRef, layer);
        }
        private native void native_addLayer(long _nativeRef, ch.ubique.mapscore.shared.map.layers.LayerInterface layer);

        @Override
        public void removeLayer(ch.ubique.mapscore.shared.map.layers.LayerInterface layer)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeLayer(this.nativeRef, layer);
        }
        private native void native_removeLayer(long _nativeRef, ch.ubique.mapscore.shared.map.layers.LayerInterface layer);

        @Override
        public void invalidate()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_invalidate(this.nativeRef);
        }
        private native void native_invalidate(long _nativeRef);

        @Override
        public void drawFrame()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_drawFrame(this.nativeRef);
        }
        private native void native_drawFrame(long _nativeRef);

        @Override
        public void resume()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_resume(this.nativeRef);
        }
        private native void native_resume(long _nativeRef);

        @Override
        public void pause()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_pause(this.nativeRef);
        }
        private native void native_pause(long _nativeRef);

        public static native MapInterface create(ch.ubique.mapscore.shared.graphics.objects.GraphicsObjectFactoryInterface graphicsFactory, ch.ubique.mapscore.shared.graphics.shader.ShaderFactoryInterface shaderFactory, ch.ubique.mapscore.shared.graphics.RenderingContextInterface renderingContext, MapConfig mapConfig, ch.ubique.mapscore.shared.map.scheduling.SchedulerInterface scheduler);

        public static native MapInterface createWithOpenGl(MapConfig mapConfig, ch.ubique.mapscore.shared.map.scheduling.SchedulerInterface scheduler);
    }
}
