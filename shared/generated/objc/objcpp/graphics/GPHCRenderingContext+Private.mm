// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from core.djinni

#import "GPHCRenderingContext+Private.h"
#import "GPHCRenderingContext.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface GPHCRenderingContextCppProxy : NSObject<GPHCRenderingContext>

- (id)initWithCpp:(const std::shared_ptr<::RenderingContext>&)cppRef;

@end

@implementation GPHCRenderingContextCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::RenderingContext>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::RenderingContext>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nullable id<GPHCRenderingContext>)getSelf {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getSelf();
        return ::djinni_generated::RenderingContext::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onSurfaceCreated {
    try {
        _cppRefHandle.get()->onSurfaceCreated();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setViewport:(int32_t)w
                  h:(int32_t)h {
    try {
        _cppRefHandle.get()->setViewport(::djinni::I32::toCpp(w),
                                         ::djinni::I32::toCpp(h));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class RenderingContext::ObjcProxy final
: public ::RenderingContext
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::RenderingContext;
public:
    using ObjcProxyBase::ObjcProxyBase;
    std::shared_ptr<::RenderingContext> getSelf() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getSelf];
            return ::djinni_generated::RenderingContext::toCpp(objcpp_result_);
        }
    }
    void onSurfaceCreated() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() onSurfaceCreated];
        }
    }
    void setViewport(int32_t c_w, int32_t c_h) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setViewport:(::djinni::I32::fromCpp(c_w))
                                                                h:(::djinni::I32::fromCpp(c_h))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto RenderingContext::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[GPHCRenderingContextCppProxy class]]) {
        return ((GPHCRenderingContextCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto RenderingContext::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<GPHCRenderingContextCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
