// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

#pragma once

#include "RenderingContextInterface.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeRenderingContextInterface final : ::djinni::JniInterface<::RenderingContextInterface, NativeRenderingContextInterface> {
public:
    using CppType = std::shared_ptr<::RenderingContextInterface>;
    using CppOptType = std::shared_ptr<::RenderingContextInterface>;
    using JniType = jobject;

    using Boxed = NativeRenderingContextInterface;

    ~NativeRenderingContextInterface();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeRenderingContextInterface>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeRenderingContextInterface>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeRenderingContextInterface();
    friend ::djinni::JniClass<NativeRenderingContextInterface>;
    friend ::djinni::JniInterface<::RenderingContextInterface, NativeRenderingContextInterface>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::RenderingContextInterface
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void onSurfaceCreated() override;
        void setViewportSize(const ::Vec2I & size) override;
        ::Vec2I getViewportSize() override;
        void setBackgroundColor(const ::Color & color) override;
        void setupDrawFrame(const /*nullable*/ std::shared_ptr<::RenderTargetTexture> & target) override;
        void endDrawFrame(const /*nullable*/ std::shared_ptr<::RenderTargetTexture> & target) override;
        void preRenderStencilMask(const /*nullable*/ std::shared_ptr<::RenderTargetTexture> & target) override;
        void postRenderStencilMask(const /*nullable*/ std::shared_ptr<::RenderTargetTexture> & target) override;
        void applyScissorRect(const std::optional<::RectI> & scissorRect) override;

    private:
        friend ::djinni::JniInterface<::RenderingContextInterface, ::djinni_generated::NativeRenderingContextInterface>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/openmobilemaps/mapscore/shared/graphics/RenderingContextInterface") };
    const jmethodID method_onSurfaceCreated { ::djinni::jniGetMethodID(clazz.get(), "onSurfaceCreated", "()V") };
    const jmethodID method_setViewportSize { ::djinni::jniGetMethodID(clazz.get(), "setViewportSize", "(Lio/openmobilemaps/mapscore/shared/graphics/common/Vec2I;)V") };
    const jmethodID method_getViewportSize { ::djinni::jniGetMethodID(clazz.get(), "getViewportSize", "()Lio/openmobilemaps/mapscore/shared/graphics/common/Vec2I;") };
    const jmethodID method_setBackgroundColor { ::djinni::jniGetMethodID(clazz.get(), "setBackgroundColor", "(Lio/openmobilemaps/mapscore/shared/graphics/common/Color;)V") };
    const jmethodID method_setupDrawFrame { ::djinni::jniGetMethodID(clazz.get(), "setupDrawFrame", "(Lio/openmobilemaps/mapscore/shared/graphics/RenderTargetTexture;)V") };
    const jmethodID method_endDrawFrame { ::djinni::jniGetMethodID(clazz.get(), "endDrawFrame", "(Lio/openmobilemaps/mapscore/shared/graphics/RenderTargetTexture;)V") };
    const jmethodID method_preRenderStencilMask { ::djinni::jniGetMethodID(clazz.get(), "preRenderStencilMask", "(Lio/openmobilemaps/mapscore/shared/graphics/RenderTargetTexture;)V") };
    const jmethodID method_postRenderStencilMask { ::djinni::jniGetMethodID(clazz.get(), "postRenderStencilMask", "(Lio/openmobilemaps/mapscore/shared/graphics/RenderTargetTexture;)V") };
    const jmethodID method_applyScissorRect { ::djinni::jniGetMethodID(clazz.get(), "applyScissorRect", "(Lio/openmobilemaps/mapscore/shared/graphics/common/RectI;)V") };
};

} // namespace djinni_generated
