scheduler_interface = interface +c +j +o {
    addTask(task: task_interface);
    addTasks(tasks: list<task_interface>);
    removeTask(id: string);
    clear();
    pause();
    resume();
    has_separate_graphics_invocation(): bool;
    # Execute added graphics tasks. Returns true, if there are unprocessed tasks in the queue after the execution.
    run_graphics_tasks(): bool;
}

task_interface = interface +c +j +o {
    get_config() : task_config;
    run();
}

task_config = record {
    id: string;
    delay: i64;
    priority: task_priority;
    execution_environment: execution_environment;
}

task_priority = enum {
    high;
    normal;
    low;
}

execution_environment = enum {
    io;
    computation;
    graphics;
}

thread_pool_callbacks = interface +c +j +o {
    get_current_thread_name(): string;
    
    set_current_thread_name(name: string);
    
    set_thread_priority(priority: task_priority);
    
    attach_thread();
    
    detachThread();
}

thread_pool_scheduler = interface +c {
    static create(callbacks: thread_pool_callbacks): scheduler_interface;
}