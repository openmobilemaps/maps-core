// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from tiled_raster_layer.djinni

package io.openmobilemaps.mapscore.shared.map.layers.tiled.raster

import com.snapchat.djinni.NativeObjectManager
import java.util.concurrent.atomic.AtomicBoolean

abstract class Tiled2dMapRasterLayerInterface {

    companion object {
        @JvmStatic
        external fun createWithMask(layerConfig: io.openmobilemaps.mapscore.shared.map.layers.tiled.Tiled2dMapLayerConfig, loaders: ArrayList<io.openmobilemaps.mapscore.shared.map.loader.LoaderInterface>, mask: io.openmobilemaps.mapscore.shared.graphics.objects.MaskingObjectInterface): Tiled2dMapRasterLayerInterface

        @JvmStatic
        external fun createWithShader(layerConfig: io.openmobilemaps.mapscore.shared.map.layers.tiled.Tiled2dMapLayerConfig, loaders: ArrayList<io.openmobilemaps.mapscore.shared.map.loader.LoaderInterface>, shader: io.openmobilemaps.mapscore.shared.graphics.shader.ShaderProgramInterface): Tiled2dMapRasterLayerInterface

        @JvmStatic
        external fun create(layerConfig: io.openmobilemaps.mapscore.shared.map.layers.tiled.Tiled2dMapLayerConfig, loaders: ArrayList<io.openmobilemaps.mapscore.shared.map.loader.LoaderInterface>): Tiled2dMapRasterLayerInterface
    }

    abstract fun asLayerInterface(): io.openmobilemaps.mapscore.shared.map.LayerInterface

    abstract fun setCallbackHandler(handler: Tiled2dMapRasterLayerCallbackInterface)

    abstract fun getCallbackHandler(): Tiled2dMapRasterLayerCallbackInterface?

    abstract fun removeCallbackHandler()

    abstract fun setAlpha(alpha: Float)

    abstract fun getAlpha(): Float

    abstract fun setStyle(style: io.openmobilemaps.mapscore.shared.graphics.shader.RasterShaderStyle)

    abstract fun getStyle(): io.openmobilemaps.mapscore.shared.graphics.shader.RasterShaderStyle

    abstract fun setMinZoomLevelIdentifier(value: Int?)

    abstract fun getMinZoomLevelIdentifier(): Int?

    abstract fun setMaxZoomLevelIdentifier(value: Int?)

    abstract fun getMaxZoomLevelIdentifier(): Int?

    abstract fun setT(t: Int)

    abstract fun setReadyStateListener(listener: io.openmobilemaps.mapscore.shared.map.layers.tiled.Tiled2dMapReadyStateListener?)

    abstract fun getConfig(): io.openmobilemaps.mapscore.shared.map.layers.tiled.Tiled2dMapLayerConfig

    abstract fun set3dSubdivisionFactor(factor: Int)

    private class CppProxy : Tiled2dMapRasterLayerInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun asLayerInterface(): io.openmobilemaps.mapscore.shared.map.LayerInterface {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_asLayerInterface(this.nativeRef)
        }
        private external fun native_asLayerInterface(_nativeRef: Long): io.openmobilemaps.mapscore.shared.map.LayerInterface

        override fun setCallbackHandler(handler: Tiled2dMapRasterLayerCallbackInterface) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setCallbackHandler(this.nativeRef, handler)
        }
        private external fun native_setCallbackHandler(_nativeRef: Long, handler: Tiled2dMapRasterLayerCallbackInterface)

        override fun getCallbackHandler(): Tiled2dMapRasterLayerCallbackInterface? {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getCallbackHandler(this.nativeRef)
        }
        private external fun native_getCallbackHandler(_nativeRef: Long): Tiled2dMapRasterLayerCallbackInterface?

        override fun removeCallbackHandler() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_removeCallbackHandler(this.nativeRef)
        }
        private external fun native_removeCallbackHandler(_nativeRef: Long)

        override fun setAlpha(alpha: Float) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setAlpha(this.nativeRef, alpha)
        }
        private external fun native_setAlpha(_nativeRef: Long, alpha: Float)

        override fun getAlpha(): Float {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getAlpha(this.nativeRef)
        }
        private external fun native_getAlpha(_nativeRef: Long): Float

        override fun setStyle(style: io.openmobilemaps.mapscore.shared.graphics.shader.RasterShaderStyle) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setStyle(this.nativeRef, style)
        }
        private external fun native_setStyle(_nativeRef: Long, style: io.openmobilemaps.mapscore.shared.graphics.shader.RasterShaderStyle)

        override fun getStyle(): io.openmobilemaps.mapscore.shared.graphics.shader.RasterShaderStyle {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getStyle(this.nativeRef)
        }
        private external fun native_getStyle(_nativeRef: Long): io.openmobilemaps.mapscore.shared.graphics.shader.RasterShaderStyle

        override fun setMinZoomLevelIdentifier(value: Int?) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setMinZoomLevelIdentifier(this.nativeRef, value)
        }
        private external fun native_setMinZoomLevelIdentifier(_nativeRef: Long, value: Int?)

        override fun getMinZoomLevelIdentifier(): Int? {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getMinZoomLevelIdentifier(this.nativeRef)
        }
        private external fun native_getMinZoomLevelIdentifier(_nativeRef: Long): Int?

        override fun setMaxZoomLevelIdentifier(value: Int?) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setMaxZoomLevelIdentifier(this.nativeRef, value)
        }
        private external fun native_setMaxZoomLevelIdentifier(_nativeRef: Long, value: Int?)

        override fun getMaxZoomLevelIdentifier(): Int? {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getMaxZoomLevelIdentifier(this.nativeRef)
        }
        private external fun native_getMaxZoomLevelIdentifier(_nativeRef: Long): Int?

        override fun setT(t: Int) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setT(this.nativeRef, t)
        }
        private external fun native_setT(_nativeRef: Long, t: Int)

        override fun setReadyStateListener(listener: io.openmobilemaps.mapscore.shared.map.layers.tiled.Tiled2dMapReadyStateListener?) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setReadyStateListener(this.nativeRef, listener)
        }
        private external fun native_setReadyStateListener(_nativeRef: Long, listener: io.openmobilemaps.mapscore.shared.map.layers.tiled.Tiled2dMapReadyStateListener?)

        override fun getConfig(): io.openmobilemaps.mapscore.shared.map.layers.tiled.Tiled2dMapLayerConfig {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getConfig(this.nativeRef)
        }
        private external fun native_getConfig(_nativeRef: Long): io.openmobilemaps.mapscore.shared.map.layers.tiled.Tiled2dMapLayerConfig

        override fun set3dSubdivisionFactor(factor: Int) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_set3dSubdivisionFactor(this.nativeRef, factor)
        }
        private external fun native_set3dSubdivisionFactor(_nativeRef: Long, factor: Int)
    }
}
