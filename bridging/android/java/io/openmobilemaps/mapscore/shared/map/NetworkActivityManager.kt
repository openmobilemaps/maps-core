// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from network_activity_manager.djinni

package io.openmobilemaps.mapscore.shared.map

import java.util.concurrent.atomic.AtomicBoolean

abstract class NetworkActivityManager {

    abstract fun addTiledLayerError(error: TiledLayerError)

    abstract fun removeError(url: String)

    abstract fun removeAllErrorsForLayer(layerName: String)

    abstract fun clearAllErrors()

    abstract fun addNetworkActivityListener(listener: NetworkActivityListener)

    abstract fun removeNetworkActivityListener(listener: NetworkActivityListener)

    abstract fun updateRemainingTasks(layerName: String, taskCount: Int)

    companion object {
        @JvmStatic
        fun create(): NetworkActivityManager {
            return CppProxy.create()
        }
    }

    private class CppProxy : NetworkActivityManager {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
        }

        private external fun nativeDestroy(nativeRef: Long)
        fun _djinni_private_destroy() {
            val destroyed = this.destroyed.getAndSet(true)
            if (!destroyed) nativeDestroy(this.nativeRef)
        }
        protected fun finalize() {
            _djinni_private_destroy()
        }

        override fun addTiledLayerError(error: TiledLayerError) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_addTiledLayerError(this.nativeRef, error)
        }
        private external fun native_addTiledLayerError(_nativeRef: Long, error: TiledLayerError)

        override fun removeError(url: String) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_removeError(this.nativeRef, url)
        }
        private external fun native_removeError(_nativeRef: Long, url: String)

        override fun removeAllErrorsForLayer(layerName: String) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_removeAllErrorsForLayer(this.nativeRef, layerName)
        }
        private external fun native_removeAllErrorsForLayer(_nativeRef: Long, layerName: String)

        override fun clearAllErrors() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_clearAllErrors(this.nativeRef)
        }
        private external fun native_clearAllErrors(_nativeRef: Long)

        override fun addNetworkActivityListener(listener: NetworkActivityListener) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_addNetworkActivityListener(this.nativeRef, listener)
        }
        private external fun native_addNetworkActivityListener(_nativeRef: Long, listener: NetworkActivityListener)

        override fun removeNetworkActivityListener(listener: NetworkActivityListener) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_removeNetworkActivityListener(this.nativeRef, listener)
        }
        private external fun native_removeNetworkActivityListener(_nativeRef: Long, listener: NetworkActivityListener)

        override fun updateRemainingTasks(layerName: String, taskCount: Int) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_updateRemainingTasks(this.nativeRef, layerName, taskCount)
        }
        private external fun native_updateRemainingTasks(_nativeRef: Long, layerName: String, taskCount: Int)

        companion object {
            @JvmStatic
            external fun create(): NetworkActivityManager
        }
    }
}
