// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from shader.djinni

#include "NativeSphereEffectShaderInterface.h"  // my header
#include "Marshal.hpp"
#include "NativeShaderProgramInterface.h"

namespace djinni_generated {

NativeSphereEffectShaderInterface::NativeSphereEffectShaderInterface() : ::djinni::JniInterface<::SphereEffectShaderInterface, NativeSphereEffectShaderInterface>("io/openmobilemaps/mapscore/shared/graphics/shader/SphereEffectShaderInterface$CppProxy") {}

NativeSphereEffectShaderInterface::~NativeSphereEffectShaderInterface() = default;


CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_shader_SphereEffectShaderInterface_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        delete reinterpret_cast<::djinni::CppProxyHandle<::SphereEffectShaderInterface>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_shader_SphereEffectShaderInterface_00024CppProxy_native_1asShaderProgramInterface(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::SphereEffectShaderInterface>(nativeRef);
        auto r = ref->asShaderProgramInterface();
        return ::djinni::release(::djinni_generated::NativeShaderProgramInterface::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_shader_SphereEffectShaderInterface_00024CppProxy_native_1setEllipse(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_a, jfloat j_b, jfloat j_c, jfloat j_d, jfloat j_e, jfloat j_f)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::SphereEffectShaderInterface>(nativeRef);
        ref->setEllipse(::djinni::F32::toCpp(jniEnv, j_a),
                        ::djinni::F32::toCpp(jniEnv, j_b),
                        ::djinni::F32::toCpp(jniEnv, j_c),
                        ::djinni::F32::toCpp(jniEnv, j_d),
                        ::djinni::F32::toCpp(jniEnv, j_e),
                        ::djinni::F32::toCpp(jniEnv, j_f));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

} // namespace djinni_generated
