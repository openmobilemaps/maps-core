// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from core.djinni

package ch.ubique.mapscore.shared.graphics;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class SceneInterface {
    public abstract void setRenderingContext(RenderingContextInterface renderingContext);

    public abstract RenderingContextInterface getRenderingContext();

    public abstract void setCamera(CameraInterface camera);

    public abstract CameraInterface getCamera();

    public abstract RendererInterface getRenderer();

    public abstract void drawFrame();

    public abstract void clear();

    public static SceneInterface create(ch.ubique.mapscore.shared.graphics.objects.GraphicsObjectFactoryInterface graphicsFactory, ch.ubique.mapscore.shared.graphics.shader.ShaderFactoryInterface shaderFactory)
    {
        return CppProxy.create(graphicsFactory,
                               shaderFactory);
    }

    public static SceneInterface createWithOpenGl()
    {
        return CppProxy.createWithOpenGl();
    }

    private static final class CppProxy extends SceneInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void setRenderingContext(RenderingContextInterface renderingContext)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setRenderingContext(this.nativeRef, renderingContext);
        }
        private native void native_setRenderingContext(long _nativeRef, RenderingContextInterface renderingContext);

        @Override
        public RenderingContextInterface getRenderingContext()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getRenderingContext(this.nativeRef);
        }
        private native RenderingContextInterface native_getRenderingContext(long _nativeRef);

        @Override
        public void setCamera(CameraInterface camera)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setCamera(this.nativeRef, camera);
        }
        private native void native_setCamera(long _nativeRef, CameraInterface camera);

        @Override
        public CameraInterface getCamera()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCamera(this.nativeRef);
        }
        private native CameraInterface native_getCamera(long _nativeRef);

        @Override
        public RendererInterface getRenderer()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getRenderer(this.nativeRef);
        }
        private native RendererInterface native_getRenderer(long _nativeRef);

        @Override
        public void drawFrame()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_drawFrame(this.nativeRef);
        }
        private native void native_drawFrame(long _nativeRef);

        @Override
        public void clear()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_clear(this.nativeRef);
        }
        private native void native_clear(long _nativeRef);

        public static native SceneInterface create(ch.ubique.mapscore.shared.graphics.objects.GraphicsObjectFactoryInterface graphicsFactory, ch.ubique.mapscore.shared.graphics.shader.ShaderFactoryInterface shaderFactory);

        public static native SceneInterface createWithOpenGl();
    }
}
