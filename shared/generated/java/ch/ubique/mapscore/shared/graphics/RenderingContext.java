// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from renderer.djinni

package ch.ubique.mapscore.shared.graphics;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class RenderingContext {
    public abstract RenderingContext getSelf();

    /** Ensure calling on graphics thread */
    public abstract void onSurfaceCreated();

    /** Ensure calling on graphics thread */
    public abstract void setViewport(int w, int h);

    private static final class CppProxy extends RenderingContext
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public RenderingContext getSelf()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getSelf(this.nativeRef);
        }
        private native RenderingContext native_getSelf(long _nativeRef);

        @Override
        public void onSurfaceCreated()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onSurfaceCreated(this.nativeRef);
        }
        private native void native_onSurfaceCreated(long _nativeRef);

        @Override
        public void setViewport(int w, int h)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setViewport(this.nativeRef, w, h);
        }
        private native void native_setViewport(long _nativeRef, int w, int h);
    }
}
