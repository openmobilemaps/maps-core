// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

#import "MCOpenGlRenderingContextInterface+Private.h"
#import "MCOpenGlRenderingContextInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCColor+Private.h"
#import "MCOpenGlRenderTargetInterface+Private.h"
#import "MCTextureFilterType+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCOpenGlRenderingContextInterfaceCppProxy : NSObject<MCOpenGlRenderingContextInterface>

- (id)initWithCpp:(const std::shared_ptr<::OpenGlRenderingContextInterface>&)cppRef;

@end

@implementation MCOpenGlRenderingContextInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::OpenGlRenderingContextInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::OpenGlRenderingContextInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)resume {
    try {
        _cppRefHandle.get()->resume();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)pause {
    try {
        _cppRefHandle.get()->pause();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCOpenGlRenderTargetInterface>)getCreateRenderTarget:(nonnull NSString *)name
                                                      textureFilter:(MCTextureFilterType)textureFilter
                                                         clearColor:(nonnull MCColor *)clearColor
                                                   usesDepthStencil:(BOOL)usesDepthStencil {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getCreateRenderTarget(::djinni::String::toCpp(name),
                                                                         ::djinni::Enum<::TextureFilterType, MCTextureFilterType>::toCpp(textureFilter),
                                                                         ::djinni_generated::Color::toCpp(clearColor),
                                                                         ::djinni::Bool::toCpp(usesDepthStencil));
        return ::djinni_generated::OpenGlRenderTargetInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)deleteRenderTarget:(nonnull NSString *)name {
    try {
        _cppRefHandle.get()->deleteRenderTarget(::djinni::String::toCpp(name));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<id<MCOpenGlRenderTargetInterface>> *)getRenderTargets {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getRenderTargets();
        return ::djinni::List<::djinni_generated::OpenGlRenderTargetInterface>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getProgram:(nonnull NSString *)name {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getProgram(::djinni::String::toCpp(name));
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)storeProgram:(nonnull NSString *)name
             program:(int32_t)program {
    try {
        _cppRefHandle.get()->storeProgram(::djinni::String::toCpp(name),
                                          ::djinni::I32::toCpp(program));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getAspectRatio {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAspectRatio();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int64_t)getDeltaTimeMs {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getDeltaTimeMs();
        return ::djinni::I64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class OpenGlRenderingContextInterface::ObjcProxy final
: public ::OpenGlRenderingContextInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::OpenGlRenderingContextInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void resume() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() resume];
        }
    }
    void pause() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() pause];
        }
    }
    /*not-null*/ std::shared_ptr<::OpenGlRenderTargetInterface> getCreateRenderTarget(const std::string & c_name, ::TextureFilterType c_textureFilter, const ::Color & c_clearColor, bool c_usesDepthStencil) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getCreateRenderTarget:(::djinni::String::fromCpp(c_name))
                                                                                    textureFilter:(::djinni::Enum<::TextureFilterType, MCTextureFilterType>::fromCpp(c_textureFilter))
                                                                                       clearColor:(::djinni_generated::Color::fromCpp(c_clearColor))
                                                                                 usesDepthStencil:(::djinni::Bool::fromCpp(c_usesDepthStencil))];
            return ::djinni_generated::OpenGlRenderTargetInterface::toCpp(objcpp_result_);
        }
    }
    void deleteRenderTarget(const std::string & c_name) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() deleteRenderTarget:(::djinni::String::fromCpp(c_name))];
        }
    }
    std::vector</*not-null*/ std::shared_ptr<::OpenGlRenderTargetInterface>> getRenderTargets() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getRenderTargets];
            return ::djinni::List<::djinni_generated::OpenGlRenderTargetInterface>::toCpp(objcpp_result_);
        }
    }
    int32_t getProgram(const std::string & c_name) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getProgram:(::djinni::String::fromCpp(c_name))];
            return ::djinni::I32::toCpp(objcpp_result_);
        }
    }
    void storeProgram(const std::string & c_name, int32_t c_program) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() storeProgram:(::djinni::String::fromCpp(c_name))
                                                           program:(::djinni::I32::fromCpp(c_program))];
        }
    }
    float getAspectRatio() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getAspectRatio];
            return ::djinni::F32::toCpp(objcpp_result_);
        }
    }
    int64_t getDeltaTimeMs() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getDeltaTimeMs];
            return ::djinni::I64::toCpp(objcpp_result_);
        }
    }
};

} // namespace djinni_generated

namespace djinni_generated {

auto OpenGlRenderingContextInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCOpenGlRenderingContextInterfaceCppProxy class]]) {
        return ((MCOpenGlRenderingContextInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto OpenGlRenderingContextInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCOpenGlRenderingContextInterfaceCppProxy>(cpp);
}

} // namespace djinni_generated

@end
