// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from camera.djinni

#include "NativeMapCameraListenerInterface.h"  // my header
#include "Marshal.hpp"
#include "NativeCoord.h"
#include "NativeRectCoord.h"

namespace djinni_generated {

NativeMapCameraListenerInterface::NativeMapCameraListenerInterface() : ::djinni::JniInterface<::MapCameraListenerInterface, NativeMapCameraListenerInterface>("io/openmobilemaps/mapscore/shared/map/camera/MapCameraListenerInterface$CppProxy") {}

NativeMapCameraListenerInterface::~NativeMapCameraListenerInterface() = default;

NativeMapCameraListenerInterface::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeMapCameraListenerInterface::JavaProxy::~JavaProxy() = default;

void NativeMapCameraListenerInterface::JavaProxy::onVisibleBoundsChanged(const ::RectCoord & c_visibleBounds, double c_zoom) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeMapCameraListenerInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onVisibleBoundsChanged,
                           ::djinni::get(::djinni_generated::NativeRectCoord::fromCpp(jniEnv, c_visibleBounds)),
                           ::djinni::get(::djinni::F64::fromCpp(jniEnv, c_zoom)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeMapCameraListenerInterface::JavaProxy::onRotationChanged(float c_angle) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeMapCameraListenerInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onRotationChanged,
                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c_angle)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeMapCameraListenerInterface::JavaProxy::onMapInteraction() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeMapCameraListenerInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onMapInteraction);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeMapCameraListenerInterface::JavaProxy::onCameraChange(const std::vector<float> & c_viewMatrix, const std::vector<float> & c_projectionMatrix, float c_verticalFov, float c_horizontalFov, float c_width, float c_height, float c_focusPointAltitude, const ::Coord & c_focusPointPosition) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeMapCameraListenerInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onCameraChange,
                           ::djinni::get(::djinni::List<::djinni::F32>::fromCpp(jniEnv, c_viewMatrix)),
                           ::djinni::get(::djinni::List<::djinni::F32>::fromCpp(jniEnv, c_projectionMatrix)),
                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c_verticalFov)),
                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c_horizontalFov)),
                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c_width)),
                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c_height)),
                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c_focusPointAltitude)),
                           ::djinni::get(::djinni_generated::NativeCoord::fromCpp(jniEnv, c_focusPointPosition)));
    ::djinni::jniExceptionCheck(jniEnv);
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_camera_MapCameraListenerInterface_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        delete reinterpret_cast<::djinni::CppProxyHandle<::MapCameraListenerInterface>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_camera_MapCameraListenerInterface_00024CppProxy_native_1onVisibleBoundsChanged(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::NativeRectCoord::JniType j_visibleBounds, jdouble j_zoom)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::MapCameraListenerInterface>(nativeRef);
        ref->onVisibleBoundsChanged(::djinni_generated::NativeRectCoord::toCpp(jniEnv, j_visibleBounds),
                                    ::djinni::F64::toCpp(jniEnv, j_zoom));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_camera_MapCameraListenerInterface_00024CppProxy_native_1onRotationChanged(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jfloat j_angle)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::MapCameraListenerInterface>(nativeRef);
        ref->onRotationChanged(::djinni::F32::toCpp(jniEnv, j_angle));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_camera_MapCameraListenerInterface_00024CppProxy_native_1onMapInteraction(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::MapCameraListenerInterface>(nativeRef);
        ref->onMapInteraction();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_camera_MapCameraListenerInterface_00024CppProxy_native_1onCameraChange(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_viewMatrix, jobject j_projectionMatrix, jfloat j_verticalFov, jfloat j_horizontalFov, jfloat j_width, jfloat j_height, jfloat j_focusPointAltitude, ::djinni_generated::NativeCoord::JniType j_focusPointPosition)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::MapCameraListenerInterface>(nativeRef);
        ref->onCameraChange(::djinni::List<::djinni::F32>::toCpp(jniEnv, j_viewMatrix),
                            ::djinni::List<::djinni::F32>::toCpp(jniEnv, j_projectionMatrix),
                            ::djinni::F32::toCpp(jniEnv, j_verticalFov),
                            ::djinni::F32::toCpp(jniEnv, j_horizontalFov),
                            ::djinni::F32::toCpp(jniEnv, j_width),
                            ::djinni::F32::toCpp(jniEnv, j_height),
                            ::djinni::F32::toCpp(jniEnv, j_focusPointAltitude),
                            ::djinni_generated::NativeCoord::toCpp(jniEnv, j_focusPointPosition));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

} // namespace djinni_generated
