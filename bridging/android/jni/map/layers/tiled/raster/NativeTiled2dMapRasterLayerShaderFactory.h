// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from tiled_raster_layer.djinni

#pragma once

#include "Tiled2dMapRasterLayerShaderFactory.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeTiled2dMapRasterLayerShaderFactory final : ::djinni::JniInterface<::Tiled2dMapRasterLayerShaderFactory, NativeTiled2dMapRasterLayerShaderFactory> {
public:
    using CppType = std::shared_ptr<::Tiled2dMapRasterLayerShaderFactory>;
    using CppOptType = std::shared_ptr<::Tiled2dMapRasterLayerShaderFactory>;
    using JniType = jobject;

    using Boxed = NativeTiled2dMapRasterLayerShaderFactory;

    ~NativeTiled2dMapRasterLayerShaderFactory();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeTiled2dMapRasterLayerShaderFactory>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeTiled2dMapRasterLayerShaderFactory>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeTiled2dMapRasterLayerShaderFactory();
    friend ::djinni::JniClass<NativeTiled2dMapRasterLayerShaderFactory>;
    friend ::djinni::JniInterface<::Tiled2dMapRasterLayerShaderFactory, NativeTiled2dMapRasterLayerShaderFactory>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::Tiled2dMapRasterLayerShaderFactory
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        std::shared_ptr<::AlphaShaderInterface> combineShader() override;
        std::shared_ptr<::AlphaShaderInterface> finalShader() override;

    private:
        friend ::djinni::JniInterface<::Tiled2dMapRasterLayerShaderFactory, ::djinni_generated::NativeTiled2dMapRasterLayerShaderFactory>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/openmobilemaps/mapscore/shared/map/layers/tiled/raster/Tiled2dMapRasterLayerShaderFactory") };
    const jmethodID method_combineShader { ::djinni::jniGetMethodID(clazz.get(), "combineShader", "()Lio/openmobilemaps/mapscore/shared/graphics/shader/AlphaShaderInterface;") };
    const jmethodID method_finalShader { ::djinni::jniGetMethodID(clazz.get(), "finalShader", "()Lio/openmobilemaps/mapscore/shared/graphics/shader/AlphaShaderInterface;") };
};

}  // namespace djinni_generated
