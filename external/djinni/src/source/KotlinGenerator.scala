package djinni

import djinni.ast.Record.DerivingType
import djinni.ast._
import djinni.generatorTools._
import djinni.meta._
import djinni.writer.IndentWriter

import scala.collection.mutable

class KotlinGenerator(spec: Spec) extends Generator(spec) {

  val javaAnnotationHeader = spec.javaAnnotation.map(pkg => '@' + pkg.split("\\.").last)
  val marshal = new KotlinMarshal(spec)

  class JavaRefs() {
    var java = mutable.TreeSet[String]()

    spec.javaAnnotation.foreach(pkg => java.add(pkg))
    spec.javaNullableAnnotation.foreach(pkg => java.add(pkg))
    spec.javaNonnullAnnotation.foreach(pkg => java.add(pkg))

    def find(ty: TypeRef) { find(ty.resolved) }
    def find(tm: MExpr) {
      tm.args.foreach(find)
      find(tm.base)
    }
    def find(m: Meta) = for(r <- marshal.references(m)) r match {
      case ImportRef(arg) => java.add(arg)
      case _ =>
    }
  }

  def writeKotlinFile(ident: String, origin: String, refs: Iterable[String], f: IndentWriter => Unit) {
    createFile(spec.kotlinOutFolder.get, idJava.ty(ident) + ".kt", (w: IndentWriter) => {
      w.wl("// AUTOGENERATED FILE - DO NOT MODIFY!")
      w.wl("// This file generated by Djinni from " + origin)
      w.wl
      spec.javaPackage.foreach(s => w.wl(s"package $s").wl)
      if (refs.nonEmpty) {
        refs.foreach(s => w.wl(s"import $s"))
        w.wl
      }
      f(w)
    })
  }

  def generateJavaConstants(w: IndentWriter, consts: Seq[Const], forJavaInterface: Boolean) = {

    def writeJavaConst(w: IndentWriter, ty: TypeRef, v: Any): Unit = v match {
      case l: Long if marshal.fieldType(ty).equalsIgnoreCase("long") => w.w(l.toString + "L")
      case l: Long => w.w(l.toString)
      case d: Double if marshal.fieldType(ty).equalsIgnoreCase("float") => w.w(d.toString + "f")
      case d: Double => w.w(d.toString)
      case b: Boolean => w.w(if (b) "true" else "false")
      case s: String => w.w(s)
      case e: EnumValue =>  w.w(s"${marshal.typename(ty)}.${idJava.enum(e)}")
      case v: ConstRef => w.w(idJava.const(v))
      case z: Map[_, _] => { // Value is record
        val recordMdef = ty.resolved.base.asInstanceOf[MDef]
        val record = recordMdef.body.asInstanceOf[Record]
        val vMap = z.asInstanceOf[Map[String, Any]]
        w.wl(s"${marshal.typename(ty)}(")
        w.increase()
        // Use exact sequence
        val skipFirst = SkipFirst()
        for (f <- record.fields) {
          skipFirst {w.wl(",")}
          writeJavaConst(w, f.ty, vMap.apply(f.ident.name))
          w.w(" /* " + idJava.field(f.ident) + " */ ")
        }
        w.w(")")
        w.decrease()
      }
    }
    for (c <- consts) {
      writeDoc(w, c.doc)
      javaAnnotationHeader.foreach(w.wl)

      w.w(s"val ${idJava.const(c.ident)}: ${marshal.fieldType(c.ty)} = ")
      writeJavaConst(w, c.ty, c.value)
      w.wl
    }
  }

  override def generateEnum(origin: String, ident: Ident, doc: Doc, e: Enum) {
    val refs = new JavaRefs()

    writeKotlinFile(ident, origin, refs.java, w => {
      writeDoc(w, doc)
      javaAnnotationHeader.foreach(w.wl)
      w.w(s"enum class ${marshal.typename(ident, e)}").braced {
        for (o <- normalEnumOptions(e)) {
          writeDoc(w, o.doc)
          w.wl(idJava.enum(o.ident) + ",")
        }
      }
    })
  }

  override def generateInterface(origin: String, ident: Ident, doc: Doc, typeParams: Seq[TypeParam], i: Interface) {
    val refs = new JavaRefs()

    i.methods.map(m => {
      m.params.map(p => refs.find(p.ty))
      m.ret.foreach(refs.find)
    })
    i.consts.map(c => {
      refs.find(c.ty)
    })
    if (i.ext.cpp) {
      refs.java.add("java.util.concurrent.atomic.AtomicBoolean")
    }

    writeKotlinFile(ident, origin, refs.java, w => {
      val javaClass = marshal.typename(ident, i)
      val typeParamList = javaTypeParams(typeParams)
      writeDoc(w, doc)

      javaAnnotationHeader.foreach(w.wl)

      // Generate an interface or an abstract class depending on whether the use
      // of Java interfaces was requested.
      val classPrefix = if (spec.javaGenerateInterfaces) "interface" else "abstract class"
      val methodPrefix = if (spec.javaGenerateInterfaces) "" else "abstract "
      val innerClassAccessibility = if (spec.javaGenerateInterfaces) "" else "private "
      w.w(s"$classPrefix $javaClass$typeParamList").braced {
        for (m <- i.methods if !m.static) {
          w.wl
          writeMethodDoc(w, m, idJava.local)
          val ret = marshal.returnType(m.ret)
          val returnSignature = if (ret == "Unit") "" else s": $ret"
          val params = m.params.map(p => {
            idJava.local(p.ident) + ": " + marshal.paramType(p.ty)
          })
          w.wl(s"${methodPrefix}fun " + idJava.method(m.ident) + params.mkString("(", ", ", ")") + returnSignature)
        }

        // Implement the interface's static methods as calls to CppProxy's corresponding methods.
        if (i.consts.nonEmpty || i.methods.exists(_.static)) {
          w.wl
          w.w("companion object").braced {
            generateJavaConstants(w, i.consts, spec.javaGenerateInterfaces)

            val skipFirst = SkipFirst()
            for (m <- i.methods if m.static) {
              skipFirst {
                w.wl
              }
              writeMethodDoc(w, m, idJava.local)
              val ret = marshal.returnType(m.ret)
              val returnSignature = if (ret == "Unit") "" else s": $ret"
              val returnPrefix = if (ret == "Unit") "" else "return "
              val params = m.params.map(p => {
                idJava.local(p.ident) + ": " + marshal.paramType(p.ty)
              })
              val args = m.params.map(p => idJava.local(p.ident)).mkString(", ")
              val meth = idJava.method(m.ident)
              w.wl("@JvmStatic")
              w.w("fun " + idJava.method(m.ident) + params.mkString("(", ", ", ")") + returnSignature).braced {
                w.wl(s"${returnPrefix}CppProxy.${meth}($args)")
              }
            }
          }
        }

        if (i.ext.cpp) {
          w.wl
          javaAnnotationHeader.foreach(w.wl)
          w.w(s"${innerClassAccessibility}class CppProxy$typeParamList : $javaClass$typeParamList").braced {
            w.wl("private val nativeRef: Long")
            w.wl("private val destroyed: AtomicBoolean = AtomicBoolean(false)")
            w.wl
            w.w(s"private constructor(nativeRef: Long)").braced {
              w.wl("if (nativeRef == 0L) error(\"nativeRef is zero\")")
              w.wl(s"this.nativeRef = nativeRef")
            }
            w.wl
            w.wl("private external fun nativeDestroy(nativeRef: Long)")
            w.w("fun _djinni_private_destroy()").braced {
              w.wl("val destroyed = this.destroyed.getAndSet(true)")
              w.wl("if (!destroyed) nativeDestroy(this.nativeRef)")
            }
            w.w("protected fun finalize()").braced {
              w.wl("_djinni_private_destroy()")
            }

            // Implement the interface's non-static methods.
            for (m <- i.methods if !m.static) {
              w.wl
              val ret = marshal.returnType(m.ret)
              val returnSignature = if (ret == "Unit") "" else s": $ret"
              val returnStmt = m.ret.fold("")(_ => "return ")
              val params = m.params.map(p => idJava.local(p.ident) + ": " + marshal.paramType(p.ty)).mkString(", ")
              val args = m.params.map(p => idJava.local(p.ident)).mkString(", ")
              val meth = idJava.method(m.ident)
              w.w(s"override fun $meth($params)$returnSignature").braced {
                w.wl("assert(!this.destroyed.get()) { error(\"trying to use a destroyed object\") }")
                w.wl(s"${returnStmt}native_$meth(this.nativeRef${preComma(args)})")
              }
              w.wl(s"private external fun native_$meth(_nativeRef: Long${preComma(params)})$returnSignature")
            }

            // Declare a native method for each of the interface's static methods.
            if (i.methods.exists(_.static)) {
              w.wl
              w.w("companion object").braced {
                val skipFirst = SkipFirst()
                for (m <- i.methods if m.static) {
                  skipFirst {
                    w.wl
                  }
                  val ret = marshal.returnType(m.ret)
                  val params = m.params.map(p => {
                    idJava.local(p.ident) + ": " + marshal.paramType(p.ty)
                  })
                  w.wl("@JvmStatic")
                  w.wl("external fun " + idJava.method(m.ident) + params.mkString("(", ", ", ")") + ": " + ret)
                }
              }
            }
          }
        }
      }
    })
  }

  override def generateRecord(origin: String, ident: Ident, doc: Doc, params: Seq[TypeParam], r: Record) {
    val refs = new JavaRefs()
    r.fields.foreach(f => refs.find(f.ty))

    val javaName = if (r.ext.java) (ident.name + "_base") else ident.name

    writeKotlinFile(javaName, origin, refs.java, w => {
      writeDoc(w, doc)
      javaAnnotationHeader.foreach(w.wl)
      val self = marshal.typename(javaName, r)

      val interfaces = scala.collection.mutable.ArrayBuffer[String]()
      if (r.derivingTypes.contains(DerivingType.Ord))
          interfaces += s"Comparable<$self>"
      val implementsSection = if (interfaces.isEmpty) "" else " : " + interfaces.mkString(", ")
      w.wl(s"data class ${self + javaTypeParams(params)}(")
      w.nested {
        for (f <- r.fields) {
          w.wl(s"var ${idJava.field(f.ident)}: ${marshal.fieldType(f.ty)},")
        }
      }
      w.w(s")$implementsSection")

      if (r.consts.nonEmpty || r.derivingTypes.contains(DerivingType.Ord)) {
        w.braced {
          if (r.consts.nonEmpty) {
            w.wl
            w.w("companion object").braced {
              generateJavaConstants(w, r.consts, false)
            }
          }

          if (r.derivingTypes.contains(DerivingType.Ord)) {
            def primitiveCompare(ident: Ident) {
              w.wl(s"if (this.${idJava.field(ident)} < other.${idJava.field(ident)}) {").nested {
                w.wl(s"tempResult = -1;")
              }
              w.wl(s"} else if (this.${idJava.field(ident)} > other.${idJava.field(ident)}) {").nested {
                w.wl(s"tempResult = 1;")
              }
              w.wl(s"} else {").nested {
                w.wl(s"tempResult = 0;")
              }
              w.wl("}")
            }

            w.wl
            w.w(s"override compareTo($self other): Int").braced {
              w.wl("var tempResult = 0")
              for (f <- r.fields) {
                f.ty.resolved.base match {
                  case MString | MDate => w.wl(s"tempResult = this.${idJava.field(f.ident)}.compareTo(other.${idJava.field(f.ident)})")
                  case t: MPrimitive => primitiveCompare(f.ident)
                  case df: MDef => df.defType match {
                    case DRecord => w.wl(s"tempResult = this.${idJava.field(f.ident)}.compareTo(other.${idJava.field(f.ident)})")
                    case DEnum => w.w(s"tempResult = this.${idJava.field(f.ident)}.compareTo(other.${idJava.field(f.ident)})")
                    case _ => throw new AssertionError("Unreachable")
                  }
                  case e: MExtern => e.defType match {
                    case DRecord => if (e.java.reference) w.wl(s"tempResult = this.${idJava.field(f.ident)}.compareTo(other.${idJava.field(f.ident)})") else primitiveCompare(f.ident)
                    case DEnum => w.w(s"tempResult = this.${idJava.field(f.ident)}.compareTo(other.${idJava.field(f.ident)})")
                    case _ => throw new AssertionError("Unreachable")
                  }
                  case _ => throw new AssertionError("Unreachable")
                }
                w.w("if (tempResult != 0)").braced {
                  w.wl("return tempResult")
                }
              }
              w.wl("return 0")
            }
          }
        }
      }
    })
  }

  def javaTypeParams(params: Seq[TypeParam]): String =
    if (params.isEmpty) "" else params.map(p => idJava.typeParam(p.ident)).mkString("<", ", ", ">")

}
