@extern "../yaml/vec_2_f.yaml"
@extern "../yaml/vec_2_i.yaml"
@extern "../yaml/rect_i.yaml"
@extern "../yaml/scheduler_interface.yaml"
@extern "../yaml/touch_handler_interface.yaml"
@extern "../yaml/shader_factory_interface.yaml"
@extern "../yaml/graphics_object_factory_interface.yaml"
@extern "../yaml/camera_interface.yaml"
@extern "../yaml/scene_interface.yaml"
@extern "../yaml/rendering_context_interface.yaml"
@extern "../yaml/map_coordinate_system.yaml"
@extern "../yaml/coordinate_conversion_helper_interface.yaml"
@extern "../yaml/coord.yaml"
@extern "../yaml/rect_coord.yaml"
@extern "../yaml/map_camera_2d_listener_interface.yaml"
@extern "../yaml/color.yaml"
@extern "../yaml/render_pass_interface.yaml"
@extern "../yaml/masking_object_interface.yaml"
@extern "../yaml/error_manager.yaml"

map_interface = interface +c {
    static create(graphics_factory: graphics_object_factory_interface, shader_factory: shader_factory_interface, rendering_context: rendering_context_interface, map_config: map_config, scheduler: scheduler_interface, pixel_density: f32) : map_interface;
    static createWithOpenGl(map_config: map_config, scheduler: scheduler_interface, pixel_density: f32) : map_interface;

    set_callback_handler(callback_interface: optional<map_callback_interface>);

    get_graphics_object_factory() : graphics_object_factory_interface;
    get_shader_factory() : shader_factory_interface;

    get_scheduler() : scheduler_interface;
    get_rendering_context() : rendering_context_interface;
    get_map_config() : map_config;
    get_coordinate_converter_helper() : coordinate_conversion_helper_interface;

    set_camera(camera: map_camera_2d_interface);
    get_camera() : map_camera_2d_interface;

    set_touch_handler(touch_handler: touch_handler_interface);
    get_touch_handler() : touch_handler_interface;

    get_layers(): list<layer_interface>;

    add_layer(layer: layer_interface);
    insert_layer_at(layer: layer_interface, at_index: i32);
    insert_layer_above(layer: layer_interface, above: layer_interface);
    insert_layer_below(layer: layer_interface, below: layer_interface);

    remove_layer(layer: layer_interface);

    set_viewport_size(size: vec_2_i);
    set_background_color(color: color);

    invalidate();
    draw_frame();
    resume();
    pause();
    destroy();

    # changes bounds to bounds, checks all layers for readiness, and updates callbacks, timeout in
    # seconds, always draw the frame when state is updated in the ready callbacks
    draw_ready_frame(bounds: rect_coord, timeout: f32, callbacks: map_ready_callback_interface);

    force_reload();
}

map_callback_interface = interface +c +j +o {
    invalidate();
}

map_ready_callback_interface = interface +j +o {
    state_did_update(state: layer_ready_state);
}

layer_ready_state = enum {
    ready;
    not_ready;
    error;
    timeout_error;
}

map_config = record {
    map_coordinate_system: map_coordinate_system;
}

layer_interface = interface +c +j +o {
    set_masking_object(masking_object: optional<masking_object_interface>);
    update();
    build_render_passes(): list<render_pass_interface>;
    onAdded(map_interface: map_interface, layer_index: i32);
    onRemoved();
    pause();
    resume();
    hide();
    show();

    set_alpha(alpha: f32);
    get_alpha(): f32;

    # optional rectangle, remove scissoring when not set
    set_scissor_rect(scissor_rect: optional<rect_i>);

    is_ready_to_render_offscreen() : layer_ready_state;
    enable_animations(enabled: bool);

    set_error_manager(error_manager: error_manager);
    force_reload();
}

map_camera_2d_interface = interface +c {
    static create(map_interface: map_interface, screen_density_ppi: f32): map_camera_2d_interface;

	freeze(freeze: bool);

    move_to_center_position_zoom(center_position: coord, zoom: f64, animated: bool);
    move_to_center_position(center_position: coord, animated: bool);
    move_to_bounding_box(bounding_box: rect_coord, padding_pc: f32, animated: bool, max_zoom: optional<f64>);
    get_center_position(): coord;

    set_zoom(zoom: f64, animated: bool);
    get_zoom(): f64;

    setRotation(angle: f32, animated: bool);
    get_rotation(): f32;

    set_min_zoom(min_zoom: f64);
    set_max_zoom(max_zoom: f64);

    get_min_zoom(): f64;
    get_max_zoom(): f64;

    set_bounds(bounds: rect_coord);
    get_bounds() : rect_coord;
    is_in_bounds(coords: coord) : bool;

    set_padding_left(padding: f32);
    set_padding_right(padding: f32);
    set_padding_top(padding: f32);
    set_padding_bottom(padding: f32);

    get_visible_rect() : rect_coord;
    get_padding_adjusted_visible_rect() : rect_coord;

    get_screen_density_ppi(): f32;

    # this method is called just before the update methods on all layers
    update();

    get_invariant_model_matrix(coordinate: coord, scale_invariant: bool, rotation_invariant: bool) : list<f32>;

    add_listener(listener: map_camera_2d_listener_interface);
    remove_listener(listener: map_camera_2d_listener_interface);

    coord_from_screen_position(pos_screen: vec_2_f): coord;
    map_units_from_pixels(distancePx: f64): f64;

    set_rotation_enabled(enabled: bool);
    set_snap_to_north_enabled(enabled: bool);

    as_camera_interface(): camera_interface;

    get_last_vp_matrix_view_bounds() : optional<rect_coord>;
    get_last_vp_matrix_rotation() : optional<f32>;
    get_last_vp_matrix_zoom() : optional<f32>;
}
