// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from network_activity_manager.djinni

#import "MCNetworkActivityListenerInterface+Private.h"
#import "MCNetworkActivityListenerInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCTasksProgressInfo+Private.h"
#import "MCTiledLayerError+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCNetworkActivityListenerInterfaceCppProxy : NSObject<MCNetworkActivityListenerInterface>

- (id)initWithCpp:(const std::shared_ptr<::NetworkActivityListenerInterface>&)cppRef;

@end

@implementation MCNetworkActivityListenerInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::NetworkActivityListenerInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::NetworkActivityListenerInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)onTiledLayerErrorStateChanged:(nonnull NSArray<MCTiledLayerError *> *)errors {
    try {
        _cppRefHandle.get()->onTiledLayerErrorStateChanged(::djinni::List<::djinni_generated::TiledLayerError>::toCpp(errors));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onTasksProgressChanged:(float)totalProgress
            tasksProgressInfos:(nonnull NSArray<MCTasksProgressInfo *> *)tasksProgressInfos {
    try {
        _cppRefHandle.get()->onTasksProgressChanged(::djinni::F32::toCpp(totalProgress),
                                                    ::djinni::List<::djinni_generated::TasksProgressInfo>::toCpp(tasksProgressInfos));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class NetworkActivityListenerInterface::ObjcProxy final
: public ::NetworkActivityListenerInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::NetworkActivityListenerInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void onTiledLayerErrorStateChanged(const std::vector<::TiledLayerError> & c_errors) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() onTiledLayerErrorStateChanged:(::djinni::List<::djinni_generated::TiledLayerError>::fromCpp(c_errors))];
        }
    }
    void onTasksProgressChanged(float c_totalProgress, const std::vector<::TasksProgressInfo> & c_tasksProgressInfos) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() onTasksProgressChanged:(::djinni::F32::fromCpp(c_totalProgress))
                                                          tasksProgressInfos:(::djinni::List<::djinni_generated::TasksProgressInfo>::fromCpp(c_tasksProgressInfos))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto NetworkActivityListenerInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCNetworkActivityListenerInterfaceCppProxy class]]) {
        return ((MCNetworkActivityListenerInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto NetworkActivityListenerInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCNetworkActivityListenerInterfaceCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
