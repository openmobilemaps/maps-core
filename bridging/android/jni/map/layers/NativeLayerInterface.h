// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from layers.djinni

#pragma once

#include "LayerInterface.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeLayerInterface final : ::djinni::JniInterface<::LayerInterface, NativeLayerInterface> {
public:
    using CppType = std::shared_ptr<::LayerInterface>;
    using CppOptType = std::shared_ptr<::LayerInterface>;
    using JniType = jobject;

    using Boxed = NativeLayerInterface;

    ~NativeLayerInterface();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeLayerInterface>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeLayerInterface>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeLayerInterface();
    friend ::djinni::JniClass<NativeLayerInterface>;
    friend ::djinni::JniInterface<::LayerInterface, NativeLayerInterface>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::LayerInterface
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        std::vector<std::shared_ptr<::RenderPassInterface>> buildRenderPasses() override;
        std::string getIdentifier() override;
        void onAdded() override;
        void onRemoved() override;
        void pause() override;
        void resume() override;
        void hide() override;
        void show() override;

    private:
        friend ::djinni::JniInterface<::LayerInterface, ::djinni_generated::NativeLayerInterface>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("ch/ubique/mapscore/shared/map/layers/LayerInterface") };
    const jmethodID method_buildRenderPasses { ::djinni::jniGetMethodID(clazz.get(), "buildRenderPasses", "()Ljava/util/ArrayList;") };
    const jmethodID method_getIdentifier { ::djinni::jniGetMethodID(clazz.get(), "getIdentifier", "()Ljava/lang/String;") };
    const jmethodID method_onAdded { ::djinni::jniGetMethodID(clazz.get(), "onAdded", "()V") };
    const jmethodID method_onRemoved { ::djinni::jniGetMethodID(clazz.get(), "onRemoved", "()V") };
    const jmethodID method_pause { ::djinni::jniGetMethodID(clazz.get(), "pause", "()V") };
    const jmethodID method_resume { ::djinni::jniGetMethodID(clazz.get(), "resume", "()V") };
    const jmethodID method_hide { ::djinni::jniGetMethodID(clazz.get(), "hide", "()V") };
    const jmethodID method_show { ::djinni::jniGetMethodID(clazz.get(), "show", "()V") };
};

}  // namespace djinni_generated
