// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from graphicsobjects.djinni

#import "MCTextureHolderInterface+Private.h"
#import "MCTextureHolderInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCTextureHolderInterfaceCppProxy : NSObject<MCTextureHolderInterface>

- (id)initWithCpp:(const std::shared_ptr<::TextureHolderInterface>&)cppRef;

@end

@implementation MCTextureHolderInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::TextureHolderInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::TextureHolderInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (int32_t)getImageWidth {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getImageWidth();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getImageHeight {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getImageHeight();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getTextureWidth {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getTextureWidth();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getTextureHeight {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getTextureHeight();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)attachToGraphics {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->attachToGraphics();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)clearFromGraphics {
    try {
        _cppRefHandle.get()->clearFromGraphics();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class TextureHolderInterface::ObjcProxy final
: public ::TextureHolderInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::TextureHolderInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    int32_t getImageWidth() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getImageWidth];
            return ::djinni::I32::toCpp(objcpp_result_);
        }
    }
    int32_t getImageHeight() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getImageHeight];
            return ::djinni::I32::toCpp(objcpp_result_);
        }
    }
    int32_t getTextureWidth() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getTextureWidth];
            return ::djinni::I32::toCpp(objcpp_result_);
        }
    }
    int32_t getTextureHeight() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getTextureHeight];
            return ::djinni::I32::toCpp(objcpp_result_);
        }
    }
    int32_t attachToGraphics() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() attachToGraphics];
            return ::djinni::I32::toCpp(objcpp_result_);
        }
    }
    void clearFromGraphics() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() clearFromGraphics];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto TextureHolderInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCTextureHolderInterfaceCppProxy class]]) {
        return ((MCTextureHolderInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto TextureHolderInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCTextureHolderInterfaceCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
