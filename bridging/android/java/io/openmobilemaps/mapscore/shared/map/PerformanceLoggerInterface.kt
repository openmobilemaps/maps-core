// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from map_helpers.djinni

package io.openmobilemaps.mapscore.shared.map

import com.snapchat.djinni.NativeObjectManager
import java.util.concurrent.atomic.AtomicBoolean

abstract class PerformanceLoggerInterface {

    abstract fun getLoggerName(): String

    abstract fun startLog(id: String)

    abstract fun endLog(id: String)

    abstract fun getStatistics(id: String): LoggerData?

    abstract fun getAllStatistics(): ArrayList<LoggerData>

    abstract fun resetData()

    abstract fun setLoggingEnabled(enabled: Boolean)

    public class CppProxy : PerformanceLoggerInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun getLoggerName(): String {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getLoggerName(this.nativeRef)
        }
        private external fun native_getLoggerName(_nativeRef: Long): String

        override fun startLog(id: String) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_startLog(this.nativeRef, id)
        }
        private external fun native_startLog(_nativeRef: Long, id: String)

        override fun endLog(id: String) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_endLog(this.nativeRef, id)
        }
        private external fun native_endLog(_nativeRef: Long, id: String)

        override fun getStatistics(id: String): LoggerData? {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getStatistics(this.nativeRef, id)
        }
        private external fun native_getStatistics(_nativeRef: Long, id: String): LoggerData?

        override fun getAllStatistics(): ArrayList<LoggerData> {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getAllStatistics(this.nativeRef)
        }
        private external fun native_getAllStatistics(_nativeRef: Long): ArrayList<LoggerData>

        override fun resetData() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_resetData(this.nativeRef)
        }
        private external fun native_resetData(_nativeRef: Long)

        override fun setLoggingEnabled(enabled: Boolean) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setLoggingEnabled(this.nativeRef, enabled)
        }
        private external fun native_setLoggingEnabled(_nativeRef: Long, enabled: Boolean)
    }
}
