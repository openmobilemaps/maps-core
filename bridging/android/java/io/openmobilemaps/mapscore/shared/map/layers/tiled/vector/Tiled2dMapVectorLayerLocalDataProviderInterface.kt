// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from tiled_vector_layer.djinni

package io.openmobilemaps.mapscore.shared.map.layers.tiled.vector

import com.snapchat.djinni.NativeObjectManager
import java.util.concurrent.atomic.AtomicBoolean

abstract class Tiled2dMapVectorLayerLocalDataProviderInterface {

    abstract fun getStyleJson(): String?

    abstract fun loadSpriteAsync(spriteId: String, url: String, scale: Int): com.snapchat.djinni.Future<io.openmobilemaps.mapscore.shared.map.loader.TextureLoaderResult>

    abstract fun loadSpriteJsonAsync(spriteId: String, url: String, scale: Int): com.snapchat.djinni.Future<io.openmobilemaps.mapscore.shared.map.loader.DataLoaderResult>

    abstract fun loadGeojson(sourceName: String, url: String): com.snapchat.djinni.Future<io.openmobilemaps.mapscore.shared.map.loader.DataLoaderResult>

    public class CppProxy : Tiled2dMapVectorLayerLocalDataProviderInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun getStyleJson(): String? {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getStyleJson(this.nativeRef)
        }
        private external fun native_getStyleJson(_nativeRef: Long): String?

        override fun loadSpriteAsync(spriteId: String, url: String, scale: Int): com.snapchat.djinni.Future<io.openmobilemaps.mapscore.shared.map.loader.TextureLoaderResult> {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_loadSpriteAsync(this.nativeRef, spriteId, url, scale)
        }
        private external fun native_loadSpriteAsync(_nativeRef: Long, spriteId: String, url: String, scale: Int): com.snapchat.djinni.Future<io.openmobilemaps.mapscore.shared.map.loader.TextureLoaderResult>

        override fun loadSpriteJsonAsync(spriteId: String, url: String, scale: Int): com.snapchat.djinni.Future<io.openmobilemaps.mapscore.shared.map.loader.DataLoaderResult> {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_loadSpriteJsonAsync(this.nativeRef, spriteId, url, scale)
        }
        private external fun native_loadSpriteJsonAsync(_nativeRef: Long, spriteId: String, url: String, scale: Int): com.snapchat.djinni.Future<io.openmobilemaps.mapscore.shared.map.loader.DataLoaderResult>

        override fun loadGeojson(sourceName: String, url: String): com.snapchat.djinni.Future<io.openmobilemaps.mapscore.shared.map.loader.DataLoaderResult> {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_loadGeojson(this.nativeRef, sourceName, url)
        }
        private external fun native_loadGeojson(_nativeRef: Long, sourceName: String, url: String): com.snapchat.djinni.Future<io.openmobilemaps.mapscore.shared.map.loader.DataLoaderResult>
    }
}
