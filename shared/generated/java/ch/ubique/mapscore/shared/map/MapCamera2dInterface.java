// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from core.djinni

package ch.ubique.mapscore.shared.map;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class MapCamera2dInterface {
    public abstract void moveToCenterPositionZoom(ch.ubique.mapscore.shared.map.coordinates.Coord centerPosition, double zoom, boolean animated);

    public abstract void moveToCenterPosition(ch.ubique.mapscore.shared.map.coordinates.Coord centerPosition, boolean animated);

    public abstract ch.ubique.mapscore.shared.map.coordinates.Coord getCenterPosition();

    public abstract void setZoom(double zoom, boolean animated);

    public abstract double getZoom();

    public abstract void setPaddingLeft(float padding);

    public abstract void setPaddingRight(float padding);

    public abstract void setPaddingTop(float padding);

    public abstract void setPaddingBottom(float padding);

    public abstract void addListener(MapCamera2dListenerInterface listener);

    public abstract void removeListener(MapCamera2dListenerInterface listener);

    public abstract ch.ubique.mapscore.shared.graphics.CameraInterface asCameraInterface();

    public static MapCamera2dInterface create(MapInterface mapInterface, float screenDensityPpi)
    {
        return CppProxy.create(mapInterface,
                               screenDensityPpi);
    }

    private static final class CppProxy extends MapCamera2dInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void moveToCenterPositionZoom(ch.ubique.mapscore.shared.map.coordinates.Coord centerPosition, double zoom, boolean animated)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_moveToCenterPositionZoom(this.nativeRef, centerPosition, zoom, animated);
        }
        private native void native_moveToCenterPositionZoom(long _nativeRef, ch.ubique.mapscore.shared.map.coordinates.Coord centerPosition, double zoom, boolean animated);

        @Override
        public void moveToCenterPosition(ch.ubique.mapscore.shared.map.coordinates.Coord centerPosition, boolean animated)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_moveToCenterPosition(this.nativeRef, centerPosition, animated);
        }
        private native void native_moveToCenterPosition(long _nativeRef, ch.ubique.mapscore.shared.map.coordinates.Coord centerPosition, boolean animated);

        @Override
        public ch.ubique.mapscore.shared.map.coordinates.Coord getCenterPosition()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getCenterPosition(this.nativeRef);
        }
        private native ch.ubique.mapscore.shared.map.coordinates.Coord native_getCenterPosition(long _nativeRef);

        @Override
        public void setZoom(double zoom, boolean animated)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setZoom(this.nativeRef, zoom, animated);
        }
        private native void native_setZoom(long _nativeRef, double zoom, boolean animated);

        @Override
        public double getZoom()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_getZoom(this.nativeRef);
        }
        private native double native_getZoom(long _nativeRef);

        @Override
        public void setPaddingLeft(float padding)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPaddingLeft(this.nativeRef, padding);
        }
        private native void native_setPaddingLeft(long _nativeRef, float padding);

        @Override
        public void setPaddingRight(float padding)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPaddingRight(this.nativeRef, padding);
        }
        private native void native_setPaddingRight(long _nativeRef, float padding);

        @Override
        public void setPaddingTop(float padding)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPaddingTop(this.nativeRef, padding);
        }
        private native void native_setPaddingTop(long _nativeRef, float padding);

        @Override
        public void setPaddingBottom(float padding)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setPaddingBottom(this.nativeRef, padding);
        }
        private native void native_setPaddingBottom(long _nativeRef, float padding);

        @Override
        public void addListener(MapCamera2dListenerInterface listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addListener(this.nativeRef, listener);
        }
        private native void native_addListener(long _nativeRef, MapCamera2dListenerInterface listener);

        @Override
        public void removeListener(MapCamera2dListenerInterface listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeListener(this.nativeRef, listener);
        }
        private native void native_removeListener(long _nativeRef, MapCamera2dListenerInterface listener);

        @Override
        public ch.ubique.mapscore.shared.graphics.CameraInterface asCameraInterface()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_asCameraInterface(this.nativeRef);
        }
        private native ch.ubique.mapscore.shared.graphics.CameraInterface native_asCameraInterface(long _nativeRef);

        public static native MapCamera2dInterface create(MapInterface mapInterface, float screenDensityPpi);
    }
}
