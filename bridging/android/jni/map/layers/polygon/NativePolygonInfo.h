// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from polygon.djinni

#pragma once

#include "PolygonInfo.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativePolygonInfo final {
public:
    using CppType = ::PolygonInfo;
    using JniType = jobject;

    using Boxed = NativePolygonInfo;

    ~NativePolygonInfo();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    NativePolygonInfo();
    friend ::djinni::JniClass<NativePolygonInfo>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("ch/ubique/mapscore/shared/map/layers/polygon/PolygonInfo") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(Ljava/lang/String;Ljava/util/ArrayList;Ljava/util/ArrayList;ZLch/ubique/mapscore/shared/graphics/common/Color;)V") };
    const jfieldID field_identifier { ::djinni::jniGetFieldID(clazz.get(), "identifier", "Ljava/lang/String;") };
    const jfieldID field_coordinates { ::djinni::jniGetFieldID(clazz.get(), "coordinates", "Ljava/util/ArrayList;") };
    const jfieldID field_holes { ::djinni::jniGetFieldID(clazz.get(), "holes", "Ljava/util/ArrayList;") };
    const jfieldID field_isConvex { ::djinni::jniGetFieldID(clazz.get(), "isConvex", "Z") };
    const jfieldID field_color { ::djinni::jniGetFieldID(clazz.get(), "color", "Lch/ubique/mapscore/shared/graphics/common/Color;") };
};

}  // namespace djinni_generated
