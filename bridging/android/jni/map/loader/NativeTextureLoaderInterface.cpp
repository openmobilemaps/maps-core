// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from loader.djinni

#include "NativeTextureLoaderInterface.h"  // my header
#include "Marshal.hpp"
#include "NativeTextureLoaderResult.h"

namespace djinni_generated {

NativeTextureLoaderInterface::NativeTextureLoaderInterface() : ::djinni::JniInterface<::TextureLoaderInterface, NativeTextureLoaderInterface>("ch/ubique/mapscore/shared/map/loader/TextureLoaderInterface$CppProxy") {}

NativeTextureLoaderInterface::~NativeTextureLoaderInterface() = default;

NativeTextureLoaderInterface::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeTextureLoaderInterface::JavaProxy::~JavaProxy() = default;

::TextureLoaderResult NativeTextureLoaderInterface::JavaProxy::loadTexture(const std::string & c_url) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTextureLoaderInterface>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_loadTexture,
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_url)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeTextureLoaderResult::toCpp(jniEnv, jret);
}

CJNIEXPORT void JNICALL Java_ch_ubique_mapscore_shared_map_loader_TextureLoaderInterface_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::TextureLoaderInterface>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_ch_ubique_mapscore_shared_map_loader_TextureLoaderInterface_00024CppProxy_native_1loadTexture(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::TextureLoaderInterface>(nativeRef);
        auto r = ref->loadTexture(::djinni::String::toCpp(jniEnv, j_url));
        return ::djinni::release(::djinni_generated::NativeTextureLoaderResult::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
