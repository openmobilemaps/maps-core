// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from graphicscore.djinni

#import "MCRenderingContextInterface+Private.h"
#import "MCRenderingContextInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCColor+Private.h"
#import "MCRectI+Private.h"
#import "MCRenderPassConfig+Private.h"
#import "MCRenderTargetTexture+Private.h"
#import "MCVec2I+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCRenderingContextInterfaceCppProxy : NSObject<MCRenderingContextInterface>

- (id)initWithCpp:(const std::shared_ptr<::RenderingContextInterface>&)cppRef;

@end

@implementation MCRenderingContextInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::RenderingContextInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::RenderingContextInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)onSurfaceCreated {
    try {
        _cppRefHandle.get()->onSurfaceCreated();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setViewportSize:(nonnull MCVec2I *)size {
    try {
        _cppRefHandle.get()->setViewportSize(::djinni_generated::Vec2I::toCpp(size));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull MCVec2I *)getViewportSize {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getViewportSize();
        return ::djinni_generated::Vec2I::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setBackgroundColor:(nonnull MCColor *)color {
    try {
        _cppRefHandle.get()->setBackgroundColor(::djinni_generated::Color::toCpp(color));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setupDrawFrame:(nullable id<MCRenderTargetTexture>)renderTargetTexture {
    try {
        _cppRefHandle.get()->setupDrawFrame(::djinni::Optional<std::optional, ::djinni_generated::RenderTargetTexture>::toCpp(renderTargetTexture));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)endDrawFrame:(nullable id<MCRenderTargetTexture>)renderTargetTexture {
    try {
        _cppRefHandle.get()->endDrawFrame(::djinni::Optional<std::optional, ::djinni_generated::RenderTargetTexture>::toCpp(renderTargetTexture));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)preRenderStencilMask:(nonnull MCRenderPassConfig *)pass {
    try {
        _cppRefHandle.get()->preRenderStencilMask(::djinni_generated::RenderPassConfig::toCpp(pass));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)postRenderStencilMask:(nonnull MCRenderPassConfig *)pass {
    try {
        _cppRefHandle.get()->postRenderStencilMask(::djinni_generated::RenderPassConfig::toCpp(pass));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)applyScissorRect:(nullable MCRectI *)scissorRect
                    pass:(nonnull MCRenderPassConfig *)pass {
    try {
        _cppRefHandle.get()->applyScissorRect(::djinni::Optional<std::optional, ::djinni_generated::RectI>::toCpp(scissorRect),
                                              ::djinni_generated::RenderPassConfig::toCpp(pass));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCRenderTargetTexture>)createRenderTargetTexture {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createRenderTargetTexture();
        return ::djinni_generated::RenderTargetTexture::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class RenderingContextInterface::ObjcProxy final
: public ::RenderingContextInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::RenderingContextInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void onSurfaceCreated() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() onSurfaceCreated];
        }
    }
    void setViewportSize(const ::Vec2I & c_size) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setViewportSize:(::djinni_generated::Vec2I::fromCpp(c_size))];
        }
    }
    ::Vec2I getViewportSize() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getViewportSize];
            return ::djinni_generated::Vec2I::toCpp(objcpp_result_);
        }
    }
    void setBackgroundColor(const ::Color & c_color) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setBackgroundColor:(::djinni_generated::Color::fromCpp(c_color))];
        }
    }
    void setupDrawFrame(const std::shared_ptr<::RenderTargetTexture> & c_renderTargetTexture) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setupDrawFrame:(::djinni::Optional<std::optional, ::djinni_generated::RenderTargetTexture>::fromCpp(c_renderTargetTexture))];
        }
    }
    void endDrawFrame(const std::shared_ptr<::RenderTargetTexture> & c_renderTargetTexture) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() endDrawFrame:(::djinni::Optional<std::optional, ::djinni_generated::RenderTargetTexture>::fromCpp(c_renderTargetTexture))];
        }
    }
    void preRenderStencilMask(const ::RenderPassConfig & c_pass) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() preRenderStencilMask:(::djinni_generated::RenderPassConfig::fromCpp(c_pass))];
        }
    }
    void postRenderStencilMask(const ::RenderPassConfig & c_pass) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() postRenderStencilMask:(::djinni_generated::RenderPassConfig::fromCpp(c_pass))];
        }
    }
    void applyScissorRect(const std::optional<::RectI> & c_scissorRect, const ::RenderPassConfig & c_pass) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() applyScissorRect:(::djinni::Optional<std::optional, ::djinni_generated::RectI>::fromCpp(c_scissorRect))
                                                                  pass:(::djinni_generated::RenderPassConfig::fromCpp(c_pass))];
        }
    }
    std::shared_ptr<::RenderTargetTexture> createRenderTargetTexture() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createRenderTargetTexture];
            return ::djinni_generated::RenderTargetTexture::toCpp(objcpp_result_);
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto RenderingContextInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCRenderingContextInterfaceCppProxy class]]) {
        return ((MCRenderingContextInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto RenderingContextInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCRenderingContextInterfaceCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
