// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from task_scheduler.djinni

package io.openmobilemaps.mapscore.shared.map.scheduling

import com.snapchat.djinni.NativeObjectManager
import java.util.concurrent.atomic.AtomicBoolean

abstract class SchedulerInterface {

    abstract fun addTask(task: TaskInterface)

    abstract fun addTasks(tasks: ArrayList<TaskInterface>)

    abstract fun removeTask(id: String)

    abstract fun clear()

    abstract fun pause()

    abstract fun resume()

    abstract fun destroy()

    abstract fun hasSeparateGraphicsInvocation(): Boolean

    /** Execute added graphics tasks. Returns true, if there are unprocessed tasks in the queue after the execution. */
    abstract fun runGraphicsTasks(): Boolean

    abstract fun setSchedulerGraphicsTaskCallbacks(callbacks: SchedulerGraphicsTaskCallbacks)

    abstract fun getThreadPoolCallbacks(): ThreadPoolCallbacks

    private class CppProxy : SchedulerInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun addTask(task: TaskInterface) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_addTask(this.nativeRef, task)
        }
        private external fun native_addTask(_nativeRef: Long, task: TaskInterface)

        override fun addTasks(tasks: ArrayList<TaskInterface>) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_addTasks(this.nativeRef, tasks)
        }
        private external fun native_addTasks(_nativeRef: Long, tasks: ArrayList<TaskInterface>)

        override fun removeTask(id: String) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_removeTask(this.nativeRef, id)
        }
        private external fun native_removeTask(_nativeRef: Long, id: String)

        override fun clear() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_clear(this.nativeRef)
        }
        private external fun native_clear(_nativeRef: Long)

        override fun pause() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_pause(this.nativeRef)
        }
        private external fun native_pause(_nativeRef: Long)

        override fun resume() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_resume(this.nativeRef)
        }
        private external fun native_resume(_nativeRef: Long)

        override fun destroy() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_destroy(this.nativeRef)
        }
        private external fun native_destroy(_nativeRef: Long)

        override fun hasSeparateGraphicsInvocation(): Boolean {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_hasSeparateGraphicsInvocation(this.nativeRef)
        }
        private external fun native_hasSeparateGraphicsInvocation(_nativeRef: Long): Boolean

        override fun runGraphicsTasks(): Boolean {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_runGraphicsTasks(this.nativeRef)
        }
        private external fun native_runGraphicsTasks(_nativeRef: Long): Boolean

        override fun setSchedulerGraphicsTaskCallbacks(callbacks: SchedulerGraphicsTaskCallbacks) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setSchedulerGraphicsTaskCallbacks(this.nativeRef, callbacks)
        }
        private external fun native_setSchedulerGraphicsTaskCallbacks(_nativeRef: Long, callbacks: SchedulerGraphicsTaskCallbacks)

        override fun getThreadPoolCallbacks(): ThreadPoolCallbacks {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getThreadPoolCallbacks(this.nativeRef)
        }
        private external fun native_getThreadPoolCallbacks(_nativeRef: Long): ThreadPoolCallbacks
    }
}
