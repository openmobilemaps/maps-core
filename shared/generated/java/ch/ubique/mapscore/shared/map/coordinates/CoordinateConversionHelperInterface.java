// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from coordinate_system.djinni

package ch.ubique.mapscore.shared.map.coordinates;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class CoordinateConversionHelperInterface {
    public abstract void registerConverter(String from, String to, CoordinateConverterInterface converter);

    public abstract Coord convert(String to, Coord coordinate);

    public abstract Coord convertToRenderSystem(Coord coordinate);

    private static final class CppProxy extends CoordinateConversionHelperInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void registerConverter(String from, String to, CoordinateConverterInterface converter)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_registerConverter(this.nativeRef, from, to, converter);
        }
        private native void native_registerConverter(long _nativeRef, String from, String to, CoordinateConverterInterface converter);

        @Override
        public Coord convert(String to, Coord coordinate)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_convert(this.nativeRef, to, coordinate);
        }
        private native Coord native_convert(long _nativeRef, String to, Coord coordinate);

        @Override
        public Coord convertToRenderSystem(Coord coordinate)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_convertToRenderSystem(this.nativeRef, coordinate);
        }
        private native Coord native_convertToRenderSystem(long _nativeRef, Coord coordinate);
    }
}
