// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from mapcore.djinni

#import "MCLayerInterface+Private.h"
#import "MCLayerInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCLayerReadyState+Private.h"
#import "MCMapInterface+Private.h"
#import "MCMaskingObjectInterface+Private.h"
#import "MCNetworkActivityManagerInterface+Private.h"
#import "MCRectI+Private.h"
#import "MCRenderPassInterface+Private.h"
#import "MCRenderTargetTexture+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCLayerInterfaceCppProxy : NSObject<MCLayerInterface>

- (id)initWithCpp:(const std::shared_ptr<::LayerInterface>&)cppRef;

@end

@implementation MCLayerInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::LayerInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::LayerInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)setMaskingObject:(nullable id<MCMaskingObjectInterface>)maskingObject {
    try {
        _cppRefHandle.get()->setMaskingObject(::djinni::Optional<std::optional, ::djinni_generated::MaskingObjectInterface>::toCpp(maskingObject));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)update {
    try {
        _cppRefHandle.get()->update();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<id<MCRenderTargetTexture>> *)additionalTargets {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->additionalTargets();
        return ::djinni::List<::djinni_generated::RenderTargetTexture>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<id<MCRenderPassInterface>> *)buildRenderPasses {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->buildRenderPasses();
        return ::djinni::List<::djinni_generated::RenderPassInterface>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onAdded:(nullable MCMapInterface *)mapInterface {
    try {
        _cppRefHandle.get()->onAdded(::djinni_generated::MapInterface::toCpp(mapInterface));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onRemoved {
    try {
        _cppRefHandle.get()->onRemoved();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)pause {
    try {
        _cppRefHandle.get()->pause();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)resume {
    try {
        _cppRefHandle.get()->resume();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)hide {
    try {
        _cppRefHandle.get()->hide();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)show {
    try {
        _cppRefHandle.get()->show();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setAlpha:(float)alpha {
    try {
        _cppRefHandle.get()->setAlpha(::djinni::F32::toCpp(alpha));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getAlpha {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAlpha();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setScissorRect:(nullable MCRectI *)scissorRect {
    try {
        _cppRefHandle.get()->setScissorRect(::djinni::Optional<std::optional, ::djinni_generated::RectI>::toCpp(scissorRect));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (MCLayerReadyState)isReadyToRenderOffscreen {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isReadyToRenderOffscreen();
        return ::djinni::Enum<::LayerReadyState, MCLayerReadyState>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)enableAnimations:(BOOL)enabled {
    try {
        _cppRefHandle.get()->enableAnimations(::djinni::Bool::toCpp(enabled));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setNetworkActivityManager:(nullable MCNetworkActivityManagerInterface *)networkActivityManager {
    try {
        _cppRefHandle.get()->setNetworkActivityManager(::djinni_generated::NetworkActivityManagerInterface::toCpp(networkActivityManager));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)forceReload {
    try {
        _cppRefHandle.get()->forceReload();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class LayerInterface::ObjcProxy final
: public ::LayerInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::LayerInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void setMaskingObject(const std::shared_ptr<::MaskingObjectInterface> & c_maskingObject) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setMaskingObject:(::djinni::Optional<std::optional, ::djinni_generated::MaskingObjectInterface>::fromCpp(c_maskingObject))];
        }
    }
    void update() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() update];
        }
    }
    std::vector<std::shared_ptr<::RenderTargetTexture>> additionalTargets() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() additionalTargets];
            return ::djinni::List<::djinni_generated::RenderTargetTexture>::toCpp(objcpp_result_);
        }
    }
    std::vector<std::shared_ptr<::RenderPassInterface>> buildRenderPasses() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() buildRenderPasses];
            return ::djinni::List<::djinni_generated::RenderPassInterface>::toCpp(objcpp_result_);
        }
    }
    void onAdded(const std::shared_ptr<::MapInterface> & c_mapInterface) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() onAdded:(::djinni_generated::MapInterface::fromCpp(c_mapInterface))];
        }
    }
    void onRemoved() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() onRemoved];
        }
    }
    void pause() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() pause];
        }
    }
    void resume() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() resume];
        }
    }
    void hide() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() hide];
        }
    }
    void show() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() show];
        }
    }
    void setAlpha(float c_alpha) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setAlpha:(::djinni::F32::fromCpp(c_alpha))];
        }
    }
    float getAlpha() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getAlpha];
            return ::djinni::F32::toCpp(objcpp_result_);
        }
    }
    void setScissorRect(const std::optional<::RectI> & c_scissorRect) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setScissorRect:(::djinni::Optional<std::optional, ::djinni_generated::RectI>::fromCpp(c_scissorRect))];
        }
    }
    ::LayerReadyState isReadyToRenderOffscreen() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() isReadyToRenderOffscreen];
            return ::djinni::Enum<::LayerReadyState, MCLayerReadyState>::toCpp(objcpp_result_);
        }
    }
    void enableAnimations(bool c_enabled) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() enableAnimations:(::djinni::Bool::fromCpp(c_enabled))];
        }
    }
    void setNetworkActivityManager(const std::shared_ptr<::NetworkActivityManagerInterface> & c_networkActivityManager) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setNetworkActivityManager:(::djinni_generated::NetworkActivityManagerInterface::fromCpp(c_networkActivityManager))];
        }
    }
    void forceReload() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() forceReload];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto LayerInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCLayerInterfaceCppProxy class]]) {
        return ((MCLayerInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto LayerInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCLayerInterfaceCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
