// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

package io.openmobilemaps.mapscore.shared.graphics

import com.snapchat.djinni.NativeObjectManager
import java.util.concurrent.atomic.AtomicBoolean

abstract class RenderingContextInterface {

    /** Ensure calling on graphics thread */
    abstract fun onSurfaceCreated()

    /** Ensure calling on graphics thread */
    abstract fun setViewportSize(size: io.openmobilemaps.mapscore.shared.graphics.common.Vec2I)

    abstract fun getViewportSize(): io.openmobilemaps.mapscore.shared.graphics.common.Vec2I

    abstract fun setBackgroundColor(color: io.openmobilemaps.mapscore.shared.graphics.common.Color)

    abstract fun setCulling(mode: RenderingCullMode)

    abstract fun setupDrawFrame()

    abstract fun preRenderStencilMask()

    abstract fun postRenderStencilMask()

    /** optional rectangle, remove scissoring when not set */
    abstract fun applyScissorRect(scissorRect: io.openmobilemaps.mapscore.shared.graphics.common.RectI?)

    private class CppProxy : RenderingContextInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun onSurfaceCreated() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_onSurfaceCreated(this.nativeRef)
        }
        private external fun native_onSurfaceCreated(_nativeRef: Long)

        override fun setViewportSize(size: io.openmobilemaps.mapscore.shared.graphics.common.Vec2I) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setViewportSize(this.nativeRef, size)
        }
        private external fun native_setViewportSize(_nativeRef: Long, size: io.openmobilemaps.mapscore.shared.graphics.common.Vec2I)

        override fun getViewportSize(): io.openmobilemaps.mapscore.shared.graphics.common.Vec2I {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getViewportSize(this.nativeRef)
        }
        private external fun native_getViewportSize(_nativeRef: Long): io.openmobilemaps.mapscore.shared.graphics.common.Vec2I

        override fun setBackgroundColor(color: io.openmobilemaps.mapscore.shared.graphics.common.Color) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setBackgroundColor(this.nativeRef, color)
        }
        private external fun native_setBackgroundColor(_nativeRef: Long, color: io.openmobilemaps.mapscore.shared.graphics.common.Color)

        override fun setCulling(mode: RenderingCullMode) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setCulling(this.nativeRef, mode)
        }
        private external fun native_setCulling(_nativeRef: Long, mode: RenderingCullMode)

        override fun setupDrawFrame() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setupDrawFrame(this.nativeRef)
        }
        private external fun native_setupDrawFrame(_nativeRef: Long)

        override fun preRenderStencilMask() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_preRenderStencilMask(this.nativeRef)
        }
        private external fun native_preRenderStencilMask(_nativeRef: Long)

        override fun postRenderStencilMask() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_postRenderStencilMask(this.nativeRef)
        }
        private external fun native_postRenderStencilMask(_nativeRef: Long)

        override fun applyScissorRect(scissorRect: io.openmobilemaps.mapscore.shared.graphics.common.RectI?) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_applyScissorRect(this.nativeRef, scissorRect)
        }
        private external fun native_applyScissorRect(_nativeRef: Long, scissorRect: io.openmobilemaps.mapscore.shared.graphics.common.RectI?)
    }
}
