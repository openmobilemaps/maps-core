// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

package io.openmobilemaps.mapscore.shared.map

import com.snapchat.djinni.NativeObjectManager
import java.util.concurrent.atomic.AtomicBoolean

abstract class MapCamera3dInterface {

    abstract fun getCameraConfig(): Camera3dConfig

    abstract fun setCameraConfig(config: Camera3dConfig, durationSeconds: Float?, targetZoom: Float?, targetCoordinate: io.openmobilemaps.mapscore.shared.map.coordinates.Coord?)

    abstract fun setHardwareMatrices(viewMatrix: ArrayList<Double>, projectionMatrix: ArrayList<Double>)

    public class CppProxy : MapCamera3dInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun getCameraConfig(): Camera3dConfig {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getCameraConfig(this.nativeRef)
        }
        private external fun native_getCameraConfig(_nativeRef: Long): Camera3dConfig

        override fun setCameraConfig(config: Camera3dConfig, durationSeconds: Float?, targetZoom: Float?, targetCoordinate: io.openmobilemaps.mapscore.shared.map.coordinates.Coord?) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setCameraConfig(this.nativeRef, config, durationSeconds, targetZoom, targetCoordinate)
        }
        private external fun native_setCameraConfig(_nativeRef: Long, config: Camera3dConfig, durationSeconds: Float?, targetZoom: Float?, targetCoordinate: io.openmobilemaps.mapscore.shared.map.coordinates.Coord?)

        override fun setHardwareMatrices(viewMatrix: ArrayList<Double>, projectionMatrix: ArrayList<Double>) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setHardwareMatrices(this.nativeRef, viewMatrix, projectionMatrix)
        }
        private external fun native_setHardwareMatrices(_nativeRef: Long, viewMatrix: ArrayList<Double>, projectionMatrix: ArrayList<Double>)
    }
}
