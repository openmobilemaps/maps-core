// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from graphicsobjects.djinni

#import "MCRectangle2dInterface+Private.h"
#import "MCRectangle2dInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCGraphicsObjectInterface+Private.h"
#import "MCRectD+Private.h"
#import "MCTextureHolderInterface+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCRectangle2dInterfaceCppProxy : NSObject<MCRectangle2dInterface>

- (id)initWithCpp:(const std::shared_ptr<::Rectangle2dInterface>&)cppRef;

@end

@implementation MCRectangle2dInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Rectangle2dInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Rectangle2dInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)setFrame:(nonnull MCRectD *)frame
textureCoordinates:(nonnull MCRectD *)textureCoordinates {
    try {
        _cppRefHandle.get()->setFrame(::djinni_generated::RectD::toCpp(frame),
                                      ::djinni_generated::RectD::toCpp(textureCoordinates));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)loadTexture:(nullable id<MCTextureHolderInterface>)textureHolder {
    try {
        _cppRefHandle.get()->loadTexture(::djinni_generated::TextureHolderInterface::toCpp(textureHolder));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)removeTexture {
    try {
        _cppRefHandle.get()->removeTexture();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCGraphicsObjectInterface>)asGraphicsObject {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->asGraphicsObject();
        return ::djinni_generated::GraphicsObjectInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class Rectangle2dInterface::ObjcProxy final
: public ::Rectangle2dInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::Rectangle2dInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void setFrame(const ::RectD & c_frame, const ::RectD & c_textureCoordinates) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setFrame:(::djinni_generated::RectD::fromCpp(c_frame))
                                            textureCoordinates:(::djinni_generated::RectD::fromCpp(c_textureCoordinates))];
        }
    }
    void loadTexture(const std::shared_ptr<::TextureHolderInterface> & c_textureHolder) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() loadTexture:(::djinni_generated::TextureHolderInterface::fromCpp(c_textureHolder))];
        }
    }
    void removeTexture() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() removeTexture];
        }
    }
    std::shared_ptr<::GraphicsObjectInterface> asGraphicsObject() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() asGraphicsObject];
            return ::djinni_generated::GraphicsObjectInterface::toCpp(objcpp_result_);
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto Rectangle2dInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCRectangle2dInterfaceCppProxy class]]) {
        return ((MCRectangle2dInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto Rectangle2dInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCRectangle2dInterfaceCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
