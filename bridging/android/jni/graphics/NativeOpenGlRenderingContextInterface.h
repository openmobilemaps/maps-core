// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

#pragma once

#include "OpenGlRenderingContextInterface.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeOpenGlRenderingContextInterface final : ::djinni::JniInterface<::OpenGlRenderingContextInterface, NativeOpenGlRenderingContextInterface> {
public:
    using CppType = std::shared_ptr<::OpenGlRenderingContextInterface>;
    using CppOptType = std::shared_ptr<::OpenGlRenderingContextInterface>;
    using JniType = jobject;

    using Boxed = NativeOpenGlRenderingContextInterface;

    ~NativeOpenGlRenderingContextInterface();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeOpenGlRenderingContextInterface>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeOpenGlRenderingContextInterface>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeOpenGlRenderingContextInterface();
    friend ::djinni::JniClass<NativeOpenGlRenderingContextInterface>;
    friend ::djinni::JniInterface<::OpenGlRenderingContextInterface, NativeOpenGlRenderingContextInterface>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::OpenGlRenderingContextInterface
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        void resume() override;
        void pause() override;
        /*not-null*/ std::shared_ptr<::OpenGlRenderTargetInterface> getCreateRenderTarget(const std::string & name, ::TextureFilterType textureFilter, const ::Color & clearColor, bool usesDepthStencil) override;
        void deleteRenderTarget(const std::string & name) override;
        std::vector</*not-null*/ std::shared_ptr<::OpenGlRenderTargetInterface>> getRenderTargets() override;
        int32_t getProgram(const std::string & name) override;
        void storeProgram(const std::string & name, int32_t program) override;
        float getAspectRatio() override;
        int64_t getDeltaTimeMs() override;

    private:
        friend ::djinni::JniInterface<::OpenGlRenderingContextInterface, ::djinni_generated::NativeOpenGlRenderingContextInterface>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/openmobilemaps/mapscore/shared/graphics/OpenGlRenderingContextInterface") };
    const jmethodID method_resume { ::djinni::jniGetMethodID(clazz.get(), "resume", "()V") };
    const jmethodID method_pause { ::djinni::jniGetMethodID(clazz.get(), "pause", "()V") };
    const jmethodID method_getCreateRenderTarget { ::djinni::jniGetMethodID(clazz.get(), "getCreateRenderTarget", "(Ljava/lang/String;Lio/openmobilemaps/mapscore/shared/graphics/objects/TextureFilterType;Lio/openmobilemaps/mapscore/shared/graphics/common/Color;Z)Lio/openmobilemaps/mapscore/shared/graphics/OpenGlRenderTargetInterface;") };
    const jmethodID method_deleteRenderTarget { ::djinni::jniGetMethodID(clazz.get(), "deleteRenderTarget", "(Ljava/lang/String;)V") };
    const jmethodID method_getRenderTargets { ::djinni::jniGetMethodID(clazz.get(), "getRenderTargets", "()Ljava/util/ArrayList;") };
    const jmethodID method_getProgram { ::djinni::jniGetMethodID(clazz.get(), "getProgram", "(Ljava/lang/String;)I") };
    const jmethodID method_storeProgram { ::djinni::jniGetMethodID(clazz.get(), "storeProgram", "(Ljava/lang/String;I)V") };
    const jmethodID method_getAspectRatio { ::djinni::jniGetMethodID(clazz.get(), "getAspectRatio", "()F") };
    const jmethodID method_getDeltaTimeMs { ::djinni::jniGetMethodID(clazz.get(), "getDeltaTimeMs", "()J") };
};

} // namespace djinni_generated
