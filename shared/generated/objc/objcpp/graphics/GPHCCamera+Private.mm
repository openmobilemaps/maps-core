// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from core.djinni

#import "GPHCCamera+Private.h"
#import "GPHCCamera.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "GPHCCameraListener+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface GPHCCameraCppProxy : NSObject<GPHCCamera>

- (id)initWithCpp:(const std::shared_ptr<::Camera>&)cppRef;

@end

@implementation GPHCCameraCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Camera>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Camera>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (int64_t)getMvpMatrix {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getMvpMatrix();
        return ::djinni::I64::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)addListener:(nullable id<GPHCCameraListener>)listener {
    try {
        _cppRefHandle.get()->addListener(::djinni_generated::CameraListener::toCpp(listener));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)removeListener:(nullable id<GPHCCameraListener>)listener {
    try {
        _cppRefHandle.get()->removeListener(::djinni_generated::CameraListener::toCpp(listener));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class Camera::ObjcProxy final
: public ::Camera
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::Camera;
public:
    using ObjcProxyBase::ObjcProxyBase;
    int64_t getMvpMatrix() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getMvpMatrix];
            return ::djinni::I64::toCpp(objcpp_result_);
        }
    }
    void addListener(const std::shared_ptr<::CameraListener> & c_listener) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() addListener:(::djinni_generated::CameraListener::fromCpp(c_listener))];
        }
    }
    void removeListener(const std::shared_ptr<::CameraListener> & c_listener) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() removeListener:(::djinni_generated::CameraListener::fromCpp(c_listener))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto Camera::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[GPHCCameraCppProxy class]]) {
        return ((GPHCCameraCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto Camera::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<GPHCCameraCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
