// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

package io.openmobilemaps.mapscore.shared.graphics

import com.snapchat.djinni.NativeObjectManager
import java.util.concurrent.atomic.AtomicBoolean

abstract class OpenGlRenderTargetInterface {

    abstract fun asRenderTargetInterface(): RenderTargetInterface

    abstract fun setup(size: io.openmobilemaps.mapscore.shared.graphics.common.Vec2I)

    abstract fun clear()

    abstract fun bindFramebuffer(renderingContext: RenderingContextInterface)

    abstract fun unbindFramebuffer()

    abstract fun getTextureId(): Int

    public class CppProxy : OpenGlRenderTargetInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun asRenderTargetInterface(): RenderTargetInterface {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_asRenderTargetInterface(this.nativeRef)
        }
        private external fun native_asRenderTargetInterface(_nativeRef: Long): RenderTargetInterface

        override fun setup(size: io.openmobilemaps.mapscore.shared.graphics.common.Vec2I) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setup(this.nativeRef, size)
        }
        private external fun native_setup(_nativeRef: Long, size: io.openmobilemaps.mapscore.shared.graphics.common.Vec2I)

        override fun clear() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_clear(this.nativeRef)
        }
        private external fun native_clear(_nativeRef: Long)

        override fun bindFramebuffer(renderingContext: RenderingContextInterface) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_bindFramebuffer(this.nativeRef, renderingContext)
        }
        private external fun native_bindFramebuffer(_nativeRef: Long, renderingContext: RenderingContextInterface)

        override fun unbindFramebuffer() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_unbindFramebuffer(this.nativeRef)
        }
        private external fun native_unbindFramebuffer(_nativeRef: Long)

        override fun getTextureId(): Int {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getTextureId(this.nativeRef)
        }
        private external fun native_getTextureId(_nativeRef: Long): Int
    }
}
