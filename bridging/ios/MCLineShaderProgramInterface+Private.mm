// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from shader.djinni

#import "MCLineShaderProgramInterface+Private.h"
#import "MCLineShaderProgramInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCRenderingContextInterface+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCLineShaderProgramInterfaceCppProxy : NSObject<MCLineShaderProgramInterface>

- (id)initWithCpp:(const std::shared_ptr<::LineShaderProgramInterface>&)cppRef;

@end

@implementation MCLineShaderProgramInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::LineShaderProgramInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::LineShaderProgramInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSString *)getRectProgramName {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getRectProgramName();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setupRectProgram:(nullable id<MCRenderingContextInterface>)context {
    try {
        _cppRefHandle.get()->setupRectProgram(::djinni_generated::RenderingContextInterface::toCpp(context));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getPointProgramName {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getPointProgramName();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setupPointProgram:(nullable id<MCRenderingContextInterface>)context {
    try {
        _cppRefHandle.get()->setupPointProgram(::djinni_generated::RenderingContextInterface::toCpp(context));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)preRenderRect:(nullable id<MCRenderingContextInterface>)context {
    try {
        _cppRefHandle.get()->preRenderRect(::djinni_generated::RenderingContextInterface::toCpp(context));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)preRenderPoint:(nullable id<MCRenderingContextInterface>)context {
    try {
        _cppRefHandle.get()->preRenderPoint(::djinni_generated::RenderingContextInterface::toCpp(context));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class LineShaderProgramInterface::ObjcProxy final
: public ::LineShaderProgramInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::LineShaderProgramInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    std::string getRectProgramName() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getRectProgramName];
            return ::djinni::String::toCpp(objcpp_result_);
        }
    }
    void setupRectProgram(const std::shared_ptr<::RenderingContextInterface> & c_context) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setupRectProgram:(::djinni_generated::RenderingContextInterface::fromCpp(c_context))];
        }
    }
    std::string getPointProgramName() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getPointProgramName];
            return ::djinni::String::toCpp(objcpp_result_);
        }
    }
    void setupPointProgram(const std::shared_ptr<::RenderingContextInterface> & c_context) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setupPointProgram:(::djinni_generated::RenderingContextInterface::fromCpp(c_context))];
        }
    }
    void preRenderRect(const std::shared_ptr<::RenderingContextInterface> & c_context) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() preRenderRect:(::djinni_generated::RenderingContextInterface::fromCpp(c_context))];
        }
    }
    void preRenderPoint(const std::shared_ptr<::RenderingContextInterface> & c_context) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() preRenderPoint:(::djinni_generated::RenderingContextInterface::fromCpp(c_context))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto LineShaderProgramInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCLineShaderProgramInterfaceCppProxy class]]) {
        return ((MCLineShaderProgramInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto LineShaderProgramInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCLineShaderProgramInterfaceCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
