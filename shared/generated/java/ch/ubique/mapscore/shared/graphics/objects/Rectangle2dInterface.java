// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from graphicsobjects.djinni

package ch.ubique.mapscore.shared.graphics.objects;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class Rectangle2dInterface {
    public abstract void setFrame(ch.ubique.mapscore.shared.graphics.common.RectF frame, ch.ubique.mapscore.shared.graphics.common.RectF textureCoordinates);

    public abstract void loadTexture(TextureHolderInterface textureHolder);

    public abstract void removeTexture();

    public abstract GraphicsObjectInterface asGraphicsObject();

    private static final class CppProxy extends Rectangle2dInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void setFrame(ch.ubique.mapscore.shared.graphics.common.RectF frame, ch.ubique.mapscore.shared.graphics.common.RectF textureCoordinates)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setFrame(this.nativeRef, frame, textureCoordinates);
        }
        private native void native_setFrame(long _nativeRef, ch.ubique.mapscore.shared.graphics.common.RectF frame, ch.ubique.mapscore.shared.graphics.common.RectF textureCoordinates);

        @Override
        public void loadTexture(TextureHolderInterface textureHolder)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_loadTexture(this.nativeRef, textureHolder);
        }
        private native void native_loadTexture(long _nativeRef, TextureHolderInterface textureHolder);

        @Override
        public void removeTexture()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeTexture(this.nativeRef);
        }
        private native void native_removeTexture(long _nativeRef);

        @Override
        public GraphicsObjectInterface asGraphicsObject()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_asGraphicsObject(this.nativeRef);
        }
        private native GraphicsObjectInterface native_asGraphicsObject(long _nativeRef);
    }
}
