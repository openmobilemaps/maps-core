// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from line.djinni

#include "NativeShaderLineStyle.h"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeShaderLineStyle::NativeShaderLineStyle() = default;

NativeShaderLineStyle::~NativeShaderLineStyle() = default;

auto NativeShaderLineStyle::fromCpp(JNIEnv* jniEnv, const CppType& c) -> ::djinni::LocalRef<JniType> {
    const auto& data = ::djinni::JniClass<NativeShaderLineStyle>::get();
    auto r = ::djinni::LocalRef<JniType>{jniEnv->NewObject(data.clazz.get(), data.jconstructor,
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.width)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.colorR)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.colorG)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.colorB)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.colorA)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.gapColorR)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.gapColorG)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.gapColorB)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.gapColorA)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.widthAsPixel)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.opacity)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.blur)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.lineCap)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.numDashValue)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.dashValue0)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.dashValue1)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.dashValue2)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.dashValue3)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.dashFade)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.dashAnimationSpeed)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.offset)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.dotted)),
                                                           ::djinni::get(::djinni::F32::fromCpp(jniEnv, c.dottedSkew)))};
    ::djinni::jniExceptionCheck(jniEnv);
    return r;
}

auto NativeShaderLineStyle::toCpp(JNIEnv* jniEnv, JniType j) -> CppType {
    ::djinni::JniLocalScope jscope(jniEnv, 24);
    assert(j != nullptr);
    const auto& data = ::djinni::JniClass<NativeShaderLineStyle>::get();
    return {::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_width)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_colorR)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_colorG)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_colorB)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_colorA)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_gapColorR)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_gapColorG)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_gapColorB)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_gapColorA)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_widthAsPixel)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_opacity)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_blur)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_lineCap)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_numDashValue)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_dashValue0)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_dashValue1)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_dashValue2)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_dashValue3)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_dashFade)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_dashAnimationSpeed)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_offset)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_dotted)),
            ::djinni::F32::toCpp(jniEnv, jniEnv->GetFloatField(j, data.field_dottedSkew))};
}

} // namespace djinni_generated
