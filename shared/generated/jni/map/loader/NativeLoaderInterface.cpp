// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from loader.djinni

#include "NativeLoaderInterface.h"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeLoaderInterface::NativeLoaderInterface() : ::djinni::JniInterface<::LoaderInterface, NativeLoaderInterface>("ch/ubique/mapscore/shared/map/loader/LoaderInterface$CppProxy") {}

NativeLoaderInterface::~NativeLoaderInterface() = default;

NativeLoaderInterface::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeLoaderInterface::JavaProxy::~JavaProxy() = default;

std::vector<uint8_t> NativeLoaderInterface::JavaProxy::loadDate(const std::string & c_url) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeLoaderInterface>::get();
    auto jret = (jbyteArray)jniEnv->CallObjectMethod(Handle::get().get(), data.method_loadDate,
                                                     ::djinni::get(::djinni::String::fromCpp(jniEnv, c_url)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Binary::toCpp(jniEnv, jret);
}

CJNIEXPORT void JNICALL Java_ch_ubique_mapscore_shared_map_loader_LoaderInterface_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::LoaderInterface>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jbyteArray JNICALL Java_ch_ubique_mapscore_shared_map_loader_LoaderInterface_00024CppProxy_native_1loadDate(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::LoaderInterface>(nativeRef);
        auto r = ref->loadDate(::djinni::String::toCpp(jniEnv, j_url));
        return ::djinni::release(::djinni::Binary::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
