// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from shader.djinni

#include "NativeShaderFactoryInterface.h"  // my header
#include "NativeAlphaShaderInterface.h"
#include "NativeColorLineShaderInterface.h"
#include "NativeColorShaderInterface.h"

namespace djinni_generated {

NativeShaderFactoryInterface::NativeShaderFactoryInterface() : ::djinni::JniInterface<::ShaderFactoryInterface, NativeShaderFactoryInterface>("ch/ubique/mapscore/shared/graphics/shader/ShaderFactoryInterface$CppProxy") {}

NativeShaderFactoryInterface::~NativeShaderFactoryInterface() = default;

NativeShaderFactoryInterface::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeShaderFactoryInterface::JavaProxy::~JavaProxy() = default;

std::shared_ptr<::AlphaShaderInterface> NativeShaderFactoryInterface::JavaProxy::createAlphaShader() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeShaderFactoryInterface>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_createAlphaShader);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeAlphaShaderInterface::toCpp(jniEnv, jret);
}
std::shared_ptr<::ColorLineShaderInterface> NativeShaderFactoryInterface::JavaProxy::createColorLineShader() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeShaderFactoryInterface>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_createColorLineShader);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeColorLineShaderInterface::toCpp(jniEnv, jret);
}
std::shared_ptr<::ColorShaderInterface> NativeShaderFactoryInterface::JavaProxy::createColorShader() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeShaderFactoryInterface>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_createColorShader);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeColorShaderInterface::toCpp(jniEnv, jret);
}

CJNIEXPORT void JNICALL Java_ch_ubique_mapscore_shared_graphics_shader_ShaderFactoryInterface_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::ShaderFactoryInterface>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_ch_ubique_mapscore_shared_graphics_shader_ShaderFactoryInterface_00024CppProxy_native_1createAlphaShader(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ShaderFactoryInterface>(nativeRef);
        auto r = ref->createAlphaShader();
        return ::djinni::release(::djinni_generated::NativeAlphaShaderInterface::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_ch_ubique_mapscore_shared_graphics_shader_ShaderFactoryInterface_00024CppProxy_native_1createColorLineShader(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ShaderFactoryInterface>(nativeRef);
        auto r = ref->createColorLineShader();
        return ::djinni::release(::djinni_generated::NativeColorLineShaderInterface::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_ch_ubique_mapscore_shared_graphics_shader_ShaderFactoryInterface_00024CppProxy_native_1createColorShader(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::ShaderFactoryInterface>(nativeRef);
        auto r = ref->createColorShader();
        return ::djinni::release(::djinni_generated::NativeColorShaderInterface::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
