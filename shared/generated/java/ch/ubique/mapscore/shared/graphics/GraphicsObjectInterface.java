// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from graphicsobjects.djinni

package ch.ubique.mapscore.shared.graphics;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class GraphicsObjectInterface {
    /** Returns true, if graphics object is ready to be drawn */
    public abstract boolean isReady();

    /** Ensure calling on graphics thread */
    public abstract void setup();

    /** Clear graphics object and invalidate isReady */
    public abstract void clear();

    /** Render the graphics object; ensure calling on graphics thread */
    public abstract void render(ch.ubique.mapscore.shared.graphics.RenderingContext context);

    private static final class CppProxy extends GraphicsObjectInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public boolean isReady()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_isReady(this.nativeRef);
        }
        private native boolean native_isReady(long _nativeRef);

        @Override
        public void setup()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setup(this.nativeRef);
        }
        private native void native_setup(long _nativeRef);

        @Override
        public void clear()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_clear(this.nativeRef);
        }
        private native void native_clear(long _nativeRef);

        @Override
        public void render(ch.ubique.mapscore.shared.graphics.RenderingContext context)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_render(this.nativeRef, context);
        }
        private native void native_render(long _nativeRef, ch.ubique.mapscore.shared.graphics.RenderingContext context);
    }
}
