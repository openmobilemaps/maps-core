// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

#pragma once

#include "RenderTargetTexture.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeRenderTargetTexture final : ::djinni::JniInterface<::RenderTargetTexture, NativeRenderTargetTexture> {
public:
    using CppType = std::shared_ptr<::RenderTargetTexture>;
    using CppOptType = std::shared_ptr<::RenderTargetTexture>;
    using JniType = jobject;

    using Boxed = NativeRenderTargetTexture;

    ~NativeRenderTargetTexture();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeRenderTargetTexture>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeRenderTargetTexture>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeRenderTargetTexture();
    friend ::djinni::JniClass<NativeRenderTargetTexture>;
    friend ::djinni::JniInterface<::RenderTargetTexture, NativeRenderTargetTexture>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::RenderTargetTexture
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        /*not-null*/ std::shared_ptr<::TextureHolderInterface> textureHolder() override;

    private:
        friend ::djinni::JniInterface<::RenderTargetTexture, ::djinni_generated::NativeRenderTargetTexture>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/openmobilemaps/mapscore/shared/graphics/RenderTargetTexture") };
    const jmethodID method_textureHolder { ::djinni::jniGetMethodID(clazz.get(), "textureHolder", "()Lio/openmobilemaps/mapscore/shared/graphics/objects/TextureHolderInterface;") };
};

} // namespace djinni_generated
