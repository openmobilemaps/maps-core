// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from graphicsobjects.djinni

#import "MCIcosahedronInterface+Private.h"
#import "MCIcosahedronInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCGraphicsObjectInterface+Private.h"
#import "MCSharedBytes+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCIcosahedronInterfaceCppProxy : NSObject<MCIcosahedronInterface>

- (id)initWithCpp:(const std::shared_ptr<::IcosahedronInterface>&)cppRef;

@end

@implementation MCIcosahedronInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::IcosahedronInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::IcosahedronInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)setVertices:(nonnull MCSharedBytes *)vertices
            indices:(nonnull MCSharedBytes *)indices {
    try {
        _cppRefHandle.get()->setVertices(::djinni_generated::SharedBytes::toCpp(vertices),
                                         ::djinni_generated::SharedBytes::toCpp(indices));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCGraphicsObjectInterface>)asGraphicsObject {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->asGraphicsObject();
        return ::djinni_generated::GraphicsObjectInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class IcosahedronInterface::ObjcProxy final
: public ::IcosahedronInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::IcosahedronInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void setVertices(const ::SharedBytes & c_vertices, const ::SharedBytes & c_indices) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setVertices:(::djinni_generated::SharedBytes::fromCpp(c_vertices))
                                                          indices:(::djinni_generated::SharedBytes::fromCpp(c_indices))];
        }
    }
    /*not-null*/ std::shared_ptr<::GraphicsObjectInterface> asGraphicsObject() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() asGraphicsObject];
            return ::djinni_generated::GraphicsObjectInterface::toCpp(objcpp_result_);
        }
    }
};

} // namespace djinni_generated

namespace djinni_generated {

auto IcosahedronInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCIcosahedronInterfaceCppProxy class]]) {
        return ((MCIcosahedronInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto IcosahedronInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCIcosahedronInterfaceCppProxy>(cpp);
}

} // namespace djinni_generated

@end
