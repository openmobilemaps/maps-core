// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from layers.djinni

#include "NativeTiles2dMapLayerConfig.h"  // my header
#include "Marshal.hpp"
#include "NativeRectD.h"

namespace djinni_generated {

NativeTiles2dMapLayerConfig::NativeTiles2dMapLayerConfig() : ::djinni::JniInterface<::Tiles2dMapLayerConfig, NativeTiles2dMapLayerConfig>("ch/ubique/mapscore/shared/map/layers/Tiles2dMapLayerConfig$CppProxy") {}

NativeTiles2dMapLayerConfig::~NativeTiles2dMapLayerConfig() = default;

NativeTiles2dMapLayerConfig::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeTiles2dMapLayerConfig::JavaProxy::~JavaProxy() = default;

::RectD NativeTiles2dMapLayerConfig::JavaProxy::getBounds() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTiles2dMapLayerConfig>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getBounds);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeRectD::toCpp(jniEnv, jret);
}
std::string NativeTiles2dMapLayerConfig::JavaProxy::getTileUrl(int32_t c_x, int32_t c_y, int32_t c_zoom) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTiles2dMapLayerConfig>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getTileUrl,
                                                  ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_x)),
                                                  ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_y)),
                                                  ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_zoom)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
std::string NativeTiles2dMapLayerConfig::JavaProxy::getTileIdentifier(int32_t c_x, int32_t c_y, int32_t c_zoom) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTiles2dMapLayerConfig>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getTileIdentifier,
                                                  ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_x)),
                                                  ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_y)),
                                                  ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_zoom)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}

CJNIEXPORT void JNICALL Java_ch_ubique_mapscore_shared_map_layers_Tiles2dMapLayerConfig_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::Tiles2dMapLayerConfig>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT ::djinni_generated::NativeRectD::JniType JNICALL Java_ch_ubique_mapscore_shared_map_layers_Tiles2dMapLayerConfig_00024CppProxy_native_1getBounds(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::Tiles2dMapLayerConfig>(nativeRef);
        auto r = ref->getBounds();
        return ::djinni::release(::djinni_generated::NativeRectD::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_ch_ubique_mapscore_shared_map_layers_Tiles2dMapLayerConfig_00024CppProxy_native_1getTileUrl(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_x, jint j_y, jint j_zoom)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::Tiles2dMapLayerConfig>(nativeRef);
        auto r = ref->getTileUrl(::djinni::I32::toCpp(jniEnv, j_x),
                                 ::djinni::I32::toCpp(jniEnv, j_y),
                                 ::djinni::I32::toCpp(jniEnv, j_zoom));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jstring JNICALL Java_ch_ubique_mapscore_shared_map_layers_Tiles2dMapLayerConfig_00024CppProxy_native_1getTileIdentifier(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_x, jint j_y, jint j_zoom)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::Tiles2dMapLayerConfig>(nativeRef);
        auto r = ref->getTileIdentifier(::djinni::I32::toCpp(jniEnv, j_x),
                                        ::djinni::I32::toCpp(jniEnv, j_y),
                                        ::djinni::I32::toCpp(jniEnv, j_zoom));
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

}  // namespace djinni_generated
