// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from core.djinni

#include "NativeRenderingContextInterface.h"  // my header
#include "NativeColor.h"
#include "NativeVec2I.h"

namespace djinni_generated {

NativeRenderingContextInterface::NativeRenderingContextInterface() : ::djinni::JniInterface<::RenderingContextInterface, NativeRenderingContextInterface>("ch/ubique/mapscore/shared/graphics/RenderingContextInterface$CppProxy") {}

NativeRenderingContextInterface::~NativeRenderingContextInterface() = default;

NativeRenderingContextInterface::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeRenderingContextInterface::JavaProxy::~JavaProxy() = default;

void NativeRenderingContextInterface::JavaProxy::onSurfaceCreated() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeRenderingContextInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onSurfaceCreated);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeRenderingContextInterface::JavaProxy::setViewportSize(const ::Vec2I & c_size) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeRenderingContextInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setViewportSize,
                           ::djinni::get(::djinni_generated::NativeVec2I::fromCpp(jniEnv, c_size)));
    ::djinni::jniExceptionCheck(jniEnv);
}
::Vec2I NativeRenderingContextInterface::JavaProxy::getViewportSize() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeRenderingContextInterface>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getViewportSize);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeVec2I::toCpp(jniEnv, jret);
}
void NativeRenderingContextInterface::JavaProxy::setBackgroundColor(const ::Color & c_color) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeRenderingContextInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setBackgroundColor,
                           ::djinni::get(::djinni_generated::NativeColor::fromCpp(jniEnv, c_color)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeRenderingContextInterface::JavaProxy::setupDrawFrame() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeRenderingContextInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setupDrawFrame);
    ::djinni::jniExceptionCheck(jniEnv);
}

CJNIEXPORT void JNICALL Java_ch_ubique_mapscore_shared_graphics_RenderingContextInterface_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::RenderingContextInterface>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_ch_ubique_mapscore_shared_graphics_RenderingContextInterface_00024CppProxy_native_1onSurfaceCreated(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::RenderingContextInterface>(nativeRef);
        ref->onSurfaceCreated();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_ch_ubique_mapscore_shared_graphics_RenderingContextInterface_00024CppProxy_native_1setViewportSize(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::NativeVec2I::JniType j_size)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::RenderingContextInterface>(nativeRef);
        ref->setViewportSize(::djinni_generated::NativeVec2I::toCpp(jniEnv, j_size));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT ::djinni_generated::NativeVec2I::JniType JNICALL Java_ch_ubique_mapscore_shared_graphics_RenderingContextInterface_00024CppProxy_native_1getViewportSize(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::RenderingContextInterface>(nativeRef);
        auto r = ref->getViewportSize();
        return ::djinni::release(::djinni_generated::NativeVec2I::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_ch_ubique_mapscore_shared_graphics_RenderingContextInterface_00024CppProxy_native_1setBackgroundColor(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::NativeColor::JniType j_color)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::RenderingContextInterface>(nativeRef);
        ref->setBackgroundColor(::djinni_generated::NativeColor::toCpp(jniEnv, j_color));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_ch_ubique_mapscore_shared_graphics_RenderingContextInterface_00024CppProxy_native_1setupDrawFrame(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::RenderingContextInterface>(nativeRef);
        ref->setupDrawFrame();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
