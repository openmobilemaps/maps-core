// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from map_helpers.djinni

#include "NativePerformanceLoggerInterface.h"  // my header
#include "Marshal.hpp"
#include "NativeLoggerData.h"

namespace djinni_generated {

NativePerformanceLoggerInterface::NativePerformanceLoggerInterface() : ::djinni::JniInterface<::PerformanceLoggerInterface, NativePerformanceLoggerInterface>("io/openmobilemaps/mapscore/shared/map/PerformanceLoggerInterface$CppProxy") {}

NativePerformanceLoggerInterface::~NativePerformanceLoggerInterface() = default;

NativePerformanceLoggerInterface::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativePerformanceLoggerInterface::JavaProxy::~JavaProxy() = default;

std::string NativePerformanceLoggerInterface::JavaProxy::getLoggerName() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePerformanceLoggerInterface>::get();
    auto jret = (jstring)jniEnv->CallObjectMethod(Handle::get().get(), data.method_getLoggerName);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::String::toCpp(jniEnv, jret);
}
void NativePerformanceLoggerInterface::JavaProxy::startLog(const std::string & c_id) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePerformanceLoggerInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_startLog,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_id)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativePerformanceLoggerInterface::JavaProxy::endLog(const std::string & c_id) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePerformanceLoggerInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_endLog,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_id)));
    ::djinni::jniExceptionCheck(jniEnv);
}
std::optional<::LoggerData> NativePerformanceLoggerInterface::JavaProxy::getStatistics(const std::string & c_id) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePerformanceLoggerInterface>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getStatistics,
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_id)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::Optional<std::optional, ::djinni_generated::NativeLoggerData>::toCpp(jniEnv, jret);
}
std::vector<::LoggerData> NativePerformanceLoggerInterface::JavaProxy::getAllStatistics() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePerformanceLoggerInterface>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getAllStatistics);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::List<::djinni_generated::NativeLoggerData>::toCpp(jniEnv, jret);
}
void NativePerformanceLoggerInterface::JavaProxy::resetData() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePerformanceLoggerInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_resetData);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativePerformanceLoggerInterface::JavaProxy::setLoggingEnabled(bool c_enabled) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativePerformanceLoggerInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setLoggingEnabled,
                           ::djinni::get(::djinni::Bool::fromCpp(jniEnv, c_enabled)));
    ::djinni::jniExceptionCheck(jniEnv);
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_PerformanceLoggerInterface_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        delete reinterpret_cast<::djinni::CppProxyHandle<::PerformanceLoggerInterface>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jstring JNICALL Java_io_openmobilemaps_mapscore_shared_map_PerformanceLoggerInterface_00024CppProxy_native_1getLoggerName(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::PerformanceLoggerInterface>(nativeRef);
        auto r = ref->getLoggerName();
        return ::djinni::release(::djinni::String::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_PerformanceLoggerInterface_00024CppProxy_native_1startLog(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_id)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::PerformanceLoggerInterface>(nativeRef);
        ref->startLog(::djinni::String::toCpp(jniEnv, j_id));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_PerformanceLoggerInterface_00024CppProxy_native_1endLog(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_id)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::PerformanceLoggerInterface>(nativeRef);
        ref->endLog(::djinni::String::toCpp(jniEnv, j_id));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_io_openmobilemaps_mapscore_shared_map_PerformanceLoggerInterface_00024CppProxy_native_1getStatistics(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_id)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::PerformanceLoggerInterface>(nativeRef);
        auto r = ref->getStatistics(::djinni::String::toCpp(jniEnv, j_id));
        return ::djinni::release(::djinni::Optional<std::optional, ::djinni_generated::NativeLoggerData>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jobject JNICALL Java_io_openmobilemaps_mapscore_shared_map_PerformanceLoggerInterface_00024CppProxy_native_1getAllStatistics(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::PerformanceLoggerInterface>(nativeRef);
        auto r = ref->getAllStatistics();
        return ::djinni::release(::djinni::List<::djinni_generated::NativeLoggerData>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_PerformanceLoggerInterface_00024CppProxy_native_1resetData(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::PerformanceLoggerInterface>(nativeRef);
        ref->resetData();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_PerformanceLoggerInterface_00024CppProxy_native_1setLoggingEnabled(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jboolean j_enabled)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::PerformanceLoggerInterface>(nativeRef);
        ref->setLoggingEnabled(::djinni::Bool::toCpp(jniEnv, j_enabled));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

} // namespace djinni_generated
