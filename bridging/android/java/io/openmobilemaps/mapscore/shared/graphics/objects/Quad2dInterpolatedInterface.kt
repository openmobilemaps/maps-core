// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from graphicsobjects.djinni

package io.openmobilemaps.mapscore.shared.graphics.objects

import com.snapchat.djinni.NativeObjectManager
import java.util.concurrent.atomic.AtomicBoolean

abstract class Quad2dInterpolatedInterface {

    abstract fun setFrame(frame: io.openmobilemaps.mapscore.shared.graphics.common.Quad2dD, textureCoordinates: io.openmobilemaps.mapscore.shared.graphics.common.RectD)

    abstract fun loadTextures(context: io.openmobilemaps.mapscore.shared.graphics.RenderingContextInterface, textureHolder1: TextureHolderInterface, textureHolder2: TextureHolderInterface)

    abstract fun loadColorLegendTexture(context: io.openmobilemaps.mapscore.shared.graphics.RenderingContextInterface, textureHolder: TextureHolderInterface)

    abstract fun removeTextures()

    abstract fun asGraphicsObject(): GraphicsObjectInterface

    abstract fun asMaskingObject(): MaskingObjectInterface

    private class CppProxy : Quad2dInterpolatedInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
            NativeObjectManager.register(this, nativeRef)
        }

        external fun nativeDestroy(nativeRef: Long)

        override fun setFrame(frame: io.openmobilemaps.mapscore.shared.graphics.common.Quad2dD, textureCoordinates: io.openmobilemaps.mapscore.shared.graphics.common.RectD) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setFrame(this.nativeRef, frame, textureCoordinates)
        }
        private external fun native_setFrame(_nativeRef: Long, frame: io.openmobilemaps.mapscore.shared.graphics.common.Quad2dD, textureCoordinates: io.openmobilemaps.mapscore.shared.graphics.common.RectD)

        override fun loadTextures(context: io.openmobilemaps.mapscore.shared.graphics.RenderingContextInterface, textureHolder1: TextureHolderInterface, textureHolder2: TextureHolderInterface) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_loadTextures(this.nativeRef, context, textureHolder1, textureHolder2)
        }
        private external fun native_loadTextures(_nativeRef: Long, context: io.openmobilemaps.mapscore.shared.graphics.RenderingContextInterface, textureHolder1: TextureHolderInterface, textureHolder2: TextureHolderInterface)

        override fun loadColorLegendTexture(context: io.openmobilemaps.mapscore.shared.graphics.RenderingContextInterface, textureHolder: TextureHolderInterface) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_loadColorLegendTexture(this.nativeRef, context, textureHolder)
        }
        private external fun native_loadColorLegendTexture(_nativeRef: Long, context: io.openmobilemaps.mapscore.shared.graphics.RenderingContextInterface, textureHolder: TextureHolderInterface)

        override fun removeTextures() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_removeTextures(this.nativeRef)
        }
        private external fun native_removeTextures(_nativeRef: Long)

        override fun asGraphicsObject(): GraphicsObjectInterface {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_asGraphicsObject(this.nativeRef)
        }
        private external fun native_asGraphicsObject(_nativeRef: Long): GraphicsObjectInterface

        override fun asMaskingObject(): MaskingObjectInterface {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_asMaskingObject(this.nativeRef)
        }
        private external fun native_asMaskingObject(_nativeRef: Long): MaskingObjectInterface
    }
}
