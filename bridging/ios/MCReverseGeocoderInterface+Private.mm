// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from reverse_geocoder.djinni

#import "MCReverseGeocoderInterface+Private.h"
#import "MCReverseGeocoderInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "MCCoord+Private.h"
#import "MCLoaderInterface+Private.h"
#import "MCVectorLayerFeatureCoordInfo+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCReverseGeocoderInterface ()

- (id)initWithCpp:(const std::shared_ptr<::ReverseGeocoderInterface>&)cppRef;

@end

@implementation MCReverseGeocoderInterface {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ReverseGeocoderInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ReverseGeocoderInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable MCReverseGeocoderInterface *)create:(nullable id<MCLoaderInterface>)loader
                                tileUrlTemplate:(nonnull NSString *)tileUrlTemplate
                                      zoomLevel:(int32_t)zoomLevel {
    try {
        auto objcpp_result_ = ::ReverseGeocoderInterface::create(::djinni_generated::LoaderInterface::toCpp(loader),
                                                                 ::djinni::String::toCpp(tileUrlTemplate),
                                                                 ::djinni::I32::toCpp(zoomLevel));
        return ::djinni_generated::ReverseGeocoderInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<MCVectorLayerFeatureCoordInfo *> *)reverseGeocode:(nonnull MCCoord *)coord
                                                     thresholdMeters:(int64_t)thresholdMeters {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->reverseGeocode(::djinni_generated::Coord::toCpp(coord),
                                                                  ::djinni::I64::toCpp(thresholdMeters));
        return ::djinni::List<::djinni_generated::VectorLayerFeatureCoordInfo>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable MCVectorLayerFeatureCoordInfo *)reverseGeocodeClosest:(nonnull MCCoord *)coord
                                                  thresholdMeters:(int64_t)thresholdMeters {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->reverseGeocodeClosest(::djinni_generated::Coord::toCpp(coord),
                                                                         ::djinni::I64::toCpp(thresholdMeters));
        return ::djinni::Optional<std::optional, ::djinni_generated::VectorLayerFeatureCoordInfo>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto ReverseGeocoderInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto ReverseGeocoderInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<MCReverseGeocoderInterface>(cpp);
}

} // namespace djinni_generated

@end
