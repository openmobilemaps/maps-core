// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from icon.djinni

#import "MCIconLayerCallbackInterface+Private.h"
#import "MCIconLayerCallbackInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCCoord+Private.h"
#import "MCIconInfoInterface+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCIconLayerCallbackInterfaceCppProxy : NSObject<MCIconLayerCallbackInterface>

- (id)initWithCpp:(const std::shared_ptr<::IconLayerCallbackInterface>&)cppRef;

@end

@implementation MCIconLayerCallbackInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::IconLayerCallbackInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::IconLayerCallbackInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (BOOL)onClickConfirmed:(nonnull NSArray<MCIconInfoInterface *> *)icons {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->onClickConfirmed(::djinni::List<::djinni_generated::IconInfoInterface>::toCpp(icons));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)onLongpress:(nonnull MCCoord *)coordinate
              icons:(nullable NSArray<MCIconInfoInterface *> *)icons {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->onLongpress(::djinni_generated::Coord::toCpp(coordinate),
                                                               ::djinni::Optional<std::optional, ::djinni::List<::djinni_generated::IconInfoInterface>>::toCpp(icons));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class IconLayerCallbackInterface::ObjcProxy final
: public ::IconLayerCallbackInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::IconLayerCallbackInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    bool onClickConfirmed(const std::vector<std::shared_ptr<::IconInfoInterface>> & c_icons) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() onClickConfirmed:(::djinni::List<::djinni_generated::IconInfoInterface>::fromCpp(c_icons))];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
    bool onLongpress(const ::Coord & c_coordinate, const std::optional<std::vector<std::shared_ptr<::IconInfoInterface>>> & c_icons) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() onLongpress:(::djinni_generated::Coord::fromCpp(c_coordinate))
                                                                                  icons:(::djinni::Optional<std::optional, ::djinni::List<::djinni_generated::IconInfoInterface>>::fromCpp(c_icons))];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto IconLayerCallbackInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCIconLayerCallbackInterfaceCppProxy class]]) {
        return ((MCIconLayerCallbackInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto IconLayerCallbackInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCIconLayerCallbackInterfaceCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
