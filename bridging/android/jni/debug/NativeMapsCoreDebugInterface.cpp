// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from debug.djinni

#include "NativeMapsCoreDebugInterface.h"  // my header
#include "Marshal.hpp"

namespace djinni_generated {

NativeMapsCoreDebugInterface::NativeMapsCoreDebugInterface() : ::djinni::JniInterface<::MapsCoreDebugInterface, NativeMapsCoreDebugInterface>("io/openmobilemaps/mapscore/shared/debug/MapsCoreDebugInterface$CppProxy") {}

NativeMapsCoreDebugInterface::~NativeMapsCoreDebugInterface() = default;

NativeMapsCoreDebugInterface::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeMapsCoreDebugInterface::JavaProxy::~JavaProxy() = default;

void NativeMapsCoreDebugInterface::JavaProxy::logMessage(int32_t c_code, const std::string & c_message) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeMapsCoreDebugInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_logMessage,
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_code)),
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_message)));
    ::djinni::jniExceptionCheck(jniEnv);
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_debug_MapsCoreDebugInterface_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::MapsCoreDebugInterface>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_debug_MapsCoreDebugInterface_00024CppProxy_native_1logMessage(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jint j_code, jstring j_message)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::MapsCoreDebugInterface>(nativeRef);
        ref->logMessage(::djinni::I32::toCpp(jniEnv, j_code),
                        ::djinni::String::toCpp(jniEnv, j_message));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
