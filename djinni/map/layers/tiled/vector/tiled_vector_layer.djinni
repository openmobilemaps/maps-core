@extern "../../../../yaml/tiled_2d_map_zoom_info.yaml"
@extern "../../../../yaml/loader_interface.yaml"
@extern "../../../../yaml/layer_interface.yaml"
@extern "../../../../yaml/tiled_2d_map_raster_layer_interface.yaml"
@extern "../../../../yaml/font_loader_interface.yaml"
@extern "../../../../yaml/texture_holder_interface.yaml"
@extern "../../../../yaml/color.yaml"
@extern "../../../../yaml/coord.yaml"
@extern "../../../../yaml/rect_i.yaml"
@extern "../../../../yaml/tiled_2d_map_ready_state_listener.yaml"

@extern "../../../../yaml/texture_loader_result.yaml"
@extern "../../../../yaml/data_loader_result.yaml"

@extern "../../../../../external/djinni/support-lib/future.yaml"

tiled_2d_map_vector_layer_interface = interface +c {

    # Creator method for a vector layer specified by a url to a style json and the compulsory loader interfaces
    static create_from_style_json(layer_name: string,
                                style_json_url: string,
                                loaders: list<loader_interface>,
                                font_loader: font_loader_interface): tiled_2d_map_vector_layer_interface;

    # Create a vector layer instance by fully providing a combination of properties, specifying the functionality of the layer. Non-optionals
    # are strictly needed in every case.
    # @param    layer_name  name for the created layer
    # @param    style_json  Optional string to specify a url to a style json or a style json string itself (see parameter "local_style_json")
    # @param    local_style_json  Optional flag to indicate whether parameter "style_json" is local style json string or the url to a style json. Default is false.
    # @param    loaders Mandatory list of data loaders, which are used in the provided order
    # @param    font_loader Mandatory interface to load font data
    # @param    local_data_provider When provided, the vector layer loads the style json, geojsons and the sprite infos via this interface
    # @param    custom_zoom_info    Optionally specify a custom zoom info
    # @param    symbol_delegate Optional texture provider, when layers in the style use the flag "icon-image-custom-provider"
    # @return   the interface to the newly configured layer
    static create_explicitly(layer_name: string,
                                  style_json: optional<string>,
                                  local_style_json: optional<bool>,
                                  loaders: list<loader_interface>,
                                  font_loader: font_loader_interface,
                                  local_data_provider: optional<tiled_2d_map_vector_layer_local_data_provider_interface>,
                                  custom_zoom_info: optional<tiled_2d_map_zoom_info>,
                                  symbol_delegate: optional<tiled_2d_map_vector_layer_symbol_delegate_interface>,
sourceUrlParams: optional<map<string, string>>
): tiled_2d_map_vector_layer_interface;

    set_selection_delegate(selection_delegate: optional<tiled_2d_map_vector_layer_selection_callback_interface>);

    asLayerInterface(): layer_interface;

    set_min_zoom_level_identifier(value: optional<i32>);
    get_min_zoom_level_identifier(): optional<i32>;

    set_max_zoom_level_identifier(value: optional<i32>);
    get_max_zoom_level_identifier(): optional<i32>;

    get_style_metadata_json(): optional<string>;

    set_feature_state(identifier: string, properties: map<string, vector_layer_feature_info_value>);

    set_global_state(properties: map<string, vector_layer_feature_info_value>);

    get_visible_point_feature_contexts(padding_pc: f32, source_layer: optional<string>): list<vector_layer_feature_coord_info>;

    set_ready_state_listener(listener: optional<tiled_2d_map_ready_state_listener>);

    reload_data_source(source_name: string);
    reload_local_data_source(source_name: string, geo_json: string);

    perform_click(coord: coord);
}

vector_layer_feature_info_value = record {
    string_val: optional<string>;
    double_val: optional<f64>;
    int_val: optional<i64>;
    bool_val: optional<bool>;
    color_val: optional<color>;
    list_float_val: optional<list<f32>>;
    list_string__val: optional<list<string>>;
}

feature_info_value_factory = interface +c {
    static create_string(value: string) : vector_layer_feature_info_value;
    static create_double(value: f64) : vector_layer_feature_info_value;
    static create_int(value: i64) : vector_layer_feature_info_value;
    static create_bool(value: bool) : vector_layer_feature_info_value;
    static create_color(value: color) : vector_layer_feature_info_value;
    static create_list_float(value: list<f32>) : vector_layer_feature_info_value;
    static create_list_string(value: list<string>) : vector_layer_feature_info_value;
}


vector_layer_feature_coord_info = record {
    feature_info: vector_layer_feature_info;
    coordinates: coord;
}

vector_layer_feature_info = record {
    identifier: string;
    properties: map<string, vector_layer_feature_info_value>;
}

tiled_2d_map_vector_layer_selection_callback_interface = interface +c +j +o {
    did_select_feature(feature_info: vector_layer_feature_info, layer_identifier: string, coord: coord): bool;
    did_multi_select_layer_features(feature_infos: list<vector_layer_feature_info>, layer_identifier: string, coord: coord): bool;
    did_click_background_confirmed(coord: coord) : bool;
}

tiled_2d_map_vector_layer_local_data_provider_interface = interface +c +j +o {
    get_style_json(): optional<string>;

    load_sprite_async(scale: i32): future<texture_loader_result>;
    load_sprite_json_async(scale: i32): future<data_loader_result>;
    load_geojson(source_name: string, url: string): future<data_loader_result>;
}

tiled_2d_map_vector_asset_info = record {
    feature_identifiers_uv: map<string, rect_i>;
    texture: optional<texture_holder_interface>;
}

tiled_2d_map_vector_layer_symbol_delegate_interface = interface +c +j +o {
    get_custom_assets_for(feature_infos: list<vector_layer_feature_info>, layer_identifier: string): list<tiled_2d_map_vector_asset_info>;
}
