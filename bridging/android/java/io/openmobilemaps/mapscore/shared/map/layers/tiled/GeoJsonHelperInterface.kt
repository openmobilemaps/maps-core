// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from geo_json_parser.djinni

package io.openmobilemaps.mapscore.shared.map.layers.tiled

import com.snapchat.djinni.NativeObjectManager
import java.util.concurrent.atomic.AtomicBoolean

abstract class GeoJsonHelperInterface {

    companion object {
        @JvmStatic
        external fun independentInstance(): GeoJsonHelperInterface
    }

    abstract fun geoJsonStringFromFeatureInfo(point: GeoJsonPoint): String

    abstract fun geoJsonStringFromFeatureInfos(points: ArrayList<GeoJsonPoint>): String

    private class CppProxy : GeoJsonHelperInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun geoJsonStringFromFeatureInfo(point: GeoJsonPoint): String {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_geoJsonStringFromFeatureInfo(this.nativeRef, point)
        }
        private external fun native_geoJsonStringFromFeatureInfo(_nativeRef: Long, point: GeoJsonPoint): String

        override fun geoJsonStringFromFeatureInfos(points: ArrayList<GeoJsonPoint>): String {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_geoJsonStringFromFeatureInfos(this.nativeRef, points)
        }
        private external fun native_geoJsonStringFromFeatureInfos(_nativeRef: Long, points: ArrayList<GeoJsonPoint>): String
    }
}
