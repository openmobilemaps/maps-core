// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from polygon.djinni

#import "MCPolygonLayerCallbackInterface+Private.h"
#import "MCPolygonLayerCallbackInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCPolygonInfo+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCPolygonLayerCallbackInterfaceCppProxy : NSObject<MCPolygonLayerCallbackInterface>

- (id)initWithCpp:(const std::shared_ptr<::PolygonLayerCallbackInterface>&)cppRef;

@end

@implementation MCPolygonLayerCallbackInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::PolygonLayerCallbackInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::PolygonLayerCallbackInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (BOOL)onClickConfirmed:(nonnull MCPolygonInfo *)polygon {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->onClickConfirmed(::djinni_generated::PolygonInfo::toCpp(polygon));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (BOOL)onClickUnconfirmed:(nonnull MCPolygonInfo *)polygon {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->onClickUnconfirmed(::djinni_generated::PolygonInfo::toCpp(polygon));
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class PolygonLayerCallbackInterface::ObjcProxy final
: public ::PolygonLayerCallbackInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::PolygonLayerCallbackInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    bool onClickConfirmed(const ::PolygonInfo & c_polygon) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() onClickConfirmed:(::djinni_generated::PolygonInfo::fromCpp(c_polygon))];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
    bool onClickUnconfirmed(const ::PolygonInfo & c_polygon) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() onClickUnconfirmed:(::djinni_generated::PolygonInfo::fromCpp(c_polygon))];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
};

} // namespace djinni_generated

namespace djinni_generated {

auto PolygonLayerCallbackInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCPolygonLayerCallbackInterfaceCppProxy class]]) {
        return ((MCPolygonLayerCallbackInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto PolygonLayerCallbackInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCPolygonLayerCallbackInterfaceCppProxy>(cpp);
}

} // namespace djinni_generated

@end
