// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from task_scheduler.djinni

#include "NativeTaskInterface.h"  // my header
#include "NativeTaskConfig.h"

namespace djinni_generated {

NativeTaskInterface::NativeTaskInterface() : ::djinni::JniInterface<::TaskInterface, NativeTaskInterface>("ch/ubique/mapscore/shared/map/scheduling/TaskInterface$CppProxy") {}

NativeTaskInterface::~NativeTaskInterface() = default;

NativeTaskInterface::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeTaskInterface::JavaProxy::~JavaProxy() = default;

::TaskConfig NativeTaskInterface::JavaProxy::getConfig() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTaskInterface>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getConfig);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeTaskConfig::toCpp(jniEnv, jret);
}
void NativeTaskInterface::JavaProxy::run() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeTaskInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_run);
    ::djinni::jniExceptionCheck(jniEnv);
}

CJNIEXPORT void JNICALL Java_ch_ubique_mapscore_shared_map_scheduling_TaskInterface_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::TaskInterface>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_ch_ubique_mapscore_shared_map_scheduling_TaskInterface_00024CppProxy_native_1getConfig(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::TaskInterface>(nativeRef);
        auto r = ref->getConfig();
        return ::djinni::release(::djinni_generated::NativeTaskConfig::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_ch_ubique_mapscore_shared_map_scheduling_TaskInterface_00024CppProxy_native_1run(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::TaskInterface>(nativeRef);
        ref->run();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
