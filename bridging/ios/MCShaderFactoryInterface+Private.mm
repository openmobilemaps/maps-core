// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from shader.djinni

#import "MCShaderFactoryInterface+Private.h"
#import "MCShaderFactoryInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCAlphaInstancedShaderInterface+Private.h"
#import "MCAlphaShaderInterface+Private.h"
#import "MCColorCircleShaderInterface+Private.h"
#import "MCColorShaderInterface+Private.h"
#import "MCLineGroupShaderInterface+Private.h"
#import "MCPolygonGroupShaderInterface+Private.h"
#import "MCPolygonPatternGroupShaderInterface+Private.h"
#import "MCRasterShaderInterface+Private.h"
#import "MCStretchInstancedShaderInterface+Private.h"
#import "MCStretchShaderInterface+Private.h"
#import "MCTextInstancedShaderInterface+Private.h"
#import "MCTextShaderInterface+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCShaderFactoryInterfaceCppProxy : NSObject<MCShaderFactoryInterface>

- (id)initWithCpp:(const std::shared_ptr<::ShaderFactoryInterface>&)cppRef;

@end

@implementation MCShaderFactoryInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ShaderFactoryInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ShaderFactoryInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nullable id<MCAlphaShaderInterface>)createAlphaShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createAlphaShader();
        return ::djinni_generated::AlphaShaderInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCAlphaShaderInterface>)createUnitSphereAlphaShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createUnitSphereAlphaShader();
        return ::djinni_generated::AlphaShaderInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCAlphaInstancedShaderInterface>)createAlphaInstancedShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createAlphaInstancedShader();
        return ::djinni_generated::AlphaInstancedShaderInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCLineGroupShaderInterface>)createLineGroupShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createLineGroupShader();
        return ::djinni_generated::LineGroupShaderInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCColorShaderInterface>)createUnitSphereColorShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createUnitSphereColorShader();
        return ::djinni_generated::ColorShaderInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCColorShaderInterface>)createColorShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createColorShader();
        return ::djinni_generated::ColorShaderInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCColorCircleShaderInterface>)createColorCircleShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createColorCircleShader();
        return ::djinni_generated::ColorCircleShaderInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCPolygonGroupShaderInterface>)createPolygonGroupShader:(BOOL)isStriped {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createPolygonGroupShader(::djinni::Bool::toCpp(isStriped));
        return ::djinni_generated::PolygonGroupShaderInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCPolygonPatternGroupShaderInterface>)createPolygonPatternGroupShader:(BOOL)fadeInPattern {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createPolygonPatternGroupShader(::djinni::Bool::toCpp(fadeInPattern));
        return ::djinni_generated::PolygonPatternGroupShaderInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCTextShaderInterface>)createTextShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createTextShader();
        return ::djinni_generated::TextShaderInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCTextInstancedShaderInterface>)createTextInstancedShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createTextInstancedShader();
        return ::djinni_generated::TextInstancedShaderInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCRasterShaderInterface>)createRasterShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createRasterShader();
        return ::djinni_generated::RasterShaderInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCRasterShaderInterface>)createUnitSphereRasterShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createUnitSphereRasterShader();
        return ::djinni_generated::RasterShaderInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCStretchShaderInterface>)createStretchShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createStretchShader();
        return ::djinni_generated::StretchShaderInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCStretchInstancedShaderInterface>)createStretchInstancedShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createStretchInstancedShader();
        return ::djinni_generated::StretchInstancedShaderInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCColorShaderInterface>)createIcosahedronColorShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createIcosahedronColorShader();
        return ::djinni_generated::ColorShaderInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class ShaderFactoryInterface::ObjcProxy final
: public ::ShaderFactoryInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::ShaderFactoryInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    /*not-null*/ std::shared_ptr<::AlphaShaderInterface> createAlphaShader() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createAlphaShader];
            return ::djinni_generated::AlphaShaderInterface::toCpp(objcpp_result_);
        }
    }
    /*not-null*/ std::shared_ptr<::AlphaShaderInterface> createUnitSphereAlphaShader() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createUnitSphereAlphaShader];
            return ::djinni_generated::AlphaShaderInterface::toCpp(objcpp_result_);
        }
    }
    /*not-null*/ std::shared_ptr<::AlphaInstancedShaderInterface> createAlphaInstancedShader() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createAlphaInstancedShader];
            return ::djinni_generated::AlphaInstancedShaderInterface::toCpp(objcpp_result_);
        }
    }
    /*not-null*/ std::shared_ptr<::LineGroupShaderInterface> createLineGroupShader() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createLineGroupShader];
            return ::djinni_generated::LineGroupShaderInterface::toCpp(objcpp_result_);
        }
    }
    /*not-null*/ std::shared_ptr<::ColorShaderInterface> createUnitSphereColorShader() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createUnitSphereColorShader];
            return ::djinni_generated::ColorShaderInterface::toCpp(objcpp_result_);
        }
    }
    /*not-null*/ std::shared_ptr<::ColorShaderInterface> createColorShader() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createColorShader];
            return ::djinni_generated::ColorShaderInterface::toCpp(objcpp_result_);
        }
    }
    /*not-null*/ std::shared_ptr<::ColorCircleShaderInterface> createColorCircleShader() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createColorCircleShader];
            return ::djinni_generated::ColorCircleShaderInterface::toCpp(objcpp_result_);
        }
    }
    /*not-null*/ std::shared_ptr<::PolygonGroupShaderInterface> createPolygonGroupShader(bool c_isStriped) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createPolygonGroupShader:(::djinni::Bool::fromCpp(c_isStriped))];
            return ::djinni_generated::PolygonGroupShaderInterface::toCpp(objcpp_result_);
        }
    }
    /*not-null*/ std::shared_ptr<::PolygonPatternGroupShaderInterface> createPolygonPatternGroupShader(bool c_fadeInPattern) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createPolygonPatternGroupShader:(::djinni::Bool::fromCpp(c_fadeInPattern))];
            return ::djinni_generated::PolygonPatternGroupShaderInterface::toCpp(objcpp_result_);
        }
    }
    /*not-null*/ std::shared_ptr<::TextShaderInterface> createTextShader() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createTextShader];
            return ::djinni_generated::TextShaderInterface::toCpp(objcpp_result_);
        }
    }
    /*not-null*/ std::shared_ptr<::TextInstancedShaderInterface> createTextInstancedShader() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createTextInstancedShader];
            return ::djinni_generated::TextInstancedShaderInterface::toCpp(objcpp_result_);
        }
    }
    /*not-null*/ std::shared_ptr<::RasterShaderInterface> createRasterShader() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createRasterShader];
            return ::djinni_generated::RasterShaderInterface::toCpp(objcpp_result_);
        }
    }
    /*not-null*/ std::shared_ptr<::RasterShaderInterface> createUnitSphereRasterShader() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createUnitSphereRasterShader];
            return ::djinni_generated::RasterShaderInterface::toCpp(objcpp_result_);
        }
    }
    /*not-null*/ std::shared_ptr<::StretchShaderInterface> createStretchShader() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createStretchShader];
            return ::djinni_generated::StretchShaderInterface::toCpp(objcpp_result_);
        }
    }
    /*not-null*/ std::shared_ptr<::StretchInstancedShaderInterface> createStretchInstancedShader() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createStretchInstancedShader];
            return ::djinni_generated::StretchInstancedShaderInterface::toCpp(objcpp_result_);
        }
    }
    /*not-null*/ std::shared_ptr<::ColorShaderInterface> createIcosahedronColorShader() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createIcosahedronColorShader];
            return ::djinni_generated::ColorShaderInterface::toCpp(objcpp_result_);
        }
    }
};

} // namespace djinni_generated

namespace djinni_generated {

auto ShaderFactoryInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCShaderFactoryInterfaceCppProxy class]]) {
        return ((MCShaderFactoryInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto ShaderFactoryInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCShaderFactoryInterfaceCppProxy>(cpp);
}

} // namespace djinni_generated

@end
