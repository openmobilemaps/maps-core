// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from map_helpers.djinni

#import "MCErrorManager+Private.h"
#import "MCErrorManager.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "MCErrorManagerListener+Private.h"
#import "MCTiledLayerError+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCErrorManager ()

- (id)initWithCpp:(const std::shared_ptr<::ErrorManager>&)cppRef;

@end

@implementation MCErrorManager {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::ErrorManager>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::ErrorManager>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable MCErrorManager *)create {
    try {
        auto objcpp_result_ = ::ErrorManager::create();
        return ::djinni_generated::ErrorManager::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)addTiledLayerError:(nonnull MCTiledLayerError *)error {
    try {
        _cppRefHandle.get()->addTiledLayerError(::djinni_generated::TiledLayerError::toCpp(error));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)removeError:(nonnull NSString *)url {
    try {
        _cppRefHandle.get()->removeError(::djinni::String::toCpp(url));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)removeAllErrorsForLayer:(nonnull NSString *)layerName {
    try {
        _cppRefHandle.get()->removeAllErrorsForLayer(::djinni::String::toCpp(layerName));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)clearAllErrors {
    try {
        _cppRefHandle.get()->clearAllErrors();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)addErrorListener:(nullable id<MCErrorManagerListener>)listener {
    try {
        _cppRefHandle.get()->addErrorListener(::djinni_generated::ErrorManagerListener::toCpp(listener));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)removeErrorListener:(nullable id<MCErrorManagerListener>)listener {
    try {
        _cppRefHandle.get()->removeErrorListener(::djinni_generated::ErrorManagerListener::toCpp(listener));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto ErrorManager::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto ErrorManager::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<MCErrorManager>(cpp);
}

} // namespace djinni_generated

@end
