// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

#include "NativeOpenGlRenderTargetInterface.h"  // my header
#include "Marshal.hpp"
#include "NativeRenderTargetInterface.h"
#include "NativeRenderingContextInterface.h"
#include "NativeVec2I.h"

namespace djinni_generated {

NativeOpenGlRenderTargetInterface::NativeOpenGlRenderTargetInterface() : ::djinni::JniInterface<::OpenGlRenderTargetInterface, NativeOpenGlRenderTargetInterface>("io/openmobilemaps/mapscore/shared/graphics/OpenGlRenderTargetInterface$CppProxy") {}

NativeOpenGlRenderTargetInterface::~NativeOpenGlRenderTargetInterface() = default;

NativeOpenGlRenderTargetInterface::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeOpenGlRenderTargetInterface::JavaProxy::~JavaProxy() = default;

/*not-null*/ std::shared_ptr<::RenderTargetInterface> NativeOpenGlRenderTargetInterface::JavaProxy::asRenderTargetInterface() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOpenGlRenderTargetInterface>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_asRenderTargetInterface);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeRenderTargetInterface::toCpp(jniEnv, jret);
}
void NativeOpenGlRenderTargetInterface::JavaProxy::setup(const ::Vec2I & c_size) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOpenGlRenderTargetInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_setup,
                           ::djinni::get(::djinni_generated::NativeVec2I::fromCpp(jniEnv, c_size)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeOpenGlRenderTargetInterface::JavaProxy::clear() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOpenGlRenderTargetInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_clear);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeOpenGlRenderTargetInterface::JavaProxy::bindFramebuffer(const /*not-null*/ std::shared_ptr<::RenderingContextInterface> & c_renderingContext) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOpenGlRenderTargetInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_bindFramebuffer,
                           ::djinni::get(::djinni_generated::NativeRenderingContextInterface::fromCpp(jniEnv, c_renderingContext)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeOpenGlRenderTargetInterface::JavaProxy::unbindFramebuffer() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOpenGlRenderTargetInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_unbindFramebuffer);
    ::djinni::jniExceptionCheck(jniEnv);
}
int32_t NativeOpenGlRenderTargetInterface::JavaProxy::getTextureId() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOpenGlRenderTargetInterface>::get();
    auto jret = jniEnv->CallIntMethod(Handle::get().get(), data.method_getTextureId);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::I32::toCpp(jniEnv, jret);
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_OpenGlRenderTargetInterface_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        delete reinterpret_cast<::djinni::CppProxyHandle<::OpenGlRenderTargetInterface>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_OpenGlRenderTargetInterface_00024CppProxy_native_1asRenderTargetInterface(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::OpenGlRenderTargetInterface>(nativeRef);
        auto r = ref->asRenderTargetInterface();
        return ::djinni::release(::djinni_generated::NativeRenderTargetInterface::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_OpenGlRenderTargetInterface_00024CppProxy_native_1setup(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, ::djinni_generated::NativeVec2I::JniType j_size)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::OpenGlRenderTargetInterface>(nativeRef);
        ref->setup(::djinni_generated::NativeVec2I::toCpp(jniEnv, j_size));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_OpenGlRenderTargetInterface_00024CppProxy_native_1clear(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::OpenGlRenderTargetInterface>(nativeRef);
        ref->clear();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_OpenGlRenderTargetInterface_00024CppProxy_native_1bindFramebuffer(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_renderingContext)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::OpenGlRenderTargetInterface>(nativeRef);
        ref->bindFramebuffer(::djinni_generated::NativeRenderingContextInterface::toCpp(jniEnv, j_renderingContext));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_OpenGlRenderTargetInterface_00024CppProxy_native_1unbindFramebuffer(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::OpenGlRenderTargetInterface>(nativeRef);
        ref->unbindFramebuffer();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jint JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_OpenGlRenderTargetInterface_00024CppProxy_native_1getTextureId(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::OpenGlRenderTargetInterface>(nativeRef);
        auto r = ref->getTextureId();
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

} // namespace djinni_generated
