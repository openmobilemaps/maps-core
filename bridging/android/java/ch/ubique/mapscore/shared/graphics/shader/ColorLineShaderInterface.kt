// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from shader.djinni

package ch.ubique.mapscore.shared.graphics.shader

import java.util.concurrent.atomic.AtomicBoolean

abstract class ColorLineShaderInterface {

    abstract fun setColor(red: Float, green: Float, blue: Float, alpha: Float)

    abstract fun setMiter(miter: Float)

    abstract fun asLineShaderProgramInterface(): LineShaderProgramInterface

    private class CppProxy : ColorLineShaderInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
        }

        private external fun nativeDestroy(nativeRef: Long)
        fun _djinni_private_destroy() {
            val destroyed = this.destroyed.getAndSet(true)
            if (!destroyed) nativeDestroy(this.nativeRef)
        }
        protected fun finalize() {
            _djinni_private_destroy()
        }

        override fun setColor(red: Float, green: Float, blue: Float, alpha: Float) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setColor(this.nativeRef, red, green, blue, alpha)
        }
        private external fun native_setColor(_nativeRef: Long, red: Float, green: Float, blue: Float, alpha: Float)

        override fun setMiter(miter: Float) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setMiter(this.nativeRef, miter)
        }
        private external fun native_setMiter(_nativeRef: Long, miter: Float)

        override fun asLineShaderProgramInterface(): LineShaderProgramInterface {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_asLineShaderProgramInterface(this.nativeRef)
        }
        private external fun native_asLineShaderProgramInterface(_nativeRef: Long): LineShaderProgramInterface
    }
}
