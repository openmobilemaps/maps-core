// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from touch_handler.djinni

package ch.ubique.mapscore.shared.map.controls;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class TouchHandlerInterface {
    public abstract void onTouchEvent(TouchEvent touchEvent);

    public abstract void addListener(TouchInterface listener);

    public abstract void removeListener(TouchInterface listener);

    private static final class CppProxy extends TouchHandlerInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void onTouchEvent(TouchEvent touchEvent)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_onTouchEvent(this.nativeRef, touchEvent);
        }
        private native void native_onTouchEvent(long _nativeRef, TouchEvent touchEvent);

        @Override
        public void addListener(TouchInterface listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_addListener(this.nativeRef, listener);
        }
        private native void native_addListener(long _nativeRef, TouchInterface listener);

        @Override
        public void removeListener(TouchInterface listener)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_removeListener(this.nativeRef, listener);
        }
        private native void native_removeListener(long _nativeRef, TouchInterface listener);
    }
}
