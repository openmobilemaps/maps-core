// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

package io.openmobilemaps.mapscore.shared.graphics

import com.snapchat.djinni.NativeObjectManager
import java.util.concurrent.atomic.AtomicBoolean

abstract class CameraInterface {

    abstract fun getVpMatrix(): ArrayList<Float>

    abstract fun getViewMatrix(): ArrayList<Float>

    abstract fun getScalingFactor(): Double

    abstract fun viewportSizeChanged()

    abstract fun project(position: io.openmobilemaps.mapscore.shared.map.coordinates.Coord): io.openmobilemaps.mapscore.shared.graphics.common.Vec2D

    private class CppProxy : CameraInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
            NativeObjectManager.register(this, nativeRef)
        }

        external fun nativeDestroy(nativeRef: Long)

        override fun getVpMatrix(): ArrayList<Float> {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getVpMatrix(this.nativeRef)
        }
        private external fun native_getVpMatrix(_nativeRef: Long): ArrayList<Float>

        override fun getViewMatrix(): ArrayList<Float> {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getViewMatrix(this.nativeRef)
        }
        private external fun native_getViewMatrix(_nativeRef: Long): ArrayList<Float>

        override fun getScalingFactor(): Double {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getScalingFactor(this.nativeRef)
        }
        private external fun native_getScalingFactor(_nativeRef: Long): Double

        override fun viewportSizeChanged() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_viewportSizeChanged(this.nativeRef)
        }
        private external fun native_viewportSizeChanged(_nativeRef: Long)

        override fun project(position: io.openmobilemaps.mapscore.shared.map.coordinates.Coord): io.openmobilemaps.mapscore.shared.graphics.common.Vec2D {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_project(this.nativeRef, position)
        }
        private external fun native_project(_nativeRef: Long, position: io.openmobilemaps.mapscore.shared.map.coordinates.Coord): io.openmobilemaps.mapscore.shared.graphics.common.Vec2D
    }
}
