// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from task_scheduler.djinni

package ch.ubique.mapscore.shared.map.scheduling

import java.util.concurrent.atomic.AtomicBoolean

abstract class SchedulerInterface {

    abstract fun addTask(task: TaskInterface)

    abstract fun removeTask(id: String)

    abstract fun clear()

    abstract fun pause()

    abstract fun resume()

    private class CppProxy : SchedulerInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
        }

        private external fun nativeDestroy(nativeRef: Long)
        fun _djinni_private_destroy() {
            val destroyed = this.destroyed.getAndSet(true)
            if (!destroyed) nativeDestroy(this.nativeRef)
        }
        protected fun finalize() {
            _djinni_private_destroy()
        }

        override fun addTask(task: TaskInterface) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_addTask(this.nativeRef, task)
        }
        private external fun native_addTask(_nativeRef: Long, task: TaskInterface)

        override fun removeTask(id: String) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_removeTask(this.nativeRef, id)
        }
        private external fun native_removeTask(_nativeRef: Long, id: String)

        override fun clear() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_clear(this.nativeRef)
        }
        private external fun native_clear(_nativeRef: Long)

        override fun pause() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_pause(this.nativeRef)
        }
        private external fun native_pause(_nativeRef: Long)

        override fun resume() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_resume(this.nativeRef)
        }
        private external fun native_resume(_nativeRef: Long)
    }
}
