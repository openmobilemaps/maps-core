// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from renderer.djinni

#import "GPHCRenderer+Private.h"
#import "GPHCRenderer.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIObjcWrapperCache+Private.h"
#import "GPHCCamera+Private.h"
#import "GPHCRenderPass+Private.h"
#import "GPHCRenderingContext+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface GPHCRendererCppProxy : NSObject<GPHCRenderer>

- (id)initWithCpp:(const std::shared_ptr<::Renderer>&)cppRef;

@end

@implementation GPHCRendererCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Renderer>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Renderer>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)addToRenderQueue:(nullable id<GPHCRenderPass>)renderPass {
    try {
        _cppRefHandle.get()->addToRenderQueue(::djinni_generated::RenderPass::toCpp(renderPass));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)drawFrame:(nullable id<GPHCRenderingContext>)renderingContext
           camera:(nullable id<GPHCCamera>)camera {
    try {
        _cppRefHandle.get()->drawFrame(::djinni_generated::RenderingContext::toCpp(renderingContext),
                                       ::djinni_generated::Camera::toCpp(camera));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class Renderer::ObjcProxy final
: public ::Renderer
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::Renderer;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void addToRenderQueue(const std::shared_ptr<::RenderPass> & c_renderPass) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() addToRenderQueue:(::djinni_generated::RenderPass::fromCpp(c_renderPass))];
        }
    }
    void drawFrame(const std::shared_ptr<::RenderingContext> & c_renderingContext, const std::shared_ptr<::Camera> & c_camera) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() drawFrame:(::djinni_generated::RenderingContext::fromCpp(c_renderingContext))
                                                         camera:(::djinni_generated::Camera::fromCpp(c_camera))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto Renderer::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[GPHCRendererCppProxy class]]) {
        return ((GPHCRendererCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto Renderer::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<GPHCRendererCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
