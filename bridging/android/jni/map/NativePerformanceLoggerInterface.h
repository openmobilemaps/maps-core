// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from map_helpers.djinni

#pragma once

#include "PerformanceLoggerInterface.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativePerformanceLoggerInterface final : ::djinni::JniInterface<::PerformanceLoggerInterface, NativePerformanceLoggerInterface> {
public:
    using CppType = std::shared_ptr<::PerformanceLoggerInterface>;
    using CppOptType = std::shared_ptr<::PerformanceLoggerInterface>;
    using JniType = jobject;

    using Boxed = NativePerformanceLoggerInterface;

    ~NativePerformanceLoggerInterface();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativePerformanceLoggerInterface>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativePerformanceLoggerInterface>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativePerformanceLoggerInterface();
    friend ::djinni::JniClass<NativePerformanceLoggerInterface>;
    friend ::djinni::JniInterface<::PerformanceLoggerInterface, NativePerformanceLoggerInterface>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::PerformanceLoggerInterface
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        std::string getLoggerName() override;
        void startLog(const std::string & id) override;
        void endLog(const std::string & id) override;
        std::optional<::LoggerData> getStatistics(const std::string & id) override;
        std::vector<::LoggerData> getAllStatistics() override;
        void resetData() override;
        void setLoggingEnabled(bool enabled) override;

    private:
        friend ::djinni::JniInterface<::PerformanceLoggerInterface, ::djinni_generated::NativePerformanceLoggerInterface>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/openmobilemaps/mapscore/shared/map/PerformanceLoggerInterface") };
    const jmethodID method_getLoggerName { ::djinni::jniGetMethodID(clazz.get(), "getLoggerName", "()Ljava/lang/String;") };
    const jmethodID method_startLog { ::djinni::jniGetMethodID(clazz.get(), "startLog", "(Ljava/lang/String;)V") };
    const jmethodID method_endLog { ::djinni::jniGetMethodID(clazz.get(), "endLog", "(Ljava/lang/String;)V") };
    const jmethodID method_getStatistics { ::djinni::jniGetMethodID(clazz.get(), "getStatistics", "(Ljava/lang/String;)Lio/openmobilemaps/mapscore/shared/map/LoggerData;") };
    const jmethodID method_getAllStatistics { ::djinni::jniGetMethodID(clazz.get(), "getAllStatistics", "()Ljava/util/ArrayList;") };
    const jmethodID method_resetData { ::djinni::jniGetMethodID(clazz.get(), "resetData", "()V") };
    const jmethodID method_setLoggingEnabled { ::djinni::jniGetMethodID(clazz.get(), "setLoggingEnabled", "(Z)V") };
};

} // namespace djinni_generated
