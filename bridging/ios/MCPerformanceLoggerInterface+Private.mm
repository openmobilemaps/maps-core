// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from map_helpers.djinni

#import "MCPerformanceLoggerInterface+Private.h"
#import "MCPerformanceLoggerInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCLoggerData+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCPerformanceLoggerInterfaceCppProxy : NSObject<MCPerformanceLoggerInterface>

- (id)initWithCpp:(const std::shared_ptr<::PerformanceLoggerInterface>&)cppRef;

@end

@implementation MCPerformanceLoggerInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::PerformanceLoggerInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::PerformanceLoggerInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull NSString *)getLoggerName {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getLoggerName();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)startLog:(nonnull NSString *)id {
    try {
        _cppRefHandle.get()->startLog(::djinni::String::toCpp(id));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)endLog:(nonnull NSString *)id {
    try {
        _cppRefHandle.get()->endLog(::djinni::String::toCpp(id));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable MCLoggerData *)getStatistics:(nonnull NSString *)id {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getStatistics(::djinni::String::toCpp(id));
        return ::djinni::Optional<std::optional, ::djinni_generated::LoggerData>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSArray<MCLoggerData *> *)getAllStatistics {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getAllStatistics();
        return ::djinni::List<::djinni_generated::LoggerData>::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)resetData {
    try {
        _cppRefHandle.get()->resetData();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setLoggingEnabled:(BOOL)enabled {
    try {
        _cppRefHandle.get()->setLoggingEnabled(::djinni::Bool::toCpp(enabled));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class PerformanceLoggerInterface::ObjcProxy final
: public ::PerformanceLoggerInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::PerformanceLoggerInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    std::string getLoggerName() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getLoggerName];
            return ::djinni::String::toCpp(objcpp_result_);
        }
    }
    void startLog(const std::string & c_id) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() startLog:(::djinni::String::fromCpp(c_id))];
        }
    }
    void endLog(const std::string & c_id) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() endLog:(::djinni::String::fromCpp(c_id))];
        }
    }
    std::optional<::LoggerData> getStatistics(const std::string & c_id) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getStatistics:(::djinni::String::fromCpp(c_id))];
            return ::djinni::Optional<std::optional, ::djinni_generated::LoggerData>::toCpp(objcpp_result_);
        }
    }
    std::vector<::LoggerData> getAllStatistics() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getAllStatistics];
            return ::djinni::List<::djinni_generated::LoggerData>::toCpp(objcpp_result_);
        }
    }
    void resetData() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() resetData];
        }
    }
    void setLoggingEnabled(bool c_enabled) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setLoggingEnabled:(::djinni::Bool::fromCpp(c_enabled))];
        }
    }
};

} // namespace djinni_generated

namespace djinni_generated {

auto PerformanceLoggerInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCPerformanceLoggerInterfaceCppProxy class]]) {
        return ((MCPerformanceLoggerInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto PerformanceLoggerInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCPerformanceLoggerInterfaceCppProxy>(cpp);
}

} // namespace djinni_generated

@end
