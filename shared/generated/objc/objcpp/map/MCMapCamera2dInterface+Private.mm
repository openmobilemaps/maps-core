// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from core.djinni

#import "MCMapCamera2dInterface+Private.h"
#import "MCMapCamera2dInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "MCCameraInterface+Private.h"
#import "MCMapCamera2dListenerInterface+Private.h"
#import "MCVec2F+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCMapCamera2dInterface ()

- (id)initWithCpp:(const std::shared_ptr<::MapCamera2dInterface>&)cppRef;

@end

@implementation MCMapCamera2dInterface {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::MapCamera2dInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::MapCamera2dInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable MCMapCamera2dInterface *)create:(float)screenDensityPpi {
    try {
        auto objcpp_result_ = ::MapCamera2dInterface::create(::djinni::F32::toCpp(screenDensityPpi));
        return ::djinni_generated::MapCamera2dInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)moveToCenterPosition:(nonnull MCVec2F *)position
                        zoom:(float)zoom
                    animated:(BOOL)animated {
    try {
        _cppRefHandle.get()->moveToCenterPosition(::djinni_generated::Vec2F::toCpp(position),
                                                  ::djinni::F32::toCpp(zoom),
                                                  ::djinni::Bool::toCpp(animated));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)moveToCenterPositon:(nonnull MCVec2F *)position
                   animated:(BOOL)animated {
    try {
        _cppRefHandle.get()->moveToCenterPositon(::djinni_generated::Vec2F::toCpp(position),
                                                 ::djinni::Bool::toCpp(animated));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull MCVec2F *)getCenterPosition {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getCenterPosition();
        return ::djinni_generated::Vec2F::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setZoom:(float)zoom
       animated:(BOOL)animated {
    try {
        _cppRefHandle.get()->setZoom(::djinni::F32::toCpp(zoom),
                                     ::djinni::Bool::toCpp(animated));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (float)getZoom {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getZoom();
        return ::djinni::F32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setPaddingLeft:(float)padding {
    try {
        _cppRefHandle.get()->setPaddingLeft(::djinni::F32::toCpp(padding));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setPaddingRight:(float)padding {
    try {
        _cppRefHandle.get()->setPaddingRight(::djinni::F32::toCpp(padding));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setPaddingTop:(float)padding {
    try {
        _cppRefHandle.get()->setPaddingTop(::djinni::F32::toCpp(padding));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setPaddingBottom:(float)padding {
    try {
        _cppRefHandle.get()->setPaddingBottom(::djinni::F32::toCpp(padding));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)addListener:(nullable id<MCMapCamera2dListenerInterface>)listener {
    try {
        _cppRefHandle.get()->addListener(::djinni_generated::MapCamera2dListenerInterface::toCpp(listener));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)removeListener:(nullable id<MCMapCamera2dListenerInterface>)listener {
    try {
        _cppRefHandle.get()->removeListener(::djinni_generated::MapCamera2dListenerInterface::toCpp(listener));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCCameraInterface>)asCameraIntercace {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->asCameraIntercace();
        return ::djinni_generated::CameraInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto MapCamera2dInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto MapCamera2dInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<MCMapCamera2dInterface>(cpp);
}

}  // namespace djinni_generated

@end
