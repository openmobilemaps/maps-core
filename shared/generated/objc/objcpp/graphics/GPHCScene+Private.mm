// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from core.djinni

#import "GPHCScene+Private.h"
#import "GPHCScene.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "GPHCCameraInterface+Private.h"
#import "GPHCGraphicsObjectFactoryInterface+Private.h"
#import "GPHCRendererInterface+Private.h"
#import "GPHCRenderingContextInterface+Private.h"
#import "GPHCShaderFactoryInterface+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface GPHCScene ()

- (id)initWithCpp:(const std::shared_ptr<::Scene>&)cppRef;

@end

@implementation GPHCScene {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Scene>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Scene>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

+ (nullable GPHCScene *)create:(nullable id<GPHCGraphicsObjectFactoryInterface>)graphicsFactory
                 shaderFactory:(nullable id<GPHCShaderFactoryInterface>)shaderFactory {
    try {
        auto objcpp_result_ = ::Scene::create(::djinni_generated::GraphicsObjectFactoryInterface::toCpp(graphicsFactory),
                                              ::djinni_generated::ShaderFactoryInterface::toCpp(shaderFactory));
        return ::djinni_generated::Scene::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

+ (nullable GPHCScene *)createWithOpenGl {
    try {
        auto objcpp_result_ = ::Scene::createWithOpenGl();
        return ::djinni_generated::Scene::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setRenderingContext:(nullable id<GPHCRenderingContextInterface>)renderingContext {
    try {
        _cppRefHandle.get()->setRenderingContext(::djinni_generated::RenderingContextInterface::toCpp(renderingContext));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<GPHCRenderingContextInterface>)getRenderingContext {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getRenderingContext();
        return ::djinni_generated::RenderingContextInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setCamera:(nullable id<GPHCCameraInterface>)camera {
    try {
        _cppRefHandle.get()->setCamera(::djinni_generated::CameraInterface::toCpp(camera));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<GPHCCameraInterface>)getCamera {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getCamera();
        return ::djinni_generated::CameraInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<GPHCRendererInterface>)getRenderer {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getRenderer();
        return ::djinni_generated::RendererInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)drawFrame {
    try {
        _cppRefHandle.get()->drawFrame();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)clear {
    try {
        _cppRefHandle.get()->clear();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto Scene::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto Scene::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<GPHCScene>(cpp);
}

}  // namespace djinni_generated

@end
