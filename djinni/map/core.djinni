@extern "../yaml/vec_2_f.yaml"
@extern "../yaml/vec_2_i.yaml"
@extern "../yaml/rect_i.yaml"
@extern "../yaml/scheduler_interface.yaml"
@extern "../yaml/touch_handler_interface.yaml"
@extern "../yaml/shader_factory_interface.yaml"
@extern "../yaml/graphics_object_factory_interface.yaml"
@extern "../yaml/camera_interface.yaml"
@extern "../yaml/scene_interface.yaml"
@extern "../yaml/rendering_context_interface.yaml"
@extern "../yaml/map_coordinate_system.yaml"
@extern "../yaml/coordinate_conversion_helper_interface.yaml"
@extern "../yaml/coord.yaml"
@extern "../yaml/rect_coord.yaml"
@extern "../yaml/map_camera_listener_interface.yaml"
@extern "../yaml/color.yaml"
@extern "../yaml/render_pass_interface.yaml"
@extern "../yaml/compute_pass_interface.yaml"
@extern "../yaml/masking_object_interface.yaml"
@extern "../yaml/error_manager.yaml"
@extern "../yaml/performance_logger_interface.yaml"

map_interface = interface +c {
    static create(graphics_factory: graphics_object_factory_interface, shader_factory: shader_factory_interface, rendering_context: rendering_context_interface, map_config: map_config, scheduler: scheduler_interface, pixel_density: f32, is_3_d: bool) : map_interface;
    static createWithOpenGl(map_config: map_config, scheduler: scheduler_interface, pixel_density: f32, is_3_d: bool) : map_interface;

    set_callback_handler(callback_interface: optional<map_callback_interface>);

    get_graphics_object_factory() : graphics_object_factory_interface;
    get_shader_factory() : shader_factory_interface;

    get_scheduler() : scheduler_interface;
    get_rendering_context() : rendering_context_interface;
    get_map_config() : map_config;
    get_coordinate_converter_helper() : coordinate_conversion_helper_interface;

    set_camera(camera: map_camera_interface);
    get_camera() : map_camera_interface;

    set_touch_handler(touch_handler: touch_handler_interface);
    get_touch_handler() : touch_handler_interface;

    set_performance_loggers(performance_loggers: list<performance_logger_interface>);
    get_performance_loggers() : list<performance_logger_interface>;

    get_layers(): list<layer_interface>;
    get_layers_indexed(): list<indexed_layer_interface>;

    add_layer(layer: layer_interface);
    insert_layer_at(layer: layer_interface, at_index: i32);
    insert_layer_above(layer: layer_interface, above: layer_interface);
    insert_layer_below(layer: layer_interface, below: layer_interface);

    remove_layer(layer: layer_interface);

    set_viewport_size(size: vec_2_i);
    set_background_color(color: color);

	is_3d(): bool;

    invalidate();

    prepare();

    # Must be called on the rendering thread!
    draw_frame();

    # Must be called on the rendering thread!
    compute();

    # Must be called on the rendering thread!
    resume();

    # Must be called on the rendering thread!
    pause();

    destroy();

    # changes bounds to bounds, checks all layers for readiness, and updates callbacks, timeout in
    # seconds, always draw the frame when state is updated in the ready callbacks
    draw_ready_frame(bounds: rect_coord, timeout: f32, callbacks: map_ready_callback_interface);

    force_reload();
}

indexed_layer_interface = interface +c +j +o {
	get_layer_interface() : layer_interface;
	get_index() : i32;
}

map_callback_interface = interface +c +j +o {
    invalidate();
    on_map_resumed();
}

map_ready_callback_interface = interface +j +o {
    state_did_update(state: layer_ready_state);
}

layer_ready_state = enum {
    ready;
    not_ready;
    error;
    timeout_error;
}

map_config = record {
    map_coordinate_system: map_coordinate_system;
}

layer_interface = interface +c +j +o {
    set_masking_object(masking_object: optional<masking_object_interface>);
    update();
    build_render_passes(): list<render_pass_interface>;
    build_compute_passes(): list<compute_pass_interface>;
    onAdded(map_interface: map_interface, layer_index: i32);
    onRemoved();
    pause();
    resume();
    hide();
    show();

    set_alpha(alpha: f32);
    get_alpha(): f32;

    # optional rectangle, remove scissoring when not set
    set_scissor_rect(scissor_rect: optional<rect_i>);

    is_ready_to_render_offscreen() : layer_ready_state;
    enable_animations(enabled: bool);

    set_error_manager(error_manager: error_manager);
    force_reload();
}

map_camera_interface = interface +c {
    static create(map_interface: map_interface, screen_density_ppi: f32, is_3_d: bool): map_camera_interface;

	freeze(freeze: bool);

    move_to_center_position_zoom(center_position: coord, zoom: f64, animated: bool);
    move_to_center_position(center_position: coord, animated: bool);
    move_to_bounding_box(bounding_box: rect_coord, padding_pc: f32, animated: bool, min_zoom: optional<f64>, max_zoom: optional<f64>);
    get_center_position(): coord;

    set_zoom(zoom: f64, animated: bool);
    get_zoom(): f64;

    setRotation(angle: f32, animated: bool);
    get_rotation(): f32;

    set_min_zoom(min_zoom: f64);
    set_max_zoom(max_zoom: f64);

    get_min_zoom(): f64;
    get_max_zoom(): f64;

    set_bounds(bounds: rect_coord);
    get_bounds() : rect_coord;
    is_in_bounds(coords: coord) : bool;

    set_padding_left(padding: f32);
    set_padding_right(padding: f32);
    set_padding_top(padding: f32);
    set_padding_bottom(padding: f32);

    get_visible_rect() : rect_coord;
    get_padding_adjusted_visible_rect() : rect_coord;

    get_screen_density_ppi(): f32;

    # this method is called just before the update methods on all layers
    update();

    get_invariant_model_matrix(coordinate: coord, scale_invariant: bool, rotation_invariant: bool) : list<f32>;

    add_listener(listener: map_camera_listener_interface);
    remove_listener(listener: map_camera_listener_interface);
    notify_listener_bounds_change();

    coord_from_screen_position(pos_screen: vec_2_f): coord;
    coord_from_screen_position_zoom(pos_screen: vec_2_f, zoom: f32): coord;

    screen_pos_from_coord(coord: coord): vec_2_f;
    screen_pos_from_coord_zoom(coord: coord, zoom: f32): vec_2_f;

    map_units_from_pixels(distancePx: f64): f64;
    get_scaling_factor(): f64;

    # padding in percentage, where 1.0 = rect is half of full width and height
    coord_is_visible_on_screen(coord: coord, padding_pc: f32): bool;

    set_rotation_enabled(enabled: bool);
    set_snap_to_north_enabled(enabled: bool);
    set_bounds_restrict_whole_visible_rect(enabled: bool);

    as_camera_interface(): camera_interface;

    get_last_vp_matrix_d() : optional<list<f64>>;

    get_last_vp_matrix() : optional<list<f32>>;
    get_last_vp_matrix_view_bounds() : optional<rect_coord>;
    get_last_vp_matrix_rotation() : optional<f32>;
    get_last_vp_matrix_zoom() : optional<f32>;

    as_map_camera_3d(): optional<map_camera_3d_interface>;
}

map_camera_3d_interface = interface +c {
    get_camera_config(): camera_3d_config;

    set_camera_config(config: camera_3d_config, durationSeconds: optional<f32>, target_zoom: optional<f32>, target_coordinate: optional<coord>);
}

camera_interpolation = record {
    stops: list<camera_interpolation_value>;
}

camera_interpolation_value = record {
    # between 0 and 1
    stop: f32;

    value: f32;
}

camera_3d_config = record {
    key: string;
    allow_user_interaction: bool;
    rotation_speed: optional<f32>;
    animation_duration_ms: i32;

    min_zoom: f32;
    max_zoom: f32;

    pitch_interpolation_values: camera_interpolation;
    # vertical camera displacement in padding-reduced viewport in [-1.0, 1.0]
    vertical_displacement_interpolation_values: camera_interpolation;
}

camera_3d_config_factory = interface +c {
    static get_basic_config(): camera_3d_config;
    static get_restor_config(): camera_3d_config;
}
