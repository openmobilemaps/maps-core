// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from task_scheduler.djinni

#pragma once

#include "TaskInterface.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeTaskInterface final : ::djinni::JniInterface<::TaskInterface, NativeTaskInterface> {
public:
    using CppType = std::shared_ptr<::TaskInterface>;
    using CppOptType = std::shared_ptr<::TaskInterface>;
    using JniType = jobject;

    using Boxed = NativeTaskInterface;

    ~NativeTaskInterface();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeTaskInterface>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeTaskInterface>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeTaskInterface();
    friend ::djinni::JniClass<NativeTaskInterface>;
    friend ::djinni::JniInterface<::TaskInterface, NativeTaskInterface>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::TaskInterface
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        ::TaskConfig getConfig() override;
        void run() override;

    private:
        friend ::djinni::JniInterface<::TaskInterface, ::djinni_generated::NativeTaskInterface>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("ch/ubique/mapscore/shared/map/scheduling/TaskInterface") };
    const jmethodID method_getConfig { ::djinni::jniGetMethodID(clazz.get(), "getConfig", "()Lch/ubique/mapscore/shared/map/scheduling/TaskConfig;") };
    const jmethodID method_run { ::djinni::jniGetMethodID(clazz.get(), "run", "()V") };
};

}  // namespace djinni_generated
