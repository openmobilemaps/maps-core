// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from core.djinni

#include "NativeCameraInterface.h"  // my header
#include "Marshal.hpp"
#include "NativeCameraListenerInterface.h"

namespace djinni_generated {

NativeCameraInterface::NativeCameraInterface() : ::djinni::JniInterface<::CameraInterface, NativeCameraInterface>("ch/ubique/mapscore/shared/graphics/CameraInterface$CppProxy") {}

NativeCameraInterface::~NativeCameraInterface() = default;

NativeCameraInterface::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeCameraInterface::JavaProxy::~JavaProxy() = default;

int64_t NativeCameraInterface::JavaProxy::getMvpMatrix() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraInterface>::get();
    auto jret = jniEnv->CallLongMethod(Handle::get().get(), data.method_getMvpMatrix);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::I64::toCpp(jniEnv, jret);
}
void NativeCameraInterface::JavaProxy::addListener(const std::shared_ptr<::CameraListenerInterface> & c_listener) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_addListener,
                           ::djinni::get(::djinni_generated::NativeCameraListenerInterface::fromCpp(jniEnv, c_listener)));
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeCameraInterface::JavaProxy::removeListener(const std::shared_ptr<::CameraListenerInterface> & c_listener) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeCameraInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_removeListener,
                           ::djinni::get(::djinni_generated::NativeCameraListenerInterface::fromCpp(jniEnv, c_listener)));
    ::djinni::jniExceptionCheck(jniEnv);
}

CJNIEXPORT void JNICALL Java_ch_ubique_mapscore_shared_graphics_CameraInterface_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::CameraInterface>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jlong JNICALL Java_ch_ubique_mapscore_shared_graphics_CameraInterface_00024CppProxy_native_1getMvpMatrix(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::CameraInterface>(nativeRef);
        auto r = ref->getMvpMatrix();
        return ::djinni::release(::djinni::I64::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_ch_ubique_mapscore_shared_graphics_CameraInterface_00024CppProxy_native_1addListener(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_listener)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::CameraInterface>(nativeRef);
        ref->addListener(::djinni_generated::NativeCameraListenerInterface::toCpp(jniEnv, j_listener));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_ch_ubique_mapscore_shared_graphics_CameraInterface_00024CppProxy_native_1removeListener(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_listener)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::CameraInterface>(nativeRef);
        ref->removeListener(::djinni_generated::NativeCameraListenerInterface::toCpp(jniEnv, j_listener));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
