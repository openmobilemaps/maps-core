@extern "../../../external/djinni/support-lib/dataref.yaml"
@extern "../../../external/djinni/support-lib/future.yaml"
@extern "../../yaml/texture_holder_interface.yaml"
@extern "../../yaml/vec_2_d.yaml"
@extern "../../yaml/quad_2d_d.yaml"

# Ordered by severity
loader_status = enum {
    ok;
    noop;
    error_timeout;
    error_network;
    error_other;
    error_400;
    error_404;
}

texture_loader_result = record {
    data: optional<texture_holder_interface>;
    etag: optional<string>;
    status: loader_status;
    error_code: optional<string>;
}

data_loader_result = record {
    data: optional<DataRef>;
    etag: optional<string>;
    status: loader_status;
    error_code: optional<string>;
}

loader_interface = interface +c +j +o {
    load_texture(url: string, etag: optional<string>): texture_loader_result;
    load_data(url: string, etag: optional<string>): data_loader_result;
    
    load_texture_async(url: string, etag: optional<string>): future<texture_loader_result>;
    load_data_async(url: string, etag: optional<string>): future<data_loader_result>;
    
    cancel(url: string);
}

font = record {
    name: string;
}

font_data = record {
    info : font_wrapper;
    glyphs: list<font_glyph>;
}

font_wrapper = record {
    name: string;
    line_height: f64;
    base: f64;
    bitmap_size: vec_2_d;

    # font size rendered in distance field bitmap
    size: f64;
    # pixel distance corresponding to max value in signed distance field
    distance_range: f64;
}

font_glyph = record {
    char_code: string;
    advance: vec_2_d;
    bounding_box_size: vec_2_d;
    bearing: vec_2_d;
    # s0,t0,s1,t1
    uv: quad_2d_d;
}

font_loader_result = record {
    image_data: optional<texture_holder_interface>;
    font_data: optional<font_data>;
    status: loader_status;
}

font_loader_interface = interface +c +j +o {
    load_font(font: font): font_loader_result;
}
