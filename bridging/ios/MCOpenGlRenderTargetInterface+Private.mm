// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

#import "MCOpenGlRenderTargetInterface+Private.h"
#import "MCOpenGlRenderTargetInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCRenderTargetInterface+Private.h"
#import "MCRenderingContextInterface+Private.h"
#import "MCVec2I+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCOpenGlRenderTargetInterfaceCppProxy : NSObject<MCOpenGlRenderTargetInterface>

- (id)initWithCpp:(const std::shared_ptr<::OpenGlRenderTargetInterface>&)cppRef;

@end

@implementation MCOpenGlRenderTargetInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::OpenGlRenderTargetInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::OpenGlRenderTargetInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nullable id<MCRenderTargetInterface>)asRenderTargetInterface {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->asRenderTargetInterface();
        return ::djinni_generated::RenderTargetInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setup:(nonnull MCVec2I *)size {
    try {
        _cppRefHandle.get()->setup(::djinni_generated::Vec2I::toCpp(size));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)clear {
    try {
        _cppRefHandle.get()->clear();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)bindFramebuffer:(nullable id<MCRenderingContextInterface>)renderingContext {
    try {
        _cppRefHandle.get()->bindFramebuffer(::djinni_generated::RenderingContextInterface::toCpp(renderingContext));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)unbindFramebuffer {
    try {
        _cppRefHandle.get()->unbindFramebuffer();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (int32_t)getTextureId {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getTextureId();
        return ::djinni::I32::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class OpenGlRenderTargetInterface::ObjcProxy final
: public ::OpenGlRenderTargetInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::OpenGlRenderTargetInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    /*not-null*/ std::shared_ptr<::RenderTargetInterface> asRenderTargetInterface() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() asRenderTargetInterface];
            return ::djinni_generated::RenderTargetInterface::toCpp(objcpp_result_);
        }
    }
    void setup(const ::Vec2I & c_size) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setup:(::djinni_generated::Vec2I::fromCpp(c_size))];
        }
    }
    void clear() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() clear];
        }
    }
    void bindFramebuffer(const /*not-null*/ std::shared_ptr<::RenderingContextInterface> & c_renderingContext) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() bindFramebuffer:(::djinni_generated::RenderingContextInterface::fromCpp(c_renderingContext))];
        }
    }
    void unbindFramebuffer() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() unbindFramebuffer];
        }
    }
    int32_t getTextureId() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getTextureId];
            return ::djinni::I32::toCpp(objcpp_result_);
        }
    }
};

} // namespace djinni_generated

namespace djinni_generated {

auto OpenGlRenderTargetInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCOpenGlRenderTargetInterfaceCppProxy class]]) {
        return ((MCOpenGlRenderTargetInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto OpenGlRenderTargetInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCOpenGlRenderTargetInterfaceCppProxy>(cpp);
}

} // namespace djinni_generated

@end
