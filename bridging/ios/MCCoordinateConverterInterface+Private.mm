// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from coordinate_system.djinni

#import "MCCoordinateConverterInterface+Private.h"
#import "MCCoordinateConverterInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCCoord+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCCoordinateConverterInterfaceCppProxy : NSObject<MCCoordinateConverterInterface>

- (id)initWithCpp:(const std::shared_ptr<::CoordinateConverterInterface>&)cppRef;

@end

@implementation MCCoordinateConverterInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::CoordinateConverterInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::CoordinateConverterInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull MCCoord *)convert:(nonnull MCCoord *)coordinate {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->convert(::djinni_generated::Coord::toCpp(coordinate));
        return ::djinni_generated::Coord::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getFrom {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getFrom();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getTo {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getTo();
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class CoordinateConverterInterface::ObjcProxy final
: public ::CoordinateConverterInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::CoordinateConverterInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    ::Coord convert(const ::Coord & c_coordinate) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() convert:(::djinni_generated::Coord::fromCpp(c_coordinate))];
            return ::djinni_generated::Coord::toCpp(objcpp_result_);
        }
    }
    std::string getFrom() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getFrom];
            return ::djinni::String::toCpp(objcpp_result_);
        }
    }
    std::string getTo() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getTo];
            return ::djinni::String::toCpp(objcpp_result_);
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto CoordinateConverterInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCCoordinateConverterInterfaceCppProxy class]]) {
        return ((MCCoordinateConverterInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto CoordinateConverterInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCCoordinateConverterInterfaceCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
