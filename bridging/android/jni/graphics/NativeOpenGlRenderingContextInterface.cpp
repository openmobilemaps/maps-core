// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

#include "NativeOpenGlRenderingContextInterface.h"  // my header
#include "Marshal.hpp"
#include "NativeColor.h"
#include "NativeOpenGlRenderTargetInterface.h"
#include "NativeTextureFilterType.h"

namespace djinni_generated {

NativeOpenGlRenderingContextInterface::NativeOpenGlRenderingContextInterface() : ::djinni::JniInterface<::OpenGlRenderingContextInterface, NativeOpenGlRenderingContextInterface>("io/openmobilemaps/mapscore/shared/graphics/OpenGlRenderingContextInterface$CppProxy") {}

NativeOpenGlRenderingContextInterface::~NativeOpenGlRenderingContextInterface() = default;

NativeOpenGlRenderingContextInterface::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeOpenGlRenderingContextInterface::JavaProxy::~JavaProxy() = default;

void NativeOpenGlRenderingContextInterface::JavaProxy::resume() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOpenGlRenderingContextInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_resume);
    ::djinni::jniExceptionCheck(jniEnv);
}
void NativeOpenGlRenderingContextInterface::JavaProxy::pause() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOpenGlRenderingContextInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_pause);
    ::djinni::jniExceptionCheck(jniEnv);
}
/*not-null*/ std::shared_ptr<::OpenGlRenderTargetInterface> NativeOpenGlRenderingContextInterface::JavaProxy::getCreateRenderTarget(const std::string & c_name, ::TextureFilterType c_textureFilter, const ::Color & c_clearColor, bool c_usesDepthStencil) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOpenGlRenderingContextInterface>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getCreateRenderTarget,
                                         ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)),
                                         ::djinni::get(::djinni_generated::NativeTextureFilterType::fromCpp(jniEnv, c_textureFilter)),
                                         ::djinni::get(::djinni_generated::NativeColor::fromCpp(jniEnv, c_clearColor)),
                                         ::djinni::get(::djinni::Bool::fromCpp(jniEnv, c_usesDepthStencil)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni_generated::NativeOpenGlRenderTargetInterface::toCpp(jniEnv, jret);
}
void NativeOpenGlRenderingContextInterface::JavaProxy::deleteRenderTarget(const std::string & c_name) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOpenGlRenderingContextInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_deleteRenderTarget,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)));
    ::djinni::jniExceptionCheck(jniEnv);
}
std::vector</*not-null*/ std::shared_ptr<::OpenGlRenderTargetInterface>> NativeOpenGlRenderingContextInterface::JavaProxy::getRenderTargets() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOpenGlRenderingContextInterface>::get();
    auto jret = jniEnv->CallObjectMethod(Handle::get().get(), data.method_getRenderTargets);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::List<::djinni_generated::NativeOpenGlRenderTargetInterface>::toCpp(jniEnv, jret);
}
int32_t NativeOpenGlRenderingContextInterface::JavaProxy::getProgram(const std::string & c_name) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOpenGlRenderingContextInterface>::get();
    auto jret = jniEnv->CallIntMethod(Handle::get().get(), data.method_getProgram,
                                      ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)));
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::I32::toCpp(jniEnv, jret);
}
void NativeOpenGlRenderingContextInterface::JavaProxy::storeProgram(const std::string & c_name, int32_t c_program) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOpenGlRenderingContextInterface>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_storeProgram,
                           ::djinni::get(::djinni::String::fromCpp(jniEnv, c_name)),
                           ::djinni::get(::djinni::I32::fromCpp(jniEnv, c_program)));
    ::djinni::jniExceptionCheck(jniEnv);
}
float NativeOpenGlRenderingContextInterface::JavaProxy::getAspectRatio() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOpenGlRenderingContextInterface>::get();
    auto jret = jniEnv->CallFloatMethod(Handle::get().get(), data.method_getAspectRatio);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::F32::toCpp(jniEnv, jret);
}
int64_t NativeOpenGlRenderingContextInterface::JavaProxy::getDeltaTimeMs() {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeOpenGlRenderingContextInterface>::get();
    auto jret = jniEnv->CallLongMethod(Handle::get().get(), data.method_getDeltaTimeMs);
    ::djinni::jniExceptionCheck(jniEnv);
    return ::djinni::I64::toCpp(jniEnv, jret);
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_OpenGlRenderingContextInterface_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        delete reinterpret_cast<::djinni::CppProxyHandle<::OpenGlRenderingContextInterface>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_OpenGlRenderingContextInterface_00024CppProxy_native_1resume(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::OpenGlRenderingContextInterface>(nativeRef);
        ref->resume();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_OpenGlRenderingContextInterface_00024CppProxy_native_1pause(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::OpenGlRenderingContextInterface>(nativeRef);
        ref->pause();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_OpenGlRenderingContextInterface_00024CppProxy_native_1getCreateRenderTarget(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_name, ::djinni_generated::NativeTextureFilterType::JniType j_textureFilter, ::djinni_generated::NativeColor::JniType j_clearColor, jboolean j_usesDepthStencil)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::OpenGlRenderingContextInterface>(nativeRef);
        auto r = ref->getCreateRenderTarget(::djinni::String::toCpp(jniEnv, j_name),
                                            ::djinni_generated::NativeTextureFilterType::toCpp(jniEnv, j_textureFilter),
                                            ::djinni_generated::NativeColor::toCpp(jniEnv, j_clearColor),
                                            ::djinni::Bool::toCpp(jniEnv, j_usesDepthStencil));
        return ::djinni::release(::djinni_generated::NativeOpenGlRenderTargetInterface::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_OpenGlRenderingContextInterface_00024CppProxy_native_1deleteRenderTarget(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_name)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::OpenGlRenderingContextInterface>(nativeRef);
        ref->deleteRenderTarget(::djinni::String::toCpp(jniEnv, j_name));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_OpenGlRenderingContextInterface_00024CppProxy_native_1getRenderTargets(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::OpenGlRenderingContextInterface>(nativeRef);
        auto r = ref->getRenderTargets();
        return ::djinni::release(::djinni::List<::djinni_generated::NativeOpenGlRenderTargetInterface>::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jint JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_OpenGlRenderingContextInterface_00024CppProxy_native_1getProgram(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_name)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::OpenGlRenderingContextInterface>(nativeRef);
        auto r = ref->getProgram(::djinni::String::toCpp(jniEnv, j_name));
        return ::djinni::release(::djinni::I32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_OpenGlRenderingContextInterface_00024CppProxy_native_1storeProgram(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_name, jint j_program)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::OpenGlRenderingContextInterface>(nativeRef);
        ref->storeProgram(::djinni::String::toCpp(jniEnv, j_name),
                          ::djinni::I32::toCpp(jniEnv, j_program));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jfloat JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_OpenGlRenderingContextInterface_00024CppProxy_native_1getAspectRatio(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::OpenGlRenderingContextInterface>(nativeRef);
        auto r = ref->getAspectRatio();
        return ::djinni::release(::djinni::F32::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT jlong JNICALL Java_io_openmobilemaps_mapscore_shared_graphics_OpenGlRenderingContextInterface_00024CppProxy_native_1getDeltaTimeMs(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::OpenGlRenderingContextInterface>(nativeRef);
        auto r = ref->getDeltaTimeMs();
        return ::djinni::release(::djinni::I64::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

} // namespace djinni_generated
