// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from map_helpers.djinni

#pragma once

#include "LoggerData.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeLoggerData final {
public:
    using CppType = ::LoggerData;
    using JniType = jobject;

    using Boxed = NativeLoggerData;

    ~NativeLoggerData();

    static CppType toCpp(JNIEnv* jniEnv, JniType j);
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c);

private:
    NativeLoggerData();
    friend ::djinni::JniClass<NativeLoggerData>;

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("io/openmobilemaps/mapscore/shared/map/LoggerData") };
    const jmethodID jconstructor { ::djinni::jniGetMethodID(clazz.get(), "<init>", "(Ljava/lang/String;Ljava/util/ArrayList;IJJJDDD)V") };
    const jfieldID field_id { ::djinni::jniGetFieldID(clazz.get(), "id", "Ljava/lang/String;") };
    const jfieldID field_buckets { ::djinni::jniGetFieldID(clazz.get(), "buckets", "Ljava/util/ArrayList;") };
    const jfieldID field_bucketSizeMs { ::djinni::jniGetFieldID(clazz.get(), "bucketSizeMs", "I") };
    const jfieldID field_start { ::djinni::jniGetFieldID(clazz.get(), "start", "J") };
    const jfieldID field_end { ::djinni::jniGetFieldID(clazz.get(), "end", "J") };
    const jfieldID field_numSamples { ::djinni::jniGetFieldID(clazz.get(), "numSamples", "J") };
    const jfieldID field_average { ::djinni::jniGetFieldID(clazz.get(), "average", "D") };
    const jfieldID field_variance { ::djinni::jniGetFieldID(clazz.get(), "variance", "D") };
    const jfieldID field_stdDeviation { ::djinni::jniGetFieldID(clazz.get(), "stdDeviation", "D") };
};

} // namespace djinni_generated
