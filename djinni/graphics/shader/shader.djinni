@extern "../../yaml/rendering_context_interface.yaml"
@extern "../../yaml/line_style.yaml"
@extern "../../yaml/polygon_style.yaml"
@extern "../../yaml/vec_3_d.yaml"
@extern "../../yaml/rect_d.yaml"
@extern "../../yaml/shared_bytes.yaml"
@extern "../../yaml/color.yaml"

blend_mode = enum {
    normal;
    multiply;
}

shader_program_interface = interface +c +o {
    get_program_name() : string;
    setup_program(context: rendering_context_interface);
    pre_render(context: rendering_context_interface);
    set_blend_mode(blend_mode: blend_mode);
}

shader_factory_interface = interface +c +j +o {
    create_alpha_shader() : alpha_shader_interface;
    create_unit_sphere_alpha_shader() : alpha_shader_interface;

    create_alpha_instanced_shader(): alpha_instanced_shader_interface;
    create_unit_sphere_alpha_instanced_shader(): alpha_instanced_shader_interface;

    create_line_group_shader(): line_group_shader_interface;

    create_unit_sphere_color_shader() : color_shader_interface;
    create_color_shader() : color_shader_interface;

    create_color_circle_shader() : color_circle_shader_interface;
    create_unit_sphere_color_circle_shader() : color_circle_shader_interface;

    create_polygon_group_shader(is_striped: bool): polygon_group_shader_interface;
    create_polygon_pattern_group_shader(fade_in_pattern: bool): polygon_pattern_group_shader_interface;

    create_text_shader() : text_shader_interface;
    create_text_instanced_shader(): text_instanced_shader_interface;
    create_unit_sphere_text_instanced_shader(): text_instanced_shader_interface;

    create_raster_shader() : raster_shader_interface;
    create_unit_sphere_raster_shader() : raster_shader_interface;

    create_stretch_shader(): stretch_shader_interface;
    create_stretch_instanced_shader(): stretch_instanced_shader_interface;

    create_icosahedron_color_shader(): color_shader_interface;
}

raster_shader_style = record {
    opacity: f32;
    brightness_min: f32;
    brightness_max: f32;
    contrast: f32;
    saturation: f32;
    gamma: f32;

    const default_style: raster_shader_style = {
        opacity = 1.0,
        brightness_min = 0.0,
        brightness_max = 1.0,
        contrast = 0.0,
        saturation = 0.0,
        gamma = 1.0
    };
} deriving (eq, ord)

raster_shader_interface = interface +c +o {
    set_style(style: raster_shader_style);
    as_shader_program_interface() : shader_program_interface;
}

alpha_shader_interface = interface +c +o {
    update_alpha(value: f32);
    as_shader_program_interface() : shader_program_interface;
}

alpha_instanced_shader_interface = interface +c +o {
    as_shader_program_interface() : shader_program_interface;
}

stretch_shader_info = record {
    scaleX: f32;
    
    # all stretch infos are between 0 and 1
    stretchX0Begin: f32;
    stretchX0End: f32;
    stretchX1Begin: f32;
    stretchX1End: f32;

    scaleY: f32;
    # all stretch infos are between 0 and 1
    stretchY0Begin: f32;
    stretchY0End: f32;
    stretchY1Begin: f32;
    stretchY1End: f32;

    uv: rect_d;
}

stretch_shader_interface = interface +c +o {
    update_alpha(value: f32);
    update_stretch_info(info: stretch_shader_info);
    as_shader_program_interface() : shader_program_interface;
}

stretch_instanced_shader_interface = interface +c +o {
    as_shader_program_interface() : shader_program_interface;
}

color_shader_interface = interface +c +o {
    set_color(red: f32, green: f32, blue: f32, alpha: f32);
    as_shader_program_interface() : shader_program_interface;
}

line_group_shader_interface = interface +c +o {
    set_styles(styles: shared_bytes);
    set_dashing_scale_factor(factor: f32);
    as_shader_program_interface() : shader_program_interface;
}

color_circle_shader_interface = interface +c +o {
    set_color(red: f32, green: f32, blue: f32, alpha: f32);
    as_shader_program_interface() : shader_program_interface;
}

polygon_group_shader_interface = interface +c +o {
    set_styles(styles: shared_bytes);
    as_shader_program_interface() : shader_program_interface;
}

polygon_pattern_group_shader_interface = interface +c +o {
    as_shader_program_interface() : shader_program_interface;
}

text_shader_interface = interface +c +o {
    set_color(color: color);
    set_opacity(opacity: f32);
    set_halo_color(color: color, width: f64);
    as_shader_program_interface() : shader_program_interface;
}

text_instanced_shader_interface = interface +c +o {
    as_shader_program_interface() : shader_program_interface;
}
