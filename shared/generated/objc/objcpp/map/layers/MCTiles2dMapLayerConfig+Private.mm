// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from layers.djinni

#import "MCTiles2dMapLayerConfig+Private.h"
#import "MCTiles2dMapLayerConfig.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCRectD+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCTiles2dMapLayerConfigCppProxy : NSObject<MCTiles2dMapLayerConfig>

- (id)initWithCpp:(const std::shared_ptr<::Tiles2dMapLayerConfig>&)cppRef;

@end

@implementation MCTiles2dMapLayerConfigCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Tiles2dMapLayerConfig>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Tiles2dMapLayerConfig>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull MCRectD *)getBounds {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getBounds();
        return ::djinni_generated::RectD::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getTileUrl:(int32_t)x
                               y:(int32_t)y
                            zoom:(int32_t)zoom {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getTileUrl(::djinni::I32::toCpp(x),
                                                              ::djinni::I32::toCpp(y),
                                                              ::djinni::I32::toCpp(zoom));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nonnull NSString *)getTileIdentifier:(int32_t)x
                                      y:(int32_t)y
                                   zoom:(int32_t)zoom {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getTileIdentifier(::djinni::I32::toCpp(x),
                                                                     ::djinni::I32::toCpp(y),
                                                                     ::djinni::I32::toCpp(zoom));
        return ::djinni::String::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class Tiles2dMapLayerConfig::ObjcProxy final
: public ::Tiles2dMapLayerConfig
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::Tiles2dMapLayerConfig;
public:
    using ObjcProxyBase::ObjcProxyBase;
    ::RectD getBounds() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getBounds];
            return ::djinni_generated::RectD::toCpp(objcpp_result_);
        }
    }
    std::string getTileUrl(int32_t c_x, int32_t c_y, int32_t c_zoom) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getTileUrl:(::djinni::I32::fromCpp(c_x))
                                                                                     y:(::djinni::I32::fromCpp(c_y))
                                                                                  zoom:(::djinni::I32::fromCpp(c_zoom))];
            return ::djinni::String::toCpp(objcpp_result_);
        }
    }
    std::string getTileIdentifier(int32_t c_x, int32_t c_y, int32_t c_zoom) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() getTileIdentifier:(::djinni::I32::fromCpp(c_x))
                                                                                            y:(::djinni::I32::fromCpp(c_y))
                                                                                         zoom:(::djinni::I32::fromCpp(c_zoom))];
            return ::djinni::String::toCpp(objcpp_result_);
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto Tiles2dMapLayerConfig::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCTiles2dMapLayerConfigCppProxy class]]) {
        return ((MCTiles2dMapLayerConfigCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto Tiles2dMapLayerConfig::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCTiles2dMapLayerConfigCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
