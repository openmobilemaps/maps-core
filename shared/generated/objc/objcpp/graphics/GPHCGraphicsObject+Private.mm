// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from graphicsobjects.djinni

#import "GPHCGraphicsObject+Private.h"
#import "GPHCGraphicsObject.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "GPHCRenderingContext+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface GPHCGraphicsObjectCppProxy : NSObject<GPHCGraphicsObject>

- (id)initWithCpp:(const std::shared_ptr<::GraphicsObject>&)cppRef;

@end

@implementation GPHCGraphicsObjectCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::GraphicsObject>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::GraphicsObject>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (BOOL)isReady {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->isReady();
        return ::djinni::Bool::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setup {
    try {
        _cppRefHandle.get()->setup();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)clear {
    try {
        _cppRefHandle.get()->clear();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)render:(nullable id<GPHCRenderingContext>)context {
    try {
        _cppRefHandle.get()->render(::djinni_generated::RenderingContext::toCpp(context));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class GraphicsObject::ObjcProxy final
: public ::GraphicsObject
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::GraphicsObject;
public:
    using ObjcProxyBase::ObjcProxyBase;
    bool isReady() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() isReady];
            return ::djinni::Bool::toCpp(objcpp_result_);
        }
    }
    void setup() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setup];
        }
    }
    void clear() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() clear];
        }
    }
    void render(const std::shared_ptr<::RenderingContext> & c_context) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() render:(::djinni_generated::RenderingContext::fromCpp(c_context))];
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto GraphicsObject::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[GPHCGraphicsObjectCppProxy class]]) {
        return ((GPHCGraphicsObjectCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto GraphicsObject::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<GPHCGraphicsObjectCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
