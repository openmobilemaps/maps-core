// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from renderer.djinni

#pragma once

#include "RenderPass.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeRenderPass final : ::djinni::JniInterface<::RenderPass, NativeRenderPass> {
public:
    using CppType = std::shared_ptr<::RenderPass>;
    using CppOptType = std::shared_ptr<::RenderPass>;
    using JniType = jobject;

    using Boxed = NativeRenderPass;

    ~NativeRenderPass();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeRenderPass>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeRenderPass>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeRenderPass();
    friend ::djinni::JniClass<NativeRenderPass>;
    friend ::djinni::JniInterface<::RenderPass, NativeRenderPass>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::RenderPass
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        std::vector<std::shared_ptr<::GraphicsObject>> getGraphicsObjects() override;

    private:
        friend ::djinni::JniInterface<::RenderPass, ::djinni_generated::NativeRenderPass>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("ch/ubique/mapscore/shared/graphics/RenderPass") };
    const jmethodID method_getGraphicsObjects { ::djinni::jniGetMethodID(clazz.get(), "getGraphicsObjects", "()Ljava/util/ArrayList;") };
};

}  // namespace djinni_generated
