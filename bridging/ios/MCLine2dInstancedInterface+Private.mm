// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from graphicsobjects.djinni

#import "MCLine2dInstancedInterface+Private.h"
#import "MCLine2dInstancedInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCGraphicsObjectInterface+Private.h"
#import "MCQuad2dD+Private.h"
#import "MCSharedBytes+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCLine2dInstancedInterfaceCppProxy : NSObject<MCLine2dInstancedInterface>

- (id)initWithCpp:(const std::shared_ptr<::Line2dInstancedInterface>&)cppRef;

@end

@implementation MCLine2dInstancedInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::Line2dInstancedInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::Line2dInstancedInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)setFrame:(nonnull MCQuad2dD *)frame {
    try {
        _cppRefHandle.get()->setFrame(::djinni_generated::Quad2dD::toCpp(frame));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setInstanceCount:(int32_t)count {
    try {
        _cppRefHandle.get()->setInstanceCount(::djinni::I32::toCpp(count));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setPositions:(nonnull MCSharedBytes *)positions {
    try {
        _cppRefHandle.get()->setPositions(::djinni_generated::SharedBytes::toCpp(positions));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<MCGraphicsObjectInterface>)asGraphicsObject {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->asGraphicsObject();
        return ::djinni_generated::GraphicsObjectInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class Line2dInstancedInterface::ObjcProxy final
: public ::Line2dInstancedInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::Line2dInstancedInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void setFrame(const ::Quad2dD & c_frame) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setFrame:(::djinni_generated::Quad2dD::fromCpp(c_frame))];
        }
    }
    void setInstanceCount(int32_t c_count) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setInstanceCount:(::djinni::I32::fromCpp(c_count))];
        }
    }
    void setPositions(const ::SharedBytes & c_positions) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() setPositions:(::djinni_generated::SharedBytes::fromCpp(c_positions))];
        }
    }
    /*not-null*/ std::shared_ptr<::GraphicsObjectInterface> asGraphicsObject() override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() asGraphicsObject];
            return ::djinni_generated::GraphicsObjectInterface::toCpp(objcpp_result_);
        }
    }
};

} // namespace djinni_generated

namespace djinni_generated {

auto Line2dInstancedInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCLine2dInstancedInterfaceCppProxy class]]) {
        return ((MCLine2dInstancedInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto Line2dInstancedInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCLine2dInstancedInterfaceCppProxy>(cpp);
}

} // namespace djinni_generated

@end
