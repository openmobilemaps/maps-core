// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from network_activity_manager.djinni

#include "NativeNetworkActivityManager.h"  // my header
#include "Marshal.hpp"
#include "NativeNetworkActivityListener.h"
#include "NativeTiledLayerError.h"

namespace djinni_generated {

NativeNetworkActivityManager::NativeNetworkActivityManager() : ::djinni::JniInterface<::NetworkActivityManager, NativeNetworkActivityManager>("io/openmobilemaps/mapscore/shared/map/NetworkActivityManager$CppProxy") {}

NativeNetworkActivityManager::~NativeNetworkActivityManager() = default;


CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_NetworkActivityManager_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        delete reinterpret_cast<::djinni::CppProxyHandle<::NetworkActivityManager>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT jobject JNICALL Java_io_openmobilemaps_mapscore_shared_map_NetworkActivityManager_00024CppProxy_create(JNIEnv* jniEnv, jobject /*this*/)
{
    try {
        DJINNI_FUNCTION_PROLOGUE0(jniEnv);
        auto r = ::NetworkActivityManager::create();
        return ::djinni::release(::djinni_generated::NativeNetworkActivityManager::fromCpp(jniEnv, r));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, 0 /* value doesn't matter */)
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_NetworkActivityManager_00024CppProxy_native_1addTiledLayerError(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_error)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::NetworkActivityManager>(nativeRef);
        ref->addTiledLayerError(::djinni_generated::NativeTiledLayerError::toCpp(jniEnv, j_error));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_NetworkActivityManager_00024CppProxy_native_1removeError(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_url)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::NetworkActivityManager>(nativeRef);
        ref->removeError(::djinni::String::toCpp(jniEnv, j_url));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_NetworkActivityManager_00024CppProxy_native_1removeAllErrorsForLayer(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_layerName)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::NetworkActivityManager>(nativeRef);
        ref->removeAllErrorsForLayer(::djinni::String::toCpp(jniEnv, j_layerName));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_NetworkActivityManager_00024CppProxy_native_1clearAllErrors(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::NetworkActivityManager>(nativeRef);
        ref->clearAllErrors();
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_NetworkActivityManager_00024CppProxy_native_1addNetworkActivityListener(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_listener)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::NetworkActivityManager>(nativeRef);
        ref->addNetworkActivityListener(::djinni_generated::NativeNetworkActivityListener::toCpp(jniEnv, j_listener));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_NetworkActivityManager_00024CppProxy_native_1removeNetworkActivityListener(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_listener)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::NetworkActivityManager>(nativeRef);
        ref->removeNetworkActivityListener(::djinni_generated::NativeNetworkActivityListener::toCpp(jniEnv, j_listener));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_NetworkActivityManager_00024CppProxy_native_1updateRemainingTasks(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jstring j_layerName, jint j_taskCount)
{
    try {
        DJINNI_FUNCTION_PROLOGUE1(jniEnv, nativeRef);
        const auto& ref = ::djinni::objectFromHandleAddress<::NetworkActivityManager>(nativeRef);
        ref->updateRemainingTasks(::djinni::String::toCpp(jniEnv, j_layerName),
                                  ::djinni::I32::toCpp(jniEnv, j_taskCount));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

}  // namespace djinni_generated
