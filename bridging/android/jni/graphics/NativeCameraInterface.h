// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from core.djinni

#pragma once

#include "CameraInterface.h"
#include "djinni_support.hpp"

namespace djinni_generated {

class NativeCameraInterface final : ::djinni::JniInterface<::CameraInterface, NativeCameraInterface> {
public:
    using CppType = std::shared_ptr<::CameraInterface>;
    using CppOptType = std::shared_ptr<::CameraInterface>;
    using JniType = jobject;

    using Boxed = NativeCameraInterface;

    ~NativeCameraInterface();

    static CppType toCpp(JNIEnv* jniEnv, JniType j) { return ::djinni::JniClass<NativeCameraInterface>::get()._fromJava(jniEnv, j); }
    static ::djinni::LocalRef<JniType> fromCppOpt(JNIEnv* jniEnv, const CppOptType& c) { return {jniEnv, ::djinni::JniClass<NativeCameraInterface>::get()._toJava(jniEnv, c)}; }
    static ::djinni::LocalRef<JniType> fromCpp(JNIEnv* jniEnv, const CppType& c) { return fromCppOpt(jniEnv, c); }

private:
    NativeCameraInterface();
    friend ::djinni::JniClass<NativeCameraInterface>;
    friend ::djinni::JniInterface<::CameraInterface, NativeCameraInterface>;

    class JavaProxy final : ::djinni::JavaProxyHandle<JavaProxy>, public ::CameraInterface
    {
    public:
        JavaProxy(JniType j);
        ~JavaProxy();

        std::vector<float> getMvpMatrix() override;
        void viewportSizeChanged() override;

    private:
        friend ::djinni::JniInterface<::CameraInterface, ::djinni_generated::NativeCameraInterface>;
    };

    const ::djinni::GlobalRef<jclass> clazz { ::djinni::jniFindClass("ch/ubique/mapscore/shared/graphics/CameraInterface") };
    const jmethodID method_getMvpMatrix { ::djinni::jniGetMethodID(clazz.get(), "getMvpMatrix", "()Ljava/util/ArrayList;") };
    const jmethodID method_viewportSizeChanged { ::djinni::jniGetMethodID(clazz.get(), "viewportSizeChanged", "()V") };
};

}  // namespace djinni_generated
