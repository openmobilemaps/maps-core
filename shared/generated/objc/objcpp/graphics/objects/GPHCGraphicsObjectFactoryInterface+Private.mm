// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from graphicsobjects.djinni

#import "GPHCGraphicsObjectFactoryInterface+Private.h"
#import "GPHCGraphicsObjectFactoryInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIObjcWrapperCache+Private.h"
#import "GPHCLine2dInterface+Private.h"
#import "GPHCLineShaderProgramInterface+Private.h"
#import "GPHCPolygon2dInterface+Private.h"
#import "GPHCRectangle2dInterface+Private.h"
#import "GPHCShaderProgramInterface+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface GPHCGraphicsObjectFactoryInterfaceCppProxy : NSObject<GPHCGraphicsObjectFactoryInterface>

- (id)initWithCpp:(const std::shared_ptr<::GraphicsObjectFactoryInterface>&)cppRef;

@end

@implementation GPHCGraphicsObjectFactoryInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::GraphicsObjectFactoryInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::GraphicsObjectFactoryInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nullable id<GPHCRectangle2dInterface>)createRectangle:(nullable id<GPHCShaderProgramInterface>)shader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createRectangle(::djinni_generated::ShaderProgramInterface::toCpp(shader));
        return ::djinni_generated::Rectangle2dInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<GPHCLine2dInterface>)createLine:(nullable id<GPHCLineShaderProgramInterface>)lineShader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createLine(::djinni_generated::LineShaderProgramInterface::toCpp(lineShader));
        return ::djinni_generated::Line2dInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (nullable id<GPHCPolygon2dInterface>)createPolygon:(nullable id<GPHCShaderProgramInterface>)shader {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->createPolygon(::djinni_generated::ShaderProgramInterface::toCpp(shader));
        return ::djinni_generated::Polygon2dInterface::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class GraphicsObjectFactoryInterface::ObjcProxy final
: public ::GraphicsObjectFactoryInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::GraphicsObjectFactoryInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    std::shared_ptr<::Rectangle2dInterface> createRectangle(const std::shared_ptr<::ShaderProgramInterface> & c_shader) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createRectangle:(::djinni_generated::ShaderProgramInterface::fromCpp(c_shader))];
            return ::djinni_generated::Rectangle2dInterface::toCpp(objcpp_result_);
        }
    }
    std::shared_ptr<::Line2dInterface> createLine(const std::shared_ptr<::LineShaderProgramInterface> & c_lineShader) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createLine:(::djinni_generated::LineShaderProgramInterface::fromCpp(c_lineShader))];
            return ::djinni_generated::Line2dInterface::toCpp(objcpp_result_);
        }
    }
    std::shared_ptr<::Polygon2dInterface> createPolygon(const std::shared_ptr<::ShaderProgramInterface> & c_shader) override
    {
        @autoreleasepool {
            auto objcpp_result_ = [djinni_private_get_proxied_objc_object() createPolygon:(::djinni_generated::ShaderProgramInterface::fromCpp(c_shader))];
            return ::djinni_generated::Polygon2dInterface::toCpp(objcpp_result_);
        }
    }
};

}  // namespace djinni_generated

namespace djinni_generated {

auto GraphicsObjectFactoryInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[GPHCGraphicsObjectFactoryInterfaceCppProxy class]]) {
        return ((GPHCGraphicsObjectFactoryInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto GraphicsObjectFactoryInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<GPHCGraphicsObjectFactoryInterfaceCppProxy>(cpp);
}

}  // namespace djinni_generated

@end
