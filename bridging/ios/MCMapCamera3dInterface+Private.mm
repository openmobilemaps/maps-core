// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

#import "MCMapCamera3dInterface+Private.h"
#import "MCMapCamera3dInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "MCCamera3dConfig+Private.h"
#import "MCCoord+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCMapCamera3dInterface ()

- (id)initWithCpp:(const std::shared_ptr<::MapCamera3dInterface>&)cppRef;

@end

@implementation MCMapCamera3dInterface {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::MapCamera3dInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::MapCamera3dInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (nonnull MCCamera3dConfig *)getCameraConfig {
    try {
        auto objcpp_result_ = _cppRefHandle.get()->getCameraConfig();
        return ::djinni_generated::Camera3dConfig::fromCpp(objcpp_result_);
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setCameraConfig:(nonnull MCCamera3dConfig *)config
        durationSeconds:(nullable NSNumber *)durationSeconds
             targetZoom:(nullable NSNumber *)targetZoom
       targetCoordinate:(nullable MCCoord *)targetCoordinate {
    try {
        _cppRefHandle.get()->setCameraConfig(::djinni_generated::Camera3dConfig::toCpp(config),
                                             ::djinni::Optional<std::optional, ::djinni::F32>::toCpp(durationSeconds),
                                             ::djinni::Optional<std::optional, ::djinni::F32>::toCpp(targetZoom),
                                             ::djinni::Optional<std::optional, ::djinni_generated::Coord>::toCpp(targetCoordinate));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)setHardwareVpMatrix:(nonnull NSArray<NSNumber *> *)vpMatrix {
    try {
        _cppRefHandle.get()->setHardwareVpMatrix(::djinni::List<::djinni::F64>::toCpp(vpMatrix));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

auto MapCamera3dInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    return objc->_cppRefHandle.get();
}

auto MapCamera3dInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    return ::djinni::get_cpp_proxy<MCMapCamera3dInterface>(cpp);
}

} // namespace djinni_generated

@end
