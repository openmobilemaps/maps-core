// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from map_helpers.djinni

#include "NativeErrorManagerListener.h"  // my header
#include "Marshal.hpp"
#include "NativeTiledLayerError.h"

namespace djinni_generated {

NativeErrorManagerListener::NativeErrorManagerListener() : ::djinni::JniInterface<::ErrorManagerListener, NativeErrorManagerListener>("io/openmobilemaps/mapscore/shared/map/ErrorManagerListener$CppProxy") {}

NativeErrorManagerListener::~NativeErrorManagerListener() = default;

NativeErrorManagerListener::JavaProxy::JavaProxy(JniType j) : Handle(::djinni::jniGetThreadEnv(), j) { }

NativeErrorManagerListener::JavaProxy::~JavaProxy() = default;

void NativeErrorManagerListener::JavaProxy::onTiledLayerErrorStateChanged(const std::vector<::TiledLayerError> & c_errors) {
    auto jniEnv = ::djinni::jniGetThreadEnv();
    ::djinni::JniLocalScope jscope(jniEnv, 10);
    const auto& data = ::djinni::JniClass<::djinni_generated::NativeErrorManagerListener>::get();
    jniEnv->CallVoidMethod(Handle::get().get(), data.method_onTiledLayerErrorStateChanged,
                           ::djinni::get(::djinni::List<::djinni_generated::NativeTiledLayerError>::fromCpp(jniEnv, c_errors)));
    ::djinni::jniExceptionCheck(jniEnv);
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_ErrorManagerListener_00024CppProxy_nativeDestroy(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef)
{
    try {
        delete reinterpret_cast<::djinni::CppProxyHandle<::ErrorManagerListener>*>(nativeRef);
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

CJNIEXPORT void JNICALL Java_io_openmobilemaps_mapscore_shared_map_ErrorManagerListener_00024CppProxy_native_1onTiledLayerErrorStateChanged(JNIEnv* jniEnv, jobject /*this*/, jlong nativeRef, jobject j_errors)
{
    try {
        const auto& ref = ::djinni::objectFromHandleAddress<::ErrorManagerListener>(nativeRef);
        ref->onTiledLayerErrorStateChanged(::djinni::List<::djinni_generated::NativeTiledLayerError>::toCpp(jniEnv, j_errors));
    } JNI_TRANSLATE_EXCEPTIONS_RETURN(jniEnv, )
}

} // namespace djinni_generated
