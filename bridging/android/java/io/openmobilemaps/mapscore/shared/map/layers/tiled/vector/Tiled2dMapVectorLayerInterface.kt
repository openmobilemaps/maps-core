// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from tiled_vector_layer.djinni

package io.openmobilemaps.mapscore.shared.map.layers.tiled.vector

import com.snapchat.djinni.NativeObjectManager
import java.util.concurrent.atomic.AtomicBoolean

abstract class Tiled2dMapVectorLayerInterface {

    companion object {
        @JvmStatic
        external fun createFromStyleJson(layerName: String, styleJsonUrl: String, loaders: ArrayList<io.openmobilemaps.mapscore.shared.map.loader.LoaderInterface>, fontLoader: io.openmobilemaps.mapscore.shared.map.loader.FontLoaderInterface): Tiled2dMapVectorLayerInterface

        @JvmStatic
        external fun createExplicitly(layerName: String, styleJson: String?, localStyleJson: Boolean?, loaders: ArrayList<io.openmobilemaps.mapscore.shared.map.loader.LoaderInterface>, fontLoader: io.openmobilemaps.mapscore.shared.map.loader.FontLoaderInterface, localDataProvider: Tiled2dMapVectorLayerLocalDataProviderInterface?, customZoomInfo: io.openmobilemaps.mapscore.shared.map.layers.tiled.Tiled2dMapZoomInfo?, symbolDelegate: Tiled2dMapVectorLayerSymbolDelegateInterface?, sourceUrlParams: HashMap<String, String>?): Tiled2dMapVectorLayerInterface
    }

    abstract fun setSelectionDelegate(selectionDelegate: Tiled2dMapVectorLayerSelectionCallbackInterface?)

    abstract fun asLayerInterface(): io.openmobilemaps.mapscore.shared.map.LayerInterface

    abstract fun setMinZoomLevelIdentifier(value: Int?)

    abstract fun getMinZoomLevelIdentifier(): Int?

    abstract fun setMaxZoomLevelIdentifier(value: Int?)

    abstract fun getMaxZoomLevelIdentifier(): Int?

    abstract fun getStyleMetadataJson(): String?

    abstract fun setFeatureState(identifier: String, properties: HashMap<String, VectorLayerFeatureInfoValue>)

    abstract fun setGlobalState(properties: HashMap<String, VectorLayerFeatureInfoValue>)

    abstract fun getVisiblePointFeatureContexts(paddingPc: Float, sourceLayer: String?): ArrayList<VectorLayerFeatureCoordInfo>

    abstract fun setReadyStateListener(listener: io.openmobilemaps.mapscore.shared.map.layers.tiled.Tiled2dMapReadyStateListener?)

    abstract fun reloadDataSource(sourceName: String)

    abstract fun reloadLocalDataSource(sourceName: String, geoJson: String)

    abstract fun performClick(coord: io.openmobilemaps.mapscore.shared.map.coordinates.Coord)

    private class CppProxy : Tiled2dMapVectorLayerInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun setSelectionDelegate(selectionDelegate: Tiled2dMapVectorLayerSelectionCallbackInterface?) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setSelectionDelegate(this.nativeRef, selectionDelegate)
        }
        private external fun native_setSelectionDelegate(_nativeRef: Long, selectionDelegate: Tiled2dMapVectorLayerSelectionCallbackInterface?)

        override fun asLayerInterface(): io.openmobilemaps.mapscore.shared.map.LayerInterface {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_asLayerInterface(this.nativeRef)
        }
        private external fun native_asLayerInterface(_nativeRef: Long): io.openmobilemaps.mapscore.shared.map.LayerInterface

        override fun setMinZoomLevelIdentifier(value: Int?) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setMinZoomLevelIdentifier(this.nativeRef, value)
        }
        private external fun native_setMinZoomLevelIdentifier(_nativeRef: Long, value: Int?)

        override fun getMinZoomLevelIdentifier(): Int? {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getMinZoomLevelIdentifier(this.nativeRef)
        }
        private external fun native_getMinZoomLevelIdentifier(_nativeRef: Long): Int?

        override fun setMaxZoomLevelIdentifier(value: Int?) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setMaxZoomLevelIdentifier(this.nativeRef, value)
        }
        private external fun native_setMaxZoomLevelIdentifier(_nativeRef: Long, value: Int?)

        override fun getMaxZoomLevelIdentifier(): Int? {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getMaxZoomLevelIdentifier(this.nativeRef)
        }
        private external fun native_getMaxZoomLevelIdentifier(_nativeRef: Long): Int?

        override fun getStyleMetadataJson(): String? {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getStyleMetadataJson(this.nativeRef)
        }
        private external fun native_getStyleMetadataJson(_nativeRef: Long): String?

        override fun setFeatureState(identifier: String, properties: HashMap<String, VectorLayerFeatureInfoValue>) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setFeatureState(this.nativeRef, identifier, properties)
        }
        private external fun native_setFeatureState(_nativeRef: Long, identifier: String, properties: HashMap<String, VectorLayerFeatureInfoValue>)

        override fun setGlobalState(properties: HashMap<String, VectorLayerFeatureInfoValue>) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setGlobalState(this.nativeRef, properties)
        }
        private external fun native_setGlobalState(_nativeRef: Long, properties: HashMap<String, VectorLayerFeatureInfoValue>)

        override fun getVisiblePointFeatureContexts(paddingPc: Float, sourceLayer: String?): ArrayList<VectorLayerFeatureCoordInfo> {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getVisiblePointFeatureContexts(this.nativeRef, paddingPc, sourceLayer)
        }
        private external fun native_getVisiblePointFeatureContexts(_nativeRef: Long, paddingPc: Float, sourceLayer: String?): ArrayList<VectorLayerFeatureCoordInfo>

        override fun setReadyStateListener(listener: io.openmobilemaps.mapscore.shared.map.layers.tiled.Tiled2dMapReadyStateListener?) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_setReadyStateListener(this.nativeRef, listener)
        }
        private external fun native_setReadyStateListener(_nativeRef: Long, listener: io.openmobilemaps.mapscore.shared.map.layers.tiled.Tiled2dMapReadyStateListener?)

        override fun reloadDataSource(sourceName: String) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_reloadDataSource(this.nativeRef, sourceName)
        }
        private external fun native_reloadDataSource(_nativeRef: Long, sourceName: String)

        override fun reloadLocalDataSource(sourceName: String, geoJson: String) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_reloadLocalDataSource(this.nativeRef, sourceName, geoJson)
        }
        private external fun native_reloadLocalDataSource(_nativeRef: Long, sourceName: String, geoJson: String)

        override fun performClick(coord: io.openmobilemaps.mapscore.shared.map.coordinates.Coord) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_performClick(this.nativeRef, coord)
        }
        private external fun native_performClick(_nativeRef: Long, coord: io.openmobilemaps.mapscore.shared.map.coordinates.Coord)
    }
}
