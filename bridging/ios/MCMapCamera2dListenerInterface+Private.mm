// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from camera.djinni

#import "MCMapCamera2dListenerInterface+Private.h"
#import "MCMapCamera2dListenerInterface.h"
#import "DJICppWrapperCache+Private.h"
#import "DJIError.h"
#import "DJIMarshal+Private.h"
#import "DJIObjcWrapperCache+Private.h"
#import "MCRectCoord+Private.h"
#include <exception>
#include <stdexcept>
#include <utility>

static_assert(__has_feature(objc_arc), "Djinni requires ARC to be enabled for this file");

@interface MCMapCamera2dListenerInterfaceCppProxy : NSObject<MCMapCamera2dListenerInterface>

- (id)initWithCpp:(const std::shared_ptr<::MapCamera2dListenerInterface>&)cppRef;

@end

@implementation MCMapCamera2dListenerInterfaceCppProxy {
    ::djinni::CppProxyCache::Handle<std::shared_ptr<::MapCamera2dListenerInterface>> _cppRefHandle;
}

- (id)initWithCpp:(const std::shared_ptr<::MapCamera2dListenerInterface>&)cppRef
{
    if (self = [super init]) {
        _cppRefHandle.assign(cppRef);
    }
    return self;
}

- (void)onVisibleBoundsChanged:(nonnull MCRectCoord *)visibleBounds
                          zoom:(double)zoom {
    try {
        _cppRefHandle.get()->onVisibleBoundsChanged(::djinni_generated::RectCoord::toCpp(visibleBounds),
                                                    ::djinni::F64::toCpp(zoom));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onRotationChanged:(float)angle {
    try {
        _cppRefHandle.get()->onRotationChanged(::djinni::F32::toCpp(angle));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onMapInteraction {
    try {
        _cppRefHandle.get()->onMapInteraction();
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

- (void)onCameraChange:(nonnull NSArray<NSNumber *> *)viewMatrix
      projectionMatrix:(nonnull NSArray<NSNumber *> *)projectionMatrix
           verticalFov:(float)verticalFov
         horizontalFov:(float)horizontalFov
                 width:(float)width
                height:(float)height
    focusPointAltitude:(float)focusPointAltitude {
    try {
        _cppRefHandle.get()->onCameraChange(::djinni::List<::djinni::F32>::toCpp(viewMatrix),
                                            ::djinni::List<::djinni::F32>::toCpp(projectionMatrix),
                                            ::djinni::F32::toCpp(verticalFov),
                                            ::djinni::F32::toCpp(horizontalFov),
                                            ::djinni::F32::toCpp(width),
                                            ::djinni::F32::toCpp(height),
                                            ::djinni::F32::toCpp(focusPointAltitude));
    } DJINNI_TRANSLATE_EXCEPTIONS()
}

namespace djinni_generated {

class MapCamera2dListenerInterface::ObjcProxy final
: public ::MapCamera2dListenerInterface
, private ::djinni::ObjcProxyBase<ObjcType>
{
    friend class ::djinni_generated::MapCamera2dListenerInterface;
public:
    using ObjcProxyBase::ObjcProxyBase;
    void onVisibleBoundsChanged(const ::RectCoord & c_visibleBounds, double c_zoom) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() onVisibleBoundsChanged:(::djinni_generated::RectCoord::fromCpp(c_visibleBounds))
                                                                        zoom:(::djinni::F64::fromCpp(c_zoom))];
        }
    }
    void onRotationChanged(float c_angle) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() onRotationChanged:(::djinni::F32::fromCpp(c_angle))];
        }
    }
    void onMapInteraction() override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() onMapInteraction];
        }
    }
    void onCameraChange(const std::vector<float> & c_viewMatrix, const std::vector<float> & c_projectionMatrix, float c_verticalFov, float c_horizontalFov, float c_width, float c_height, float c_focusPointAltitude) override
    {
        @autoreleasepool {
            [djinni_private_get_proxied_objc_object() onCameraChange:(::djinni::List<::djinni::F32>::fromCpp(c_viewMatrix))
                                                    projectionMatrix:(::djinni::List<::djinni::F32>::fromCpp(c_projectionMatrix))
                                                         verticalFov:(::djinni::F32::fromCpp(c_verticalFov))
                                                       horizontalFov:(::djinni::F32::fromCpp(c_horizontalFov))
                                                               width:(::djinni::F32::fromCpp(c_width))
                                                              height:(::djinni::F32::fromCpp(c_height))
                                                  focusPointAltitude:(::djinni::F32::fromCpp(c_focusPointAltitude))];
        }
    }
};

} // namespace djinni_generated

namespace djinni_generated {

auto MapCamera2dListenerInterface::toCpp(ObjcType objc) -> CppType
{
    if (!objc) {
        return nullptr;
    }
    if ([(id)objc isKindOfClass:[MCMapCamera2dListenerInterfaceCppProxy class]]) {
        return ((MCMapCamera2dListenerInterfaceCppProxy*)objc)->_cppRefHandle.get();
    }
    return ::djinni::get_objc_proxy<ObjcProxy>(objc);
}

auto MapCamera2dListenerInterface::fromCppOpt(const CppOptType& cpp) -> ObjcType
{
    if (!cpp) {
        return nil;
    }
    if (auto cppPtr = dynamic_cast<ObjcProxy*>(cpp.get())) {
        return cppPtr->djinni_private_get_proxied_objc_object();
    }
    return ::djinni::get_cpp_proxy<MCMapCamera2dListenerInterfaceCppProxy>(cpp);
}

} // namespace djinni_generated

@end
