buildscript {
	ext.kotlin_version = "1.6.21"
	repositories {
		google()
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:7.1.3'
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"

		classpath 'com.vanniktech:gradle-maven-publish-plugin:0.13.0'
		classpath 'org.jetbrains.dokka:dokka-gradle-plugin:1.7.10'
	}
}

repositories {
	google()
	mavenCentral()
	jcenter()
}

apply plugin : 'com.android.library'
apply plugin : 'kotlin-android'
apply plugin: 'com.vanniktech.maven.publish'

android {
	compileSdkVersion 31

	defaultConfig {
		minSdkVersion 23
		targetSdkVersion 31
		versionCode Integer.parseInt(VERSION_CODE)
		versionName VERSION_NAME

		testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
		consumerProguardFiles "consumer-rules.pro"
		externalNativeBuild {
			cmake {
				arguments "-DANDROID_STL=c++_shared"
				cppFlags "-std=c++17 -frtti -fexceptions"
			}
		}
	}

	externalNativeBuild {
		cmake {
			path "CMakeLists.txt"
		}
	}

	sourceSets {
		main {
			java {
				srcDir 'src/main/java'
				srcDir '../bridging/android/java'
			}
		}
	}

	buildFeatures {
		prefab true
		prefabPublishing true
	}

	prefab{
		layergps {
			headers ".cpp_includes"
			name "layergps"
		}
	}

	packagingOptions {
		exclude("**/libmapscore.so")
		exclude('**/libc++_shared.so')
	}

	defaultPublishConfig "release"

	buildTypes {
		release {
			ndk {
				debugSymbolLevel 'SYMBOL_TABLE'
			}
		}
	}

}

task copyHeaders() {
	String headersDir = ".cpp_includes"
	project.delete(headersDir)
	project.mkdir(headersDir)
	ConfigurableFileCollection collection = project.files(
			"src/main/cpp",
			"../bridging/android/jni",
			"../shared/public",
			"../shared/src")
	project.copy {
		duplicatesStrategy(DuplicatesStrategy.FAIL)
		from collection.asFileTree.getFiles()
		include("**/*.h")
		into project.file(headersDir)
	}
}
preBuild.dependsOn copyHeaders

ext.readProperty = { paramName -> readPropertyWithDefault(paramName, null) }
ext.readPropertyWithDefault = { paramName, defaultValue ->
	if (project.hasProperty(paramName)) {
		return project.getProperties().get(paramName)
	} else {
		Properties properties = new Properties()
		if (project.rootProject.file('local.properties').exists()) {
			properties.load(project.rootProject.file('local.properties').newDataInputStream())
		}
		if (properties.getProperty(paramName) != null) {
			return properties.getProperty(paramName)
		} else {
			return defaultValue
		}
	}
}

mavenPublish {
	androidVariantToPublish = PUBLISH_VARIANT
}

dependencies {

	implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
	implementation 'androidx.core:core-ktx:1.8.0'
	implementation 'com.google.android.gms:play-services-location:17.0.0'

    api 'io.openmobilemaps:mapscore-dev:1.4.1.166'

	testImplementation 'junit:junit:4.13.2'
	androidTestImplementation 'androidx.test.ext:junit:1.1.2'
	androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'
}

clean.doLast {
	project.delete("${projectDir}/build")
	project.delete("${projectDir}/.cxx")
}