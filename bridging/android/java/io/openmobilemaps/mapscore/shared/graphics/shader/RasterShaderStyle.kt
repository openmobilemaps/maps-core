// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from shader.djinni

package io.openmobilemaps.mapscore.shared.graphics.shader

data class RasterShaderStyle(
    val opacity: Float,
    val brightnessMin: Float,
    val brightnessMax: Float,
    val contrast: Float,
    val saturation: Float,
    val gamma: Float,
    val brightnessShift: Float,
) : Comparable<RasterShaderStyle> {

    companion object {
        val DEFAULT_STYLE: RasterShaderStyle = RasterShaderStyle(
            1.0f /* opacity */ ,
            0.0f /* brightnessMin */ ,
            1.0f /* brightnessMax */ ,
            0.0f /* contrast */ ,
            0.0f /* saturation */ ,
            1.0f /* gamma */ ,
            0.0f /* brightnessShift */ )
    }

    override fun compareTo(other: RasterShaderStyle): Int {
        var tempResult = 0
        if (this.opacity < other.opacity) {
            tempResult = -1;
        } else if (this.opacity > other.opacity) {
            tempResult = 1;
        } else {
            tempResult = 0;
        }
        if (tempResult != 0) {
            return tempResult
        }
        if (this.brightnessMin < other.brightnessMin) {
            tempResult = -1;
        } else if (this.brightnessMin > other.brightnessMin) {
            tempResult = 1;
        } else {
            tempResult = 0;
        }
        if (tempResult != 0) {
            return tempResult
        }
        if (this.brightnessMax < other.brightnessMax) {
            tempResult = -1;
        } else if (this.brightnessMax > other.brightnessMax) {
            tempResult = 1;
        } else {
            tempResult = 0;
        }
        if (tempResult != 0) {
            return tempResult
        }
        if (this.contrast < other.contrast) {
            tempResult = -1;
        } else if (this.contrast > other.contrast) {
            tempResult = 1;
        } else {
            tempResult = 0;
        }
        if (tempResult != 0) {
            return tempResult
        }
        if (this.saturation < other.saturation) {
            tempResult = -1;
        } else if (this.saturation > other.saturation) {
            tempResult = 1;
        } else {
            tempResult = 0;
        }
        if (tempResult != 0) {
            return tempResult
        }
        if (this.gamma < other.gamma) {
            tempResult = -1;
        } else if (this.gamma > other.gamma) {
            tempResult = 1;
        } else {
            tempResult = 0;
        }
        if (tempResult != 0) {
            return tempResult
        }
        if (this.brightnessShift < other.brightnessShift) {
            tempResult = -1;
        } else if (this.brightnessShift > other.brightnessShift) {
            tempResult = 1;
        } else {
            tempResult = 0;
        }
        if (tempResult != 0) {
            return tempResult
        }
        return 0
    }
}
