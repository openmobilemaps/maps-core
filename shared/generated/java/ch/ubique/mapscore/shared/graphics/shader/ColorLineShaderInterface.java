// AUTOGENERATED FILE - DO NOT MODIFY!
// This file generated by Djinni from shader.djinni

package ch.ubique.mapscore.shared.graphics.shader;

import java.util.concurrent.atomic.AtomicBoolean;

public abstract class ColorLineShaderInterface {
    public abstract void setColor(float red, float green, float blue, float alpha);

    public abstract void setMiter(float miter);

    public abstract void setZoomFactor(float zoom);

    public abstract LineShaderProgramInterface asShaderProgramInterface();

    private static final class CppProxy extends ColorLineShaderInterface
    {
        private final long nativeRef;
        private final AtomicBoolean destroyed = new AtomicBoolean(false);

        private CppProxy(long nativeRef)
        {
            if (nativeRef == 0) throw new RuntimeException("nativeRef is zero");
            this.nativeRef = nativeRef;
        }

        private native void nativeDestroy(long nativeRef);
        public void _djinni_private_destroy()
        {
            boolean destroyed = this.destroyed.getAndSet(true);
            if (!destroyed) nativeDestroy(this.nativeRef);
        }
        protected void finalize() throws java.lang.Throwable
        {
            _djinni_private_destroy();
            super.finalize();
        }

        @Override
        public void setColor(float red, float green, float blue, float alpha)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setColor(this.nativeRef, red, green, blue, alpha);
        }
        private native void native_setColor(long _nativeRef, float red, float green, float blue, float alpha);

        @Override
        public void setMiter(float miter)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setMiter(this.nativeRef, miter);
        }
        private native void native_setMiter(long _nativeRef, float miter);

        @Override
        public void setZoomFactor(float zoom)
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            native_setZoomFactor(this.nativeRef, zoom);
        }
        private native void native_setZoomFactor(long _nativeRef, float zoom);

        @Override
        public LineShaderProgramInterface asShaderProgramInterface()
        {
            assert !this.destroyed.get() : "trying to use a destroyed object";
            return native_asShaderProgramInterface(this.nativeRef);
        }
        private native LineShaderProgramInterface native_asShaderProgramInterface(long _nativeRef);
    }
}
