// AUTOGENERATED FILE - DO NOT MODIFY!
// This file was generated by Djinni from core.djinni

package io.openmobilemaps.mapscore.shared.graphics

import com.snapchat.djinni.NativeObjectManager
import java.util.concurrent.atomic.AtomicBoolean

abstract class OpenGlRenderingContextInterface {

    abstract fun resume()

    abstract fun pause()

    abstract fun getCreateRenderTarget(name: String, textureFilter: io.openmobilemaps.mapscore.shared.graphics.objects.TextureFilterType, clearColor: io.openmobilemaps.mapscore.shared.graphics.common.Color, usesDepthStencil: Boolean): OpenGlRenderTargetInterface

    abstract fun deleteRenderTarget(name: String)

    abstract fun getRenderTargets(): ArrayList<OpenGlRenderTargetInterface>

    abstract fun getProgram(name: String): Int

    abstract fun storeProgram(name: String, program: Int)

    abstract fun getAspectRatio(): Float

    abstract fun getDeltaTimeMs(): Long

    public class CppProxy : OpenGlRenderingContextInterface {
        private val nativeRef: Long
        private val destroyed: AtomicBoolean = AtomicBoolean(false)

        private constructor(nativeRef: Long) {
            if (nativeRef == 0L) error("nativeRef is zero")
            this.nativeRef = nativeRef
            NativeObjectManager.register(this, nativeRef)
        }

        companion object {
            @JvmStatic
            external fun nativeDestroy(nativeRef: Long)
        }

        override fun resume() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_resume(this.nativeRef)
        }
        private external fun native_resume(_nativeRef: Long)

        override fun pause() {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_pause(this.nativeRef)
        }
        private external fun native_pause(_nativeRef: Long)

        override fun getCreateRenderTarget(name: String, textureFilter: io.openmobilemaps.mapscore.shared.graphics.objects.TextureFilterType, clearColor: io.openmobilemaps.mapscore.shared.graphics.common.Color, usesDepthStencil: Boolean): OpenGlRenderTargetInterface {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getCreateRenderTarget(this.nativeRef, name, textureFilter, clearColor, usesDepthStencil)
        }
        private external fun native_getCreateRenderTarget(_nativeRef: Long, name: String, textureFilter: io.openmobilemaps.mapscore.shared.graphics.objects.TextureFilterType, clearColor: io.openmobilemaps.mapscore.shared.graphics.common.Color, usesDepthStencil: Boolean): OpenGlRenderTargetInterface

        override fun deleteRenderTarget(name: String) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_deleteRenderTarget(this.nativeRef, name)
        }
        private external fun native_deleteRenderTarget(_nativeRef: Long, name: String)

        override fun getRenderTargets(): ArrayList<OpenGlRenderTargetInterface> {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getRenderTargets(this.nativeRef)
        }
        private external fun native_getRenderTargets(_nativeRef: Long): ArrayList<OpenGlRenderTargetInterface>

        override fun getProgram(name: String): Int {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getProgram(this.nativeRef, name)
        }
        private external fun native_getProgram(_nativeRef: Long, name: String): Int

        override fun storeProgram(name: String, program: Int) {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            native_storeProgram(this.nativeRef, name, program)
        }
        private external fun native_storeProgram(_nativeRef: Long, name: String, program: Int)

        override fun getAspectRatio(): Float {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getAspectRatio(this.nativeRef)
        }
        private external fun native_getAspectRatio(_nativeRef: Long): Float

        override fun getDeltaTimeMs(): Long {
            assert(!this.destroyed.get()) { error("trying to use a destroyed object") }
            return native_getDeltaTimeMs(this.nativeRef)
        }
        private external fun native_getDeltaTimeMs(_nativeRef: Long): Long
    }
}
